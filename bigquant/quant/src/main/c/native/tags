!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
ABS_EPI16	arch/isa/alu.h	31;"	d
ABS_EPI16	arch/isa/alu.h	41;"	d
ABS_EPI16	arch/isa/alu.h	53;"	d
ADDS_EPI16	arch/isa/alu.h	30;"	d
ADDS_EPI16	arch/isa/alu.h	40;"	d
ADDS_EPI16	arch/isa/alu.h	52;"	d
ADD_EPI16	arch/isa/alu.h	28;"	d
ADD_EPI16	arch/isa/alu.h	38;"	d
ADD_EPI16	arch/isa/alu.h	50;"	d
ADD_EPI32	arch/isa/alu.h	24;"	d
ADD_EPI32	arch/isa/alu.h	33;"	d
ADD_EPI32	arch/isa/alu.h	46;"	d
ADD_EPI32_HALF	arch/isa/alu.h	34;"	d
ADD_PS	arch/isa/alu.h	13;"	d
ADD_PS	arch/isa/alu.h	18;"	d
ADD_PS	arch/isa/alu.h	8;"	d
ALLOC_X64	alloc.h	2;"	d
API_PREFIX	nn-fixpoint.h	49;"	d
API_PREFIX	nn-fixpoint.h	51;"	d
ARCH_CONFIG_H	arch/config.h	2;"	d
ARCH_CPUID_H	arch/cpuid.h	2;"	d
ARCH_ISA_ALU_H	arch/isa/alu.h	2;"	d
ARCH_ISA_DTYPE_H	arch/isa/dtype.h	2;"	d
ARCH_ISA_INSTRUCTION_H	arch/isa/instuction.h	2;"	d
ARCH_ISA_LOAD_H	arch/isa/load.h	2;"	d
ARCH_ISA_MISC_H	arch/isa/misc.h	2;"	d
ARCH_ISA_MUL_H	arch/isa/mul.h	2;"	d
ARCH_ISA_SHUFFLE_H	arch/isa/shuffle.h	2;"	d
ARCH_ISA_STORE_H	arch/isa/store.h	2;"	d
AVX2Kernel32Quantize	ops/quantize.h	/^INLINE_SPECIFIER void INLINE_ATTRIBUTE AVX2Kernel32Quantize(uint8_t *dst, float *src, const SIMDPSTYPE &scale, const SIMDPSTYPE &bias) {$/;"	f	signature:(uint8_t *dst, float *src, const SIMDPSTYPE &scale, const SIMDPSTYPE &bias)
AVX2Kernel4x8x8	ops/kernel/shuffle_avx2_sse42_igemm_4xnx8-x64.h	/^static INLINE_SPECIFIER void INLINE_ATTRIBUTE AVX2Kernel4x8x8(int8_t* &pa, uint8_t* &pb,$/;"	f	namespace:kernel::igemm4xn	signature:(int8_t* &pa, uint8_t* &pb, SIMDSITYPE &c11, SIMDSITYPE &c12, SIMDSITYPE &c21, SIMDSITYPE &c22, SIMDSITYPE &c31, SIMDSITYPE &c32, SIMDSITYPE &c41, SIMDSITYPE &c42)
AVX2Kernel8Quantize	ops/quantize.h	/^INLINE_SPECIFIER void INLINE_ATTRIBUTE AVX2Kernel8Quantize(uint8_t *dst, float *src, const SIMDPSTYPE &scale, const SIMDPSTYPE &bias) {$/;"	f	signature:(uint8_t *dst, float *src, const SIMDPSTYPE &scale, const SIMDPSTYPE &bias)
AVX2_FMA	arch/config.h	/^typedef enum CPU_FEATURE {SSE4_2=0, AVX2_FMA=1, AVX_512=2} CPU_FEATURE;$/;"	e	enum:CPU_FEATURE
AVX512Kernel16Quantize	ops/quantize.h	/^INLINE_SPECIFIER void INLINE_ATTRIBUTE AVX512Kernel16Quantize(uint8_t *dst, float *src, const SIMDPSTYPE &scale, const SIMDPSTYPE &bias) {$/;"	f	signature:(uint8_t *dst, float *src, const SIMDPSTYPE &scale, const SIMDPSTYPE &bias)
AVX512Kernel4x4x64	ops/kernel/shuffle_avx512_igemm_4x4x64.h	/^static INLINE_SPECIFIER void INLINE_ATTRIBUTE AVX512Kernel4x4x64(int8_t* &pa, uint8_t* &pb,$/;"	f	namespace:kernel::avx512_igemm4x4x64	signature:(int8_t* &pa, uint8_t* &pb, SIMDSITYPE &c00, SIMDSITYPE &c01, SIMDSITYPE &c02, SIMDSITYPE &c03, SIMDSITYPE &c10, SIMDSITYPE &c11, SIMDSITYPE &c12, SIMDSITYPE &c13, SIMDSITYPE &c20, SIMDSITYPE &c21, SIMDSITYPE &c22, SIMDSITYPE &c23, SIMDSITYPE &c30, SIMDSITYPE &c31, SIMDSITYPE &c32, SIMDSITYPE &c33)
AVX512Kernel64Quantize	ops/quantize.h	/^INLINE_SPECIFIER void INLINE_ATTRIBUTE AVX512Kernel64Quantize(uint8_t *dst, float *src, const SIMDPSTYPE &scale, const SIMDPSTYPE &bias) {$/;"	f	signature:(uint8_t *dst, float *src, const SIMDPSTYPE &scale, const SIMDPSTYPE &bias)
AVX_512	arch/config.h	/^typedef enum CPU_FEATURE {SSE4_2=0, AVX2_FMA=1, AVX_512=2} CPU_FEATURE;$/;"	e	enum:CPU_FEATURE
Allocate	tensor.h	/^  void Allocate(size_t alignment = 64) {$/;"	f	struct:Tensor	access:public	signature:(size_t alignment = 64)
Allocate_Memory	convolution-x64.h	/^  void Allocate_Memory() {$/;"	f	struct:ConvKernel	access:public	signature:()
Allocate_Memory	convolution-x64.h	/^  void Allocate_Memory(size_t kernel_h, size_t kernel_w, size_t stride_h, size_t stride_w, size_t dilation_h, size_t dilation_w, size_t pad_h, size_t pad_w, bool transposed) {$/;"	f	struct:ConvData	access:public	signature:(size_t kernel_h, size_t kernel_w, size_t stride_h, size_t stride_w, size_t dilation_h, size_t dilation_w, size_t pad_h, size_t pad_w, bool transposed)
ApplyKernel	ops/kernel/shuffle_avx2_sse42_igemm_4xnx8-x64.h	/^static INLINE_SPECIFIER void INLINE_ATTRIBUTE ApplyKernel(int8_t* &pa, uint8_t* &pb, size_t k, float fault_tolerance, float* result[], size_t length, size_t valid_lanes,$/;"	f	namespace:kernel::igemm4xn	signature:(int8_t* &pa, uint8_t* &pb, size_t k, float fault_tolerance, float* result[], size_t length, size_t valid_lanes, size_t i_index, size_t j_index, float* ratio_a, float* ratio_b, float *min_b, float *kernel_sum, float *bias, bool conv_relu_fusion, bool conv_bn_fusion, bool conv_bn_relu_fusion, bool conv_relu_bn_fusion, float *global_mean, float *mul_variance_coeff, float *scale, float *shift, kernel_function kernel, sum_function sum, reduce_function reduce, postprocess_function postprocess)
ApplyKernel	ops/kernel/shuffle_avx2_sse42_igemm_4xnx8-x64.h	/^static INLINE_SPECIFIER void INLINE_ATTRIBUTE ApplyKernel(int8_t* &pa, uint8_t* &pb, size_t k, float fault_tolerance, void* result[], size_t length, size_t valid_lanes,$/;"	f	namespace:kernel::igemm4xn	signature:(int8_t* &pa, uint8_t* &pb, size_t k, float fault_tolerance, void* result[], size_t length, size_t valid_lanes, kernel_function kernel, sum_function sum, reduce_function reduce, postprocess_function postprocess)
ApplyKernel	ops/kernel/shuffle_avx512_igemm_4x4x64.h	/^static INLINE_SPECIFIER void INLINE_ATTRIBUTE ApplyKernel(int8_t* &pa, uint8_t* &pb, size_t k, float fault_tolerance, float* result[], size_t length, size_t valid_lanes,$/;"	f	namespace:kernel::avx512_igemm4x4x64	signature:(int8_t* &pa, uint8_t* &pb, size_t k, float fault_tolerance, float* result[], size_t length, size_t valid_lanes, size_t i_index, size_t j_index, float* ratio_a, float* ratio_b, float *min_b, float *kernel_sum, float *bias, bool conv_relu_fusion, bool conv_bn_fusion, bool conv_bn_relu_fusion, bool conv_relu_bn_fusion, float *global_mean, float *mul_variance_coeff, float *scale, float *shift, kernel_function kernel, reduce_function reduce, postprocess_function postprocess)
ApplyKernel	ops/kernel/shuffle_avx512_igemm_4x4x64.h	/^static INLINE_SPECIFIER void INLINE_ATTRIBUTE ApplyKernel(int8_t* &pa, uint8_t* &pb, size_t k, float fault_tolerance, void* result[], size_t length, size_t valid_lanes,$/;"	f	namespace:kernel::avx512_igemm4x4x64	signature:(int8_t* &pa, uint8_t* &pb, size_t k, float fault_tolerance, void* result[], size_t length, size_t valid_lanes, kernel_function kernel, reduce_function reduce, postprocess_function postprocess)
ApplyKernel	ops/kernel/shuffle_sse42_igemm2x2x16.h	/^static INLINE_SPECIFIER void INLINE_ATTRIBUTE ApplyKernel(int8_t* &pa, uint8_t* &pb, size_t k, float fault_tolerance, float* result[], size_t length, size_t valid_lanes,$/;"	f	namespace:kernel::sse42_igemm2x2x16	signature:(int8_t* &pa, uint8_t* &pb, size_t k, float fault_tolerance, float* result[], size_t length, size_t valid_lanes, size_t i_index, size_t j_index, float* ratio_a, float* ratio_b, float *min_b, float *kernel_sum, float *bias, bool conv_relu_fusion, bool conv_bn_fusion, bool conv_bn_relu_fusion, bool conv_relu_bn_fusion, float *global_mean, float *mul_variance_coeff, float *scale, float *shift, kernel_function kernel, sum_function sum, reduce_function reduce, postprocess_function postprocess)
ApplyKernel	ops/kernel/shuffle_sse42_igemm2x2x16.h	/^static INLINE_SPECIFIER void INLINE_ATTRIBUTE ApplyKernel(int8_t* &pa, uint8_t* &pb, size_t k, float fault_tolerance, void* result[], size_t length, size_t valid_lanes,$/;"	f	namespace:kernel::sse42_igemm2x2x16	signature:(int8_t* &pa, uint8_t* &pb, size_t k, float fault_tolerance, void* result[], size_t length, size_t valid_lanes, kernel_function kernel, sum_function sum, reduce_function reduce, postprocess_function postprocess)
ApplyKernelWrapper	ops/kernel/shuffle_avx2_igemm4x1x32.h	/^static INLINE_SPECIFIER void INLINE_ATTRIBUTE ApplyKernelWrapper(int8_t* &pa, uint8_t* &pb, size_t k, float fault_tolerance, float* result[], size_t length, size_t valid_lanes,$/;"	f	namespace:kernel::igemm4x1	signature:(int8_t* &pa, uint8_t* &pb, size_t k, float fault_tolerance, float* result[], size_t length, size_t valid_lanes, size_t i_index, size_t j_index, float* ratio_a, float* ratio_b, float *min_b, float *kernel_sum, float *bias, bool conv_relu_fusion, bool conv_bn_fusion, bool conv_bn_relu_fusion, bool conv_relu_bn_fusion, float *global_mean, float *mul_variance_coeff, float *scale, float *shift, bool is_block)
ApplyKernelWrapper	ops/kernel/shuffle_avx2_igemm4x1x32.h	/^static INLINE_SPECIFIER void INLINE_ATTRIBUTE ApplyKernelWrapper(int8_t* &pa, uint8_t* &pb, size_t k, float fault_tolerance, void* result[], size_t length, size_t valid_lanes) {$/;"	f	namespace:kernel::igemm4x1	signature:(int8_t* &pa, uint8_t* &pb, size_t k, float fault_tolerance, void* result[], size_t length, size_t valid_lanes)
ApplyKernelWrapper	ops/kernel/shuffle_avx2_sse42_igemm_4xnx8-x64.h	/^static INLINE_SPECIFIER void INLINE_ATTRIBUTE ApplyKernelWrapper(int8_t* &pa, uint8_t* &pb, size_t k, float fault_tolerance, float* result[], size_t length, size_t valid_lanes,$/;"	f	namespace:kernel::igemm4xn	signature:(int8_t* &pa, uint8_t* &pb, size_t k, float fault_tolerance, float* result[], size_t length, size_t valid_lanes, size_t i_index, size_t j_index, float* ratio_a, float* ratio_b, float *min_b, float *kernel_sum, float *bias, bool conv_relu_fusion, bool conv_bn_fusion, bool conv_bn_relu_fusion, bool conv_relu_bn_fusion, float *global_mean, float *mul_variance_coeff, float *scale, float *shift, bool is_block)
ApplyKernelWrapper	ops/kernel/shuffle_avx2_sse42_igemm_4xnx8-x64.h	/^static INLINE_SPECIFIER void INLINE_ATTRIBUTE ApplyKernelWrapper(int8_t* &pa, uint8_t* &pb, size_t k, float fault_tolerance, void* result[], size_t length, size_t valid_lanes) {$/;"	f	namespace:kernel::igemm4xn	signature:(int8_t* &pa, uint8_t* &pb, size_t k, float fault_tolerance, void* result[], size_t length, size_t valid_lanes)
ApplyKernelWrapper	ops/kernel/shuffle_avx512_igemm_4x4x64.h	/^static INLINE_SPECIFIER void INLINE_ATTRIBUTE ApplyKernelWrapper(int8_t* &pa, uint8_t* &pb, size_t k, float fault_tolerance, float* result[], size_t length, size_t valid_lanes,$/;"	f	namespace:kernel::avx512_igemm4x4x64	signature:(int8_t* &pa, uint8_t* &pb, size_t k, float fault_tolerance, float* result[], size_t length, size_t valid_lanes, size_t i_index, size_t j_index, float* ratio_a, float* ratio_b, float *min_b, float *kernel_sum, float *bias, bool conv_relu_fusion, bool conv_bn_fusion, bool conv_bn_relu_fusion, bool conv_relu_bn_fusion, float *global_mean, float *mul_variance_coeff, float *scale, float *shift, bool is_block)
ApplyKernelWrapper	ops/kernel/shuffle_avx512_igemm_4x4x64.h	/^static INLINE_SPECIFIER void INLINE_ATTRIBUTE ApplyKernelWrapper(int8_t* &pa, uint8_t* &pb, size_t k, float fault_tolerance, void* result[], size_t length, size_t valid_lanes) {$/;"	f	namespace:kernel::avx512_igemm4x4x64	signature:(int8_t* &pa, uint8_t* &pb, size_t k, float fault_tolerance, void* result[], size_t length, size_t valid_lanes)
ApplyKernelWrapper	ops/kernel/shuffle_sse42_igemm2x2x16.h	/^static INLINE_SPECIFIER void INLINE_ATTRIBUTE ApplyKernelWrapper(int8_t* &pa, uint8_t* &pb, size_t k, float fault_tolerance, float* result[], size_t length, size_t valid_lanes,$/;"	f	namespace:kernel::sse42_igemm2x2x16	signature:(int8_t* &pa, uint8_t* &pb, size_t k, float fault_tolerance, float* result[], size_t length, size_t valid_lanes, size_t i_index, size_t j_index, float* ratio_a, float* ratio_b, float *min_b, float *kernel_sum, float *bias, bool conv_relu_fusion, bool conv_bn_fusion, bool conv_bn_relu_fusion, bool conv_relu_bn_fusion, float *global_mean, float *mul_variance_coeff, float *scale, float *shift, bool is_block)
ApplyKernelWrapper	ops/kernel/shuffle_sse42_igemm2x2x16.h	/^static INLINE_SPECIFIER void INLINE_ATTRIBUTE ApplyKernelWrapper(int8_t* &pa, uint8_t* &pb, size_t k, float fault_tolerance, void* result[], size_t length, size_t valid_lanes) {$/;"	f	namespace:kernel::sse42_igemm2x2x16	signature:(int8_t* &pa, uint8_t* &pb, size_t k, float fault_tolerance, void* result[], size_t length, size_t valid_lanes)
ApplyStreamKernel	ops/kernel/shuffle_avx2_igemm4x1x32.h	/^static INLINE_SPECIFIER void INLINE_ATTRIBUTE ApplyStreamKernel(int8_t* &pa, uint8_t* &pb, size_t k, float fault_tolerance, float* result[], size_t length, size_t valid_lanes,$/;"	f	namespace:kernel::igemm4x1	signature:(int8_t* &pa, uint8_t* &pb, size_t k, float fault_tolerance, float* result[], size_t length, size_t valid_lanes, size_t i_index, size_t j_index, float* ratio_a, float* ratio_b, float *min_b, float *kernel_sum, float *bias, bool conv_relu_fusion, bool conv_bn_fusion, bool conv_bn_relu_fusion, bool conv_relu_bn_fusion, float *global_mean, float *mul_variance_coeff, float *scale, float *shift, kernel_function kernel, sum_function sum, postprocess_function postprocess)
ApplyStreamKernel	ops/kernel/shuffle_avx2_igemm4x1x32.h	/^static INLINE_SPECIFIER void INLINE_ATTRIBUTE ApplyStreamKernel(int8_t* &pa, uint8_t* &pb, size_t k, float fault_tolerance, void* result[], size_t length, size_t valid_lanes,$/;"	f	namespace:kernel::igemm4x1	signature:(int8_t* &pa, uint8_t* &pb, size_t k, float fault_tolerance, void* result[], size_t length, size_t valid_lanes, kernel_function kernel, sum_function sum, postprocess_function postprocess)
BASE	base.h	2;"	d
BASECONVOLUTION_H	base_convolution.h	2;"	d
BN	ops/kernel-common.h	/^static INLINE_SPECIFIER void INLINE_ATTRIBUTE BN(SIMDPSTYPE &result, const SIMDPSTYPE &global_mean, const SIMDPSTYPE &mul_variance_coeff,$/;"	f	signature:(SIMDPSTYPE &result, const SIMDPSTYPE &global_mean, const SIMDPSTYPE &mul_variance_coeff, const SIMDPSTYPE &scale, const SIMDPSTYPE &shift)
BaseConvolutionAlgo	base_convolution.h	/^  BaseConvolutionAlgo(const ConvolutionKernelDesc &conv_kernel_desc)$/;"	f	struct:BaseConvolutionAlgo	access:public	signature:(const ConvolutionKernelDesc &conv_kernel_desc)
BaseConvolutionAlgo	base_convolution.h	/^struct BaseConvolutionAlgo {$/;"	s
BaseConvolutionAlgo::BaseConvolutionAlgo	base_convolution.h	/^  BaseConvolutionAlgo(const ConvolutionKernelDesc &conv_kernel_desc)$/;"	f	struct:BaseConvolutionAlgo	access:public	signature:(const ConvolutionKernelDesc &conv_kernel_desc)
BaseConvolutionAlgo::Execute	base_convolution.h	/^  virtual void Execute(float *out, const float *data, const float *bias, const ConvolutionDataDesc &conv_data_desc) = 0;$/;"	p	struct:BaseConvolutionAlgo	access:public	signature:(float *out, const float *data, const float *bias, const ConvolutionDataDesc &conv_data_desc)
BaseConvolutionAlgo::Free	base_convolution.h	/^  virtual void Free() = 0;$/;"	p	struct:BaseConvolutionAlgo	access:public	signature:()
BaseConvolutionAlgo::GetConvOutSize	base_convolution.h	/^  inline size_t GetConvOutSize(size_t in, size_t kernel, size_t stride, size_t pad, size_t dilation) {$/;"	f	struct:BaseConvolutionAlgo	access:public	signature:(size_t in, size_t kernel, size_t stride, size_t pad, size_t dilation)
BaseConvolutionAlgo::InitWeight	base_convolution.h	/^  virtual void InitWeight(const float *weight) = 0;$/;"	p	struct:BaseConvolutionAlgo	access:public	signature:(const float *weight)
BaseConvolutionAlgo::conv_data_desc_	base_convolution.h	/^  const ConvolutionDataDesc &conv_data_desc_;$/;"	m	struct:BaseConvolutionAlgo	access:protected
BaseConvolutionAlgo::conv_kernel_desc_	base_convolution.h	/^  const ConvolutionKernelDesc &conv_kernel_desc_;$/;"	m	struct:BaseConvolutionAlgo	access:protected
BaseConvolutionAlgo::height_out_	base_convolution.h	/^  size_t height_out_;$/;"	m	struct:BaseConvolutionAlgo	access:protected
BaseConvolutionAlgo::width_out_	base_convolution.h	/^  size_t width_out_;$/;"	m	struct:BaseConvolutionAlgo	access:protected
CMP_EPI16	arch/isa/alu.h	42;"	d
CMP_EPI16	arch/isa/alu.h	54;"	d
COMMON_H	common.h	2;"	d
CONVOLUTION_AVX2	convolution-x64.h	2;"	d
CONV_SHUFFLE_KERNEL_K	arch/config.h	12;"	d
CONV_SHUFFLE_KERNEL_K	arch/config.h	22;"	d
CONV_SHUFFLE_KERNEL_K	arch/config.h	32;"	d
CONV_SHUFFLE_KERNEL_M	arch/config.h	10;"	d
CONV_SHUFFLE_KERNEL_M	arch/config.h	20;"	d
CONV_SHUFFLE_KERNEL_M	arch/config.h	30;"	d
CONV_SHUFFLE_KERNEL_N	arch/config.h	11;"	d
CONV_SHUFFLE_KERNEL_N	arch/config.h	21;"	d
CONV_SHUFFLE_KERNEL_N	arch/config.h	31;"	d
CPU_FEATURE	arch/config.h	/^typedef enum CPU_FEATURE {SSE4_2=0, AVX2_FMA=1, AVX_512=2} CPU_FEATURE;$/;"	g
CPU_FEATURE	arch/config.h	/^typedef enum CPU_FEATURE {SSE4_2=0, AVX2_FMA=1, AVX_512=2} CPU_FEATURE;$/;"	t	typeref:enum:CPU_FEATURE
CVTEPI32_PS	arch/isa/alu.h	82;"	d
CVTSS_PS	arch/isa/alu.h	74;"	d
CVTSS_PS	arch/isa/alu.h	81;"	d
CVTSS_PS_HALF	arch/isa/alu.h	69;"	d
CVTSS_PS_HALF	arch/isa/alu.h	73;"	d
CVTSS_PS_QUARTER	arch/isa/alu.h	70;"	d
CXX	Makefile	/^CXX := g++$/;"	m
ColMajor	ops/ops.h	/^typedef enum ORDER {RowMajor=101, ColMajor=102} ORDER;$/;"	e	enum:ORDER
CommitBlockResult	ops/kernel/shuffle_avx2_sse42_igemm_4xnx8-x64.h	/^static INLINE_SPECIFIER void INLINE_ATTRIBUTE CommitBlockResult(SIMDSITYPE &sum1, SIMDSITYPE &sum2, SIMDSITYPE &sum3, SIMDSITYPE &sum4, void* result[], size_t length, size_t valid_lanes) {$/;"	f	namespace:kernel::igemm4xn	signature:(SIMDSITYPE &sum1, SIMDSITYPE &sum2, SIMDSITYPE &sum3, SIMDSITYPE &sum4, void* result[], size_t length, size_t valid_lanes)
CommitBlockResult	ops/kernel/shuffle_sse42_igemm2x2x16.h	/^static INLINE_SPECIFIER void INLINE_ATTRIBUTE CommitBlockResult(SIMDSITYPE &sum, void* result[], size_t length, size_t valid_lanes) {$/;"	f	namespace:kernel::sse42_igemm2x2x16	signature:(SIMDSITYPE &sum, void* result[], size_t length, size_t valid_lanes)
CommitResult	ops/kernel/shuffle_avx2_igemm4x1x32.h	/^static INLINE_SPECIFIER void INLINE_ATTRIBUTE CommitResult(SIMDSITYPEHALF &accumulator, void* result[], size_t length, size_t valid_lanes) {$/;"	f	namespace:kernel::igemm4x1	signature:(SIMDSITYPEHALF &accumulator, void* result[], size_t length, size_t valid_lanes)
CommitResult	ops/kernel/shuffle_avx2_sse42_igemm_4xnx8-x64.h	/^static INLINE_SPECIFIER void INLINE_ATTRIBUTE CommitResult(SIMDSITYPE &sum1, SIMDSITYPE &sum2, SIMDSITYPE &sum3, SIMDSITYPE &sum4, void* result[], size_t length, size_t valid_lanes) {$/;"	f	namespace:kernel::igemm4xn	signature:(SIMDSITYPE &sum1, SIMDSITYPE &sum2, SIMDSITYPE &sum3, SIMDSITYPE &sum4, void* result[], size_t length, size_t valid_lanes)
CommitResult	ops/kernel/shuffle_avx512_igemm_4x4x64.h	/^static INLINE_SPECIFIER void INLINE_ATTRIBUTE CommitResult(SIMDSITYPE &sum00, SIMDSITYPE &sum01,$/;"	f	namespace:kernel::avx512_igemm4x4x64	signature:(SIMDSITYPE &sum00, SIMDSITYPE &sum01, SIMDSITYPE &sum10, SIMDSITYPE &sum11, SIMDSITYPE &sum20, SIMDSITYPE &sum21, SIMDSITYPE &sum30, SIMDSITYPE &sum31, void* result[], size_t length, size_t valid_lanes)
CommitResult	ops/kernel/shuffle_sse42_igemm2x2x16.h	/^static INLINE_SPECIFIER void INLINE_ATTRIBUTE CommitResult(SIMDSITYPE& sum, void* result[], size_t length, size_t valid_lanes) {$/;"	f	namespace:kernel::sse42_igemm2x2x16	signature:(SIMDSITYPE& sum, void* result[], size_t length, size_t valid_lanes)
ComputeMatrixSumPerRow	common.h	/^void ComputeMatrixSumPerRow(DType *dst, DType *src, size_t m, size_t n) {$/;"	f	signature:(DType *dst, DType *src, size_t m, size_t n)
ConvData	convolution-x64.h	/^  ConvData() : workspace_(NULL) {$/;"	f	struct:ConvData	access:public	signature:()
ConvData	convolution-x64.h	/^  ConvData(size_t batch_size, size_t channels, size_t group, size_t height_in, size_t width_in, SrcType *src):$/;"	f	struct:ConvData	access:public	signature:(size_t batch_size, size_t channels, size_t group, size_t height_in, size_t width_in, SrcType *src)
ConvData	convolution-x64.h	/^struct ConvData {$/;"	s
ConvData::Allocate_Memory	convolution-x64.h	/^  void Allocate_Memory(size_t kernel_h, size_t kernel_w, size_t stride_h, size_t stride_w, size_t dilation_h, size_t dilation_w, size_t pad_h, size_t pad_w, bool transposed) {$/;"	f	struct:ConvData	access:public	signature:(size_t kernel_h, size_t kernel_w, size_t stride_h, size_t stride_w, size_t dilation_h, size_t dilation_w, size_t pad_h, size_t pad_w, bool transposed)
ConvData::ConvData	convolution-x64.h	/^  ConvData() : workspace_(NULL) {$/;"	f	struct:ConvData	access:public	signature:()
ConvData::ConvData	convolution-x64.h	/^  ConvData(size_t batch_size, size_t channels, size_t group, size_t height_in, size_t width_in, SrcType *src):$/;"	f	struct:ConvData	access:public	signature:(size_t batch_size, size_t channels, size_t group, size_t height_in, size_t width_in, SrcType *src)
ConvData::FreeMemory	convolution-x64.h	/^  void FreeMemory() {$/;"	f	struct:ConvData	access:public	signature:()
ConvData::GetFixpointDataShape	convolution-x64.h	/^  void GetFixpointDataShape(size_t kernel_h, size_t kernel_w) {$/;"	f	struct:ConvData	access:public	signature:(size_t kernel_h, size_t kernel_w)
ConvData::Init	convolution-x64.h	/^  void Init(size_t kernel_h, size_t kernel_w, size_t stride_h, size_t stride_w, size_t dilation_h, size_t dilation_w, size_t pad_h, size_t pad_w, float sw_threshold = 255.0f, bool transposed = false) {$/;"	f	struct:ConvData	access:public	signature:(size_t kernel_h, size_t kernel_w, size_t stride_h, size_t stride_w, size_t dilation_h, size_t dilation_w, size_t pad_h, size_t pad_w, float sw_threshold = 255.0f, bool transposed = false)
ConvData::SetLayout	convolution-x64.h	/^  void SetLayout(LAYOUT layout) {$/;"	f	struct:ConvData	access:public	signature:(LAYOUT layout)
ConvData::SetupParameter	convolution-x64.h	/^  void SetupParameter(size_t batch_size, size_t channels, size_t group, size_t height_in, size_t width_in, SrcType *src) {$/;"	f	struct:ConvData	access:public	signature:(size_t batch_size, size_t channels, size_t group, size_t height_in, size_t width_in, SrcType *src)
ConvData::batch_size_	convolution-x64.h	/^  size_t batch_size_;$/;"	m	struct:ConvData	access:public
ConvData::channel_per_group_	convolution-x64.h	/^  size_t channel_per_group_;$/;"	m	struct:ConvData	access:public
ConvData::channels_	convolution-x64.h	/^  size_t channels_;$/;"	m	struct:ConvData	access:public
ConvData::dst_	convolution-x64.h	/^  std::vector<QuantizedTensor<SrcType, DstType>*> dst_;$/;"	m	struct:ConvData	access:public
ConvData::group_	convolution-x64.h	/^  size_t group_;$/;"	m	struct:ConvData	access:public
ConvData::height_in_	convolution-x64.h	/^  size_t height_in_;$/;"	m	struct:ConvData	access:public
ConvData::height_out_	convolution-x64.h	/^  size_t height_out_;$/;"	m	struct:ConvData	access:public
ConvData::layout_	convolution-x64.h	/^  LAYOUT layout_;$/;"	m	struct:ConvData	access:public
ConvData::m_	convolution-x64.h	/^  size_t m_;$/;"	m	struct:ConvData	access:public
ConvData::n_	convolution-x64.h	/^  size_t n_;$/;"	m	struct:ConvData	access:public
ConvData::pad_m_	convolution-x64.h	/^  size_t pad_m_;$/;"	m	struct:ConvData	access:public
ConvData::pad_n_	convolution-x64.h	/^  size_t pad_n_;$/;"	m	struct:ConvData	access:public
ConvData::src_	convolution-x64.h	/^  SrcType *src_;$/;"	m	struct:ConvData	access:public
ConvData::valid_m_	convolution-x64.h	/^  size_t valid_m_;$/;"	m	struct:ConvData	access:public
ConvData::valid_n_	convolution-x64.h	/^  size_t valid_n_;$/;"	m	struct:ConvData	access:public
ConvData::width_in_	convolution-x64.h	/^  size_t width_in_;$/;"	m	struct:ConvData	access:public
ConvData::width_out_	convolution-x64.h	/^  size_t width_out_;$/;"	m	struct:ConvData	access:public
ConvData::workspace_	convolution-x64.h	/^  Tensor<SrcType>* workspace_;$/;"	m	struct:ConvData	access:public
ConvData::~ConvData	convolution-x64.h	/^  ~ConvData() {$/;"	f	struct:ConvData	access:public	signature:()
ConvKernel	convolution-x64.h	/^  ConvKernel() {$/;"	f	struct:ConvKernel	access:public	signature:()
ConvKernel	convolution-x64.h	/^  ConvKernel(LAYOUT layout) {$/;"	f	struct:ConvKernel	access:public	signature:(LAYOUT layout)
ConvKernel	convolution-x64.h	/^  ConvKernel(size_t channel_out, size_t channel_in, size_t group, size_t kernel_h, size_t kernel_w, \\$/;"	f	struct:ConvKernel	access:public	signature:(size_t channel_out, size_t channel_in, size_t group, size_t kernel_h, size_t kernel_w, \ size_t stride_h, size_t stride_w, size_t pad_h, size_t pad_w, SrcType *src, SrcType *bias)
ConvKernel	convolution-x64.h	/^struct ConvKernel {$/;"	s
ConvKernel::Allocate_Memory	convolution-x64.h	/^  void Allocate_Memory() {$/;"	f	struct:ConvKernel	access:public	signature:()
ConvKernel::ConvKernel	convolution-x64.h	/^  ConvKernel() {$/;"	f	struct:ConvKernel	access:public	signature:()
ConvKernel::ConvKernel	convolution-x64.h	/^  ConvKernel(LAYOUT layout) {$/;"	f	struct:ConvKernel	access:public	signature:(LAYOUT layout)
ConvKernel::ConvKernel	convolution-x64.h	/^  ConvKernel(size_t channel_out, size_t channel_in, size_t group, size_t kernel_h, size_t kernel_w, \\$/;"	f	struct:ConvKernel	access:public	signature:(size_t channel_out, size_t channel_in, size_t group, size_t kernel_h, size_t kernel_w, \ size_t stride_h, size_t stride_w, size_t pad_h, size_t pad_w, SrcType *src, SrcType *bias)
ConvKernel::GetFixpointKernelShape	convolution-x64.h	/^  void GetFixpointKernelShape() {$/;"	f	struct:ConvKernel	access:public	signature:()
ConvKernel::Init	convolution-x64.h	/^  void Init(float sw_threshold = 127.0f) {$/;"	f	struct:ConvKernel	access:public	signature:(float sw_threshold = 127.0f)
ConvKernel::QuantizeKernel	convolution-x64.h	/^  void QuantizeKernel(float sw_threshold) {$/;"	f	struct:ConvKernel	access:public	signature:(float sw_threshold)
ConvKernel::SetLayout	convolution-x64.h	/^  void SetLayout(LAYOUT layout) {$/;"	f	struct:ConvKernel	access:public	signature:(LAYOUT layout)
ConvKernel::SetupParameter	convolution-x64.h	/^  void SetupParameter(size_t channel_out, size_t channel_in, size_t group, size_t kernel_h, size_t kernel_w, \\$/;"	f	struct:ConvKernel	access:public	signature:(size_t channel_out, size_t channel_in, size_t group, size_t kernel_h, size_t kernel_w, \ size_t stride_h, size_t stride_w, size_t pad_h, size_t pad_w, SrcType *src, SrcType *bias)
ConvKernel::bias_	convolution-x64.h	/^  SrcType *bias_;$/;"	m	struct:ConvKernel	access:public
ConvKernel::channel_in_	convolution-x64.h	/^  size_t channel_in_;$/;"	m	struct:ConvKernel	access:public
ConvKernel::channel_in_per_group_	convolution-x64.h	/^  size_t channel_in_per_group_;$/;"	m	struct:ConvKernel	access:public
ConvKernel::channel_out_	convolution-x64.h	/^  size_t channel_out_;$/;"	m	struct:ConvKernel	access:public
ConvKernel::channel_out_per_group_	convolution-x64.h	/^  size_t channel_out_per_group_;$/;"	m	struct:ConvKernel	access:public
ConvKernel::dst_	convolution-x64.h	/^  std::vector<QuantizedTensor<SrcType, DstType>*> dst_;$/;"	m	struct:ConvKernel	access:public
ConvKernel::group_	convolution-x64.h	/^  size_t group_;$/;"	m	struct:ConvKernel	access:public
ConvKernel::group_src_	convolution-x64.h	/^  std::vector<Tensor<SrcType>*> group_src_;$/;"	m	struct:ConvKernel	access:public
ConvKernel::kernel_h_	convolution-x64.h	/^  size_t kernel_h_;$/;"	m	struct:ConvKernel	access:public
ConvKernel::kernel_w_	convolution-x64.h	/^  size_t kernel_w_;$/;"	m	struct:ConvKernel	access:public
ConvKernel::layout_	convolution-x64.h	/^  LAYOUT layout_;$/;"	m	struct:ConvKernel	access:public
ConvKernel::m_	convolution-x64.h	/^  size_t m_;$/;"	m	struct:ConvKernel	access:public
ConvKernel::n_	convolution-x64.h	/^  size_t n_;$/;"	m	struct:ConvKernel	access:public
ConvKernel::pad_h_	convolution-x64.h	/^  size_t pad_h_;$/;"	m	struct:ConvKernel	access:public
ConvKernel::pad_m_	convolution-x64.h	/^  size_t pad_m_;$/;"	m	struct:ConvKernel	access:public
ConvKernel::pad_n_	convolution-x64.h	/^  size_t pad_n_;$/;"	m	struct:ConvKernel	access:public
ConvKernel::pad_w_	convolution-x64.h	/^  size_t pad_w_;$/;"	m	struct:ConvKernel	access:public
ConvKernel::src_	convolution-x64.h	/^  SrcType *src_;$/;"	m	struct:ConvKernel	access:public
ConvKernel::stride_h_	convolution-x64.h	/^  size_t stride_h_;$/;"	m	struct:ConvKernel	access:public
ConvKernel::stride_w_	convolution-x64.h	/^  size_t stride_w_;$/;"	m	struct:ConvKernel	access:public
ConvKernel::sumperrow_	convolution-x64.h	/^  Tensor<SrcType> *sumperrow_;$/;"	m	struct:ConvKernel	access:public
ConvKernel::valid_m_	convolution-x64.h	/^  size_t valid_m_;$/;"	m	struct:ConvKernel	access:public
ConvKernel::valid_n_	convolution-x64.h	/^  size_t valid_n_;$/;"	m	struct:ConvKernel	access:public
ConvKernel::~ConvKernel	convolution-x64.h	/^  ~ConvKernel() {$/;"	f	struct:ConvKernel	access:public	signature:()
ConvShuffleGEMM	ops/ops.h	/^void ConvShuffleGEMM(int8_t* pa, uint8_t* pb, float* pc, size_t m, size_t n, size_t k,$/;"	p	namespace:shuffle	signature:(int8_t* pa, uint8_t* pb, float* pc, size_t m, size_t n, size_t k, float* ratio_a, float* ratio_b, float* kernel_sum, float* min_b, float* bias, size_t batch_size, size_t groups, size_t channel_per_group, size_t cur_group, size_t height_out, size_t width_out, float fault_tolerance = 0.5, size_t pad_m = 0, size_t pad_n = 0, bool conv_relu_fusion = false, bool conv_bn_fusion = false, bool conv_bn_relu_fusion = false, bool conv_relu_bn_fusion = false, float *global_mean = NULL, float *mul_variance_coeff = NULL, float *scale = NULL, float *shift = NULL)
ConvShuffleGEMM	ops/shuffle/shuffle_igemm.h	/^void ConvShuffleGEMM(int8_t* pa, uint8_t* pb, float* pc, size_t m, size_t n, size_t k,$/;"	f	namespace:shuffle	signature:(int8_t* pa, uint8_t* pb, float* pc, size_t m, size_t n, size_t k, float* ratio_a, float* ratio_b, float* kernel_sum, float* min_b, float* bias, size_t batch_size, size_t groups, size_t channel_per_group, size_t cur_group, size_t height_out, size_t width_out, float fault_tolerance, size_t pad_m, size_t pad_n, bool conv_relu_fusion, bool conv_bn_fusion, bool conv_bn_relu_fusion, bool conv_relu_bn_fusion, float *global_mean, float *mul_variance_coeff, float *scale, float *shift)
Count	tensor.h	/^  size_t Count() {$/;"	f	struct:Shape	access:public	signature:()
Count	tensor.h	/^  size_t Count() {$/;"	f	struct:Tensor	access:public	signature:()
DequantizeModel	model.h	/^void DequantizeModel(float *dst, int8_t *src, float *src_min, float* src_max, size_t c_out, size_t c_in, size_t kernel_h, size_t kernel_w) {$/;"	f	signature:(float *dst, int8_t *src, float *src_min, float* src_max, size_t c_out, size_t c_in, size_t kernel_h, size_t kernel_w)
EPI16TOEPI32	arch/isa/alu.h	75;"	d
EPI16TOEPI32	arch/isa/alu.h	83;"	d
EPI32TOPS	arch/isa/alu.h	76;"	d
EPI32TOPS_HALF	arch/isa/alu.h	77;"	d
EXTRACT_4XPS	arch/isa/misc.h	51;"	d
EXTRACT_EPI32	arch/isa/misc.h	55;"	d
EXTRACT_EPI32	arch/isa/misc.h	61;"	d
EXTRACT_EPI32_HALF	arch/isa/misc.h	56;"	d
EXTRACT_EPI64	arch/isa/misc.h	57;"	d
EXTRACT_EPI8	arch/isa/misc.h	53;"	d
EXTRACT_PS	arch/isa/misc.h	58;"	d
EXTRACT_PS	arch/isa/misc.h	62;"	d
EXTRACT_PS_HALF	arch/isa/misc.h	59;"	d
EXTRACT_SI128	arch/isa/misc.h	50;"	d
EXTRACT_SI128	arch/isa/misc.h	54;"	d
ExclusiveSize	tensor.h	/^  size_t ExclusiveSize() {$/;"	f	struct:Tensor	access:public	signature:()
Execute	base_convolution.h	/^  virtual void Execute(float *out, const float *data, const float *bias, const ConvolutionDataDesc &conv_data_desc) = 0;$/;"	p	struct:BaseConvolutionAlgo	access:public	signature:(float *out, const float *data, const float *bias, const ConvolutionDataDesc &conv_data_desc)
FCData	fc-x64.h	/^  FCData() {$/;"	f	struct:FCData	access:public	signature:()
FCData	fc-x64.h	/^  FCData(size_t batch_size, size_t channels, SrcType *src):$/;"	f	struct:FCData	access:public	signature:(size_t batch_size, size_t channels, SrcType *src)
FCData	fc-x64.h	/^struct FCData {$/;"	s
FCData::FCData	fc-x64.h	/^  FCData() {$/;"	f	struct:FCData	access:public	signature:()
FCData::FCData	fc-x64.h	/^  FCData(size_t batch_size, size_t channels, SrcType *src):$/;"	f	struct:FCData	access:public	signature:(size_t batch_size, size_t channels, SrcType *src)
FCData::FreeMemory	fc-x64.h	/^  void FreeMemory() {$/;"	f	struct:FCData	access:public	signature:()
FCData::GetPadSizeForFixPointGemm	fc-x64.h	/^  void GetPadSizeForFixPointGemm() {$/;"	f	struct:FCData	access:public	signature:()
FCData::Init	fc-x64.h	/^  void Init(float sw_threshold = 255.0f) {$/;"	f	struct:FCData	access:public	signature:(float sw_threshold = 255.0f)
FCData::SetupParameter	fc-x64.h	/^  void SetupParameter(size_t batch_size, size_t channels, SrcType *src) {$/;"	f	struct:FCData	access:public	signature:(size_t batch_size, size_t channels, SrcType *src)
FCData::batch_size_	fc-x64.h	/^  size_t batch_size_;$/;"	m	struct:FCData	access:public
FCData::channel_per_group_	fc-x64.h	/^  size_t channel_per_group_;$/;"	m	struct:FCData	access:public
FCData::channels_	fc-x64.h	/^  size_t channels_;$/;"	m	struct:FCData	access:public
FCData::dst_	fc-x64.h	/^  QuantizedTensor<SrcType, DstType>* dst_;$/;"	m	struct:FCData	access:public
FCData::group_	fc-x64.h	/^  size_t group_;$/;"	m	struct:FCData	access:public
FCData::layout_	fc-x64.h	/^  LAYOUT layout_;$/;"	m	struct:FCData	access:public
FCData::m_	fc-x64.h	/^  size_t m_;$/;"	m	struct:FCData	access:public
FCData::n_	fc-x64.h	/^  size_t n_;$/;"	m	struct:FCData	access:public
FCData::pad_m_	fc-x64.h	/^  size_t pad_m_;$/;"	m	struct:FCData	access:public
FCData::pad_n_	fc-x64.h	/^  size_t pad_n_;$/;"	m	struct:FCData	access:public
FCData::src_	fc-x64.h	/^  SrcType *src_;$/;"	m	struct:FCData	access:public
FCData::valid_m_	fc-x64.h	/^  size_t valid_m_;$/;"	m	struct:FCData	access:public
FCData::valid_n_	fc-x64.h	/^  size_t valid_n_;$/;"	m	struct:FCData	access:public
FCData::~FCData	fc-x64.h	/^  ~FCData() {$/;"	f	struct:FCData	access:public	signature:()
FCKernel	fc-x64.h	/^  FCKernel() {$/;"	f	struct:FCKernel	access:public	signature:()
FCKernel	fc-x64.h	/^  FCKernel(size_t channel_out, size_t channel_in, SrcType *src, SrcType *bias):$/;"	f	struct:FCKernel	access:public	signature:(size_t channel_out, size_t channel_in, SrcType *src, SrcType *bias)
FCKernel	fc-x64.h	/^struct FCKernel {$/;"	s
FCKernel::FCKernel	fc-x64.h	/^  FCKernel() {$/;"	f	struct:FCKernel	access:public	signature:()
FCKernel::FCKernel	fc-x64.h	/^  FCKernel(size_t channel_out, size_t channel_in, SrcType *src, SrcType *bias):$/;"	f	struct:FCKernel	access:public	signature:(size_t channel_out, size_t channel_in, SrcType *src, SrcType *bias)
FCKernel::GetPadSizeForFixPointGemm	fc-x64.h	/^  void GetPadSizeForFixPointGemm() {$/;"	f	struct:FCKernel	access:public	signature:()
FCKernel::Init	fc-x64.h	/^  void Init(float sw_threshold = 127.0f) {$/;"	f	struct:FCKernel	access:public	signature:(float sw_threshold = 127.0f)
FCKernel::QuantizeKernel	fc-x64.h	/^  void QuantizeKernel(float sw_threshold) {$/;"	f	struct:FCKernel	access:public	signature:(float sw_threshold)
FCKernel::SetupParameter	fc-x64.h	/^  void SetupParameter(size_t channel_out, size_t channel_in, SrcType *src, SrcType *bias) {$/;"	f	struct:FCKernel	access:public	signature:(size_t channel_out, size_t channel_in, SrcType *src, SrcType *bias)
FCKernel::bias_	fc-x64.h	/^  SrcType *bias_;$/;"	m	struct:FCKernel	access:public
FCKernel::channel_in_	fc-x64.h	/^  size_t channel_in_;$/;"	m	struct:FCKernel	access:public
FCKernel::channel_out_	fc-x64.h	/^  size_t channel_out_;$/;"	m	struct:FCKernel	access:public
FCKernel::dst_	fc-x64.h	/^  QuantizedTensor<SrcType, DstType>* dst_;$/;"	m	struct:FCKernel	access:public
FCKernel::m_	fc-x64.h	/^  size_t m_;$/;"	m	struct:FCKernel	access:public
FCKernel::n_	fc-x64.h	/^  size_t n_;$/;"	m	struct:FCKernel	access:public
FCKernel::pad_m_	fc-x64.h	/^  size_t pad_m_;$/;"	m	struct:FCKernel	access:public
FCKernel::pad_n_	fc-x64.h	/^  size_t pad_n_;$/;"	m	struct:FCKernel	access:public
FCKernel::src_	fc-x64.h	/^  SrcType *src_;$/;"	m	struct:FCKernel	access:public
FCKernel::sumperrow_	fc-x64.h	/^  Tensor<SrcType> *sumperrow_;$/;"	m	struct:FCKernel	access:public
FCKernel::valid_m_	fc-x64.h	/^  size_t valid_m_;$/;"	m	struct:FCKernel	access:public
FCKernel::valid_n_	fc-x64.h	/^  size_t valid_n_;$/;"	m	struct:FCKernel	access:public
FCKernel::~FCKernel	fc-x64.h	/^  ~FCKernel() {$/;"	f	struct:FCKernel	access:public	signature:()
FC_SHUFFLE_KERNEL_K	arch/config.h	15;"	d
FC_SHUFFLE_KERNEL_K	arch/config.h	25;"	d
FC_SHUFFLE_KERNEL_K	arch/config.h	35;"	d
FC_SHUFFLE_KERNEL_M	arch/config.h	13;"	d
FC_SHUFFLE_KERNEL_M	arch/config.h	23;"	d
FC_SHUFFLE_KERNEL_M	arch/config.h	33;"	d
FC_SHUFFLE_KERNEL_N	arch/config.h	14;"	d
FC_SHUFFLE_KERNEL_N	arch/config.h	24;"	d
FC_SHUFFLE_KERNEL_N	arch/config.h	34;"	d
FC_X64	fc-x64.h	2;"	d
FMAResult	ops/kernel/shuffle_avx2_sse42_igemm_4xnx8-x64.h	/^static INLINE_SPECIFIER void INLINE_ATTRIBUTE FMAResult(SIMDSITYPE &sum1, SIMDSITYPE &sum2, SIMDSITYPE &sum3, SIMDSITYPE &sum4,$/;"	f	namespace:kernel::igemm4xn	signature:(SIMDSITYPE &sum1, SIMDSITYPE &sum2, SIMDSITYPE &sum3, SIMDSITYPE &sum4, float* result[], size_t length, size_t valid_lanes, size_t i_index, size_t j_index, float* ratio_a, float* ratio_b, float *min_b, float *kernel_sum, float *bias, bool conv_relu_fusion, bool conv_bn_fusion, bool conv_bn_relu_fusion, bool conv_relu_bn_fusion, float *global_mean, float *mul_variance_coeff, float *scale, float *shift)
FMAResult	ops/kernel/shuffle_avx512_igemm_4x4x64.h	/^static INLINE_SPECIFIER void INLINE_ATTRIBUTE FMAResult(SIMDSITYPE &sum00, SIMDSITYPE &sum01,$/;"	f	namespace:kernel::avx512_igemm4x4x64	signature:(SIMDSITYPE &sum00, SIMDSITYPE &sum01, SIMDSITYPE &sum10, SIMDSITYPE &sum11, SIMDSITYPE &sum20, SIMDSITYPE &sum21, SIMDSITYPE &sum30, SIMDSITYPE &sum31, float* result[], size_t length, size_t valid_lanes, size_t i_index, size_t j_index, float* ratio_a, float* ratio_b, float *min_b, float *kernel_sum, float *bias, bool conv_relu_fusion, bool conv_bn_fusion, bool conv_bn_relu_fusion, bool conv_relu_bn_fusion, float *global_mean, float *mul_variance_coeff, float *scale, float *shift)
FMAResult	ops/kernel/shuffle_sse42_igemm2x2x16.h	/^static INLINE_SPECIFIER void INLINE_ATTRIBUTE FMAResult(SIMDSITYPE &sum, float* result[], size_t length, size_t valid_lanes, size_t i_index, size_t j_index,$/;"	f	namespace:kernel::sse42_igemm2x2x16	signature:(SIMDSITYPE &sum, float* result[], size_t length, size_t valid_lanes, size_t i_index, size_t j_index, float* ratio_a, float* ratio_b, float *min_b, float *kernel_sum, float *bias, bool conv_relu_fusion, bool conv_bn_fusion, bool conv_bn_relu_fusion, bool conv_relu_bn_fusion, float *global_mean, float *mul_variance_coeff, float *scale, float *shift)
FMA_PS	arch/isa/mul.h	12;"	d
FMA_PS	arch/isa/mul.h	17;"	d
FMA_PS	arch/isa/mul.h	9;"	d
FMA_PS_HALF	arch/isa/mul.h	14;"	d
FPTensor	nn-fixpoint.h	/^typedef struct FPTensorDesc FPTensor;$/;"	t	typeref:struct:FPTensorDesc
FPTensorDesc	nn-fixpoint.h	/^struct FPTensorDesc {$/;"	s
FPTensorDesc::data	nn-fixpoint.h	/^  void* data;$/;"	m	struct:FPTensorDesc	access:public
FPTensorDesc::dim	nn-fixpoint.h	/^  size_t dim;$/;"	m	struct:FPTensorDesc	access:public
FPTensorDesc::shape	nn-fixpoint.h	/^  size_t shape[4];$/;"	m	struct:FPTensorDesc	access:public
FPTensorDesc::workspace_size	nn-fixpoint.h	/^  size_t workspace_size;$/;"	m	struct:FPTensorDesc	access:public
FindMinMaxAlongChannel	ops/im2col_common.h	/^INLINE_SPECIFIER void INLINE_ATTRIBUTE FindMinMaxAlongChannel(DType *src, size_t groups, DType* min[], DType *max[], size_t batch_size, size_t channels_per_group, size_t h_w, DType *transposed_data) {$/;"	f	signature:(DType *src, size_t groups, DType* min[], DType *max[], size_t batch_size, size_t channels_per_group, size_t h_w, DType *transposed_data)
FindMinMaxAlongChannelThenTranspose	ops/im2col_common.h	/^INLINE_SPECIFIER void INLINE_ATTRIBUTE FindMinMaxAlongChannelThenTranspose(DType* &src, size_t groups, DType* min[], DType *max[], size_t batch_size, size_t channels_per_group, size_t h_w, DType *transposed_data) {$/;"	f	signature:(DType* &src, size_t groups, DType* min[], DType *max[], size_t batch_size, size_t channels_per_group, size_t h_w, DType *transposed_data)
FindMinMaxValue	ops/find_extreme.h	/^void FindMinMaxValue(const DType *p, size_t length, DType &min, DType &max) {$/;"	f	signature:(const DType *p, size_t length, DType &min, DType &max)
FindMinMaxValue	ops/find_extreme.h	/^void FindMinMaxValue<float>(const float *p, size_t length, float &min, float &max) {$/;"	f	signature:(const float *p, size_t length, float &min, float &max)
FindMinMaxValue	ops/ops.h	/^void FindMinMaxValue(const DType *p, size_t length, DType &min, DType &max);$/;"	p	signature:(const DType *p, size_t length, DType &min, DType &max)
FixConvDataDescInit	c_api.cc	/^void FixConvDataDescInit(FixTensor *fix_tensor, size_t c_in, size_t kernel_h, size_t kernel_w, size_t stride_h, size_t stride_w, size_t pad_h, size_t pad_w, size_t dilation_h, size_t dilation_w, size_t batch_size, size_t h_in, size_t w_in) {$/;"	f	signature:(FixTensor *fix_tensor, size_t c_in, size_t kernel_h, size_t kernel_w, size_t stride_h, size_t stride_w, size_t pad_h, size_t pad_w, size_t dilation_h, size_t dilation_w, size_t batch_size, size_t h_in, size_t w_in)
FixConvDataDescInit	c_api_rt.cc	/^void FixConvDataDescInit(FixTensor *fix_tensor, size_t c_in, size_t kernel_h, size_t kernel_w, size_t stride_h, size_t stride_w, size_t pad_h, size_t pad_w, size_t dilation_h, size_t dilation_w, size_t batch_size, size_t h_in, size_t w_in) {$/;"	f	signature:(FixTensor *fix_tensor, size_t c_in, size_t kernel_h, size_t kernel_w, size_t stride_h, size_t stride_w, size_t pad_h, size_t pad_w, size_t dilation_h, size_t dilation_w, size_t batch_size, size_t h_in, size_t w_in)
FixConvDataDescInit	nn-fixpoint.h	/^  API_PREFIX void FixConvDataDescInit(FixTensor *fix_tensor, size_t c_in, size_t kernel_h, size_t kernel_w, \\$/;"	p	signature:(FixTensor *fix_tensor, size_t c_in, size_t kernel_h, size_t kernel_w, \ size_t stride_h, size_t stride_w, size_t pad_h, size_t pad_w, size_t dilation_h, size_t dilation_w, \ size_t batch_size, size_t h_in, size_t w_in)
FixConvDataDescInitRT	c_api_rt.cc	/^void (*FixConvDataDescInitRT)(FixTensor *fix_tensor, size_t c_in, size_t kernel_h, size_t kernel_w, size_t stride_h, size_t stride_w, size_t pad_h, size_t pad_w, size_t dilation_h, size_t dilation_w, size_t batch_size, size_t h_in, size_t w_in);$/;"	v
FixConvDataInit	c_api.cc	/^void FixConvDataInit(FixTensor *fix_tensor, float *src, size_t c_in, size_t kernel_h, size_t kernel_w, size_t stride_h, size_t stride_w, size_t pad_h, size_t pad_w, size_t dilation_h, size_t dilation_w, size_t batch_size, size_t h_in, size_t w_in, float threshold, LAYOUT layout) {$/;"	f	signature:(FixTensor *fix_tensor, float *src, size_t c_in, size_t kernel_h, size_t kernel_w, size_t stride_h, size_t stride_w, size_t pad_h, size_t pad_w, size_t dilation_h, size_t dilation_w, size_t batch_size, size_t h_in, size_t w_in, float threshold, LAYOUT layout)
FixConvDataInit	c_api_rt.cc	/^void FixConvDataInit(FixTensor *fix_tensor, float *src, size_t c_in, size_t kernel_h, size_t kernel_w, size_t stride_h, size_t stride_w, size_t pad_h, size_t pad_w, size_t dilation_h, size_t dilation_w, size_t batch_size, size_t h_in, size_t w_in, float threshold, LAYOUT layout) {$/;"	f	signature:(FixTensor *fix_tensor, float *src, size_t c_in, size_t kernel_h, size_t kernel_w, size_t stride_h, size_t stride_w, size_t pad_h, size_t pad_w, size_t dilation_h, size_t dilation_w, size_t batch_size, size_t h_in, size_t w_in, float threshold, LAYOUT layout)
FixConvDataInit	nn-fixpoint.h	/^  API_PREFIX void FixConvDataInit(FixTensor *fix_tensor, float *src, size_t c_in, size_t kernel_h, size_t kernel_w, \\$/;"	p	signature:(FixTensor *fix_tensor, float *src, size_t c_in, size_t kernel_h, size_t kernel_w, \ size_t stride_h, size_t stride_w, size_t pad_h, size_t pad_w, size_t dilation_h, size_t dilation_w, \ size_t batch_size, size_t h_in, size_t w_in, float threshold, LAYOUT layout)
FixConvDataInitRT	c_api_rt.cc	/^void (*FixConvDataInitRT)(FixTensor *fix_tensor, float *src, size_t c_in, size_t kernel_h, size_t kernel_w, size_t stride_h, size_t stride_w, size_t pad_h, size_t pad_w, size_t dilation_h, size_t dilation_w, size_t batch_size, size_t h_in, size_t w_in, float threshold, LAYOUT layout);$/;"	v
FixConvKernelDescInit	c_api.cc	/^void FixConvKernelDescInit(FixTensor *fix_tensor, size_t c_out, size_t c_in, size_t kernel_h, size_t kernel_w) {$/;"	f	signature:(FixTensor *fix_tensor, size_t c_out, size_t c_in, size_t kernel_h, size_t kernel_w)
FixConvKernelDescInit	c_api_rt.cc	/^void FixConvKernelDescInit(FixTensor *fix_tensor, size_t c_out, size_t c_in, size_t kernel_h, size_t kernel_w) {$/;"	f	signature:(FixTensor *fix_tensor, size_t c_out, size_t c_in, size_t kernel_h, size_t kernel_w)
FixConvKernelDescInit	nn-fixpoint.h	/^  API_PREFIX void FixConvKernelDescInit(FixTensor *fix_tensor, size_t c_out, size_t c_in, size_t kernel_h, size_t kernel_w);$/;"	p	signature:(FixTensor *fix_tensor, size_t c_out, size_t c_in, size_t kernel_h, size_t kernel_w)
FixConvKernelDescInitRT	c_api_rt.cc	/^void (*FixConvKernelDescInitRT)(FixTensor *fix_tensor, size_t c_out, size_t c_in, size_t kernel_h, size_t kernel_w);$/;"	v
FixConvKernelInit	c_api.cc	/^void FixConvKernelInit(FixTensor *fix_tensor, float *src, size_t c_out, size_t c_in, size_t kernel_h, size_t kernel_w, float threshold, LAYOUT layout) {$/;"	f	signature:(FixTensor *fix_tensor, float *src, size_t c_out, size_t c_in, size_t kernel_h, size_t kernel_w, float threshold, LAYOUT layout)
FixConvKernelInit	c_api_rt.cc	/^void FixConvKernelInit(FixTensor *fix_tensor, float *src, size_t c_out, size_t c_in, size_t kernel_h, size_t kernel_w, float threshold, LAYOUT layout) {$/;"	f	signature:(FixTensor *fix_tensor, float *src, size_t c_out, size_t c_in, size_t kernel_h, size_t kernel_w, float threshold, LAYOUT layout)
FixConvKernelInit	nn-fixpoint.h	/^  API_PREFIX void FixConvKernelInit(FixTensor *fix_tensor, float *src, size_t c_out, size_t c_in, size_t kernel_h, size_t kernel_w, float threshold, LAYOUT layout);$/;"	p	signature:(FixTensor *fix_tensor, float *src, size_t c_out, size_t c_in, size_t kernel_h, size_t kernel_w, float threshold, LAYOUT layout)
FixConvKernelInitRT	c_api_rt.cc	/^void (*FixConvKernelInitRT)(FixTensor *fix_tensor, float *src, size_t c_out, size_t c_in, size_t kernel_h, size_t kernel_w, float threshold, LAYOUT layout);$/;"	v
FixConvKernelLoadFromModel	c_api.cc	/^void FixConvKernelLoadFromModel(FixTensor *fix_tensor, int8_t *src, float *min, float* max, size_t c_out, size_t c_in, size_t kernel_h, size_t kernel_w, float threshold, LAYOUT layout) {$/;"	f	signature:(FixTensor *fix_tensor, int8_t *src, float *min, float* max, size_t c_out, size_t c_in, size_t kernel_h, size_t kernel_w, float threshold, LAYOUT layout)
FixConvKernelLoadFromModel	c_api_rt.cc	/^void FixConvKernelLoadFromModel(FixTensor *fix_tensor, int8_t *src, float *min, float* max, size_t c_out, size_t c_in, size_t kernel_h, size_t kernel_w, float threshold, LAYOUT layout) {$/;"	f	signature:(FixTensor *fix_tensor, int8_t *src, float *min, float* max, size_t c_out, size_t c_in, size_t kernel_h, size_t kernel_w, float threshold, LAYOUT layout)
FixConvKernelLoadFromModel	nn-fixpoint.h	/^  API_PREFIX void FixConvKernelLoadFromModel(FixTensor *fix_tensor, int8_t *src, float *min, float* max, size_t c_out, size_t c_in, size_t kernel_h, size_t kernel_w, float threshold, LAYOUT layout);$/;"	p	signature:(FixTensor *fix_tensor, int8_t *src, float *min, float* max, size_t c_out, size_t c_in, size_t kernel_h, size_t kernel_w, float threshold, LAYOUT layout)
FixConvKernelLoadFromModelRT	c_api_rt.cc	/^void (*FixConvKernelLoadFromModelRT)(FixTensor *fix_tensor, int8_t *src, float *min, float* max, size_t c_out, size_t c_in, size_t kernel_h, size_t kernel_w, float threshold, LAYOUT layout);$/;"	v
FixConvKernelSumDescInit	c_api.cc	/^void FixConvKernelSumDescInit(FPTensor *fp_tensor, size_t c_out) {$/;"	f	signature:(FPTensor *fp_tensor, size_t c_out)
FixConvKernelSumDescInit	c_api_rt.cc	/^void FixConvKernelSumDescInit(FPTensor *fp_tensor, size_t c_out) {$/;"	f	signature:(FPTensor *fp_tensor, size_t c_out)
FixConvKernelSumDescInit	nn-fixpoint.h	/^  API_PREFIX void FixConvKernelSumDescInit(FPTensor *fp_tensor, size_t c_out);$/;"	p	signature:(FPTensor *fp_tensor, size_t c_out)
FixConvKernelSumDescInitRT	c_api_rt.cc	/^void (*FixConvKernelSumDescInitRT)(FPTensor *fp_tensor, size_t c_out);$/;"	v
FixConvKernelSumInit	c_api.cc	/^void FixConvKernelSumInit(FPTensor *fp_tensor, float *src, size_t n, size_t c, size_t h, size_t w) {$/;"	f	signature:(FPTensor *fp_tensor, float *src, size_t n, size_t c, size_t h, size_t w)
FixConvKernelSumInit	c_api_rt.cc	/^void FixConvKernelSumInit(FPTensor *fp_tensor, float *src, size_t n, size_t c, size_t h, size_t w) {$/;"	f	signature:(FPTensor *fp_tensor, float *src, size_t n, size_t c, size_t h, size_t w)
FixConvKernelSumInit	nn-fixpoint.h	/^  API_PREFIX void FixConvKernelSumInit(FPTensor *fp_tensor, float *src, size_t n, size_t c, size_t h, size_t w);$/;"	p	signature:(FPTensor *fp_tensor, float *src, size_t n, size_t c, size_t h, size_t w)
FixConvKernelSumInitRT	c_api_rt.cc	/^void (*FixConvKernelSumInitRT)(FPTensor *fp_tensor, float *src, size_t n, size_t c, size_t h, size_t w);$/;"	v
FixConvOp	nn-fixpoint.h	/^typedef struct FixConvOp FixConvOp;$/;"	t	typeref:struct:FixConvOp
FixConvOpCreate	c_api.cc	/^FixConvOpDesc* FixConvOpCreate(LAYOUT layout) {$/;"	f	signature:(LAYOUT layout)
FixConvOpCreate	c_api_rt.cc	/^FixConvOpDesc* FixConvOpCreate(LAYOUT layout) {$/;"	f	signature:(LAYOUT layout)
FixConvOpCreate	nn-fixpoint.h	/^  API_PREFIX FixConvOpDesc* FixConvOpCreate(LAYOUT layout);$/;"	p	signature:(LAYOUT layout)
FixConvOpCreateRT	c_api_rt.cc	/^FixConvOpDesc* (*FixConvOpCreateRT)(LAYOUT layout);$/;"	v
FixConvOpDesc	nn-fixpoint.h	/^struct FixConvOpDesc {$/;"	s
FixConvOpDesc	nn-fixpoint.h	/^typedef struct FixConvOpDesc FixConvOpDesc;$/;"	t	typeref:struct:FixConvOpDesc
FixConvOpDesc::layout	nn-fixpoint.h	/^  LAYOUT layout;$/;"	m	struct:FixConvOpDesc	access:public
FixConvOpDesc::op	nn-fixpoint.h	/^  FixConvOp* op;$/;"	m	struct:FixConvOpDesc	access:public
FixConvOpExecute	c_api.cc	/^void FixConvOpExecute(FixConvOpDesc* p, float fault_tolerance) {$/;"	f	signature:(FixConvOpDesc* p, float fault_tolerance)
FixConvOpExecute	c_api_rt.cc	/^void FixConvOpExecute(FixConvOpDesc* p, float fault_tolerance) {$/;"	f	signature:(FixConvOpDesc* p, float fault_tolerance)
FixConvOpExecute	nn-fixpoint.h	/^  API_PREFIX void FixConvOpExecute(FixConvOpDesc* p, float fault_tolerance);$/;"	p	signature:(FixConvOpDesc* p, float fault_tolerance)
FixConvOpExecuteRT	c_api_rt.cc	/^void (*FixConvOpExecuteRT)(FixConvOpDesc* p, float fault_tolerance);$/;"	v
FixConvOpExecuteToDst	c_api.cc	/^void FixConvOpExecuteToDst(FixConvOpDesc* p, float* dst, float fault_tolerance) {$/;"	f	signature:(FixConvOpDesc* p, float* dst, float fault_tolerance)
FixConvOpExecuteToDst	c_api_rt.cc	/^void FixConvOpExecuteToDst(FixConvOpDesc* p, float* dst, float fault_tolerance) {$/;"	f	signature:(FixConvOpDesc* p, float* dst, float fault_tolerance)
FixConvOpExecuteToDst	nn-fixpoint.h	/^  API_PREFIX void FixConvOpExecuteToDst(FixConvOpDesc* p, float *dst, float fault_tolerance);$/;"	p	signature:(FixConvOpDesc* p, float *dst, float fault_tolerance)
FixConvOpExecuteToDstRT	c_api_rt.cc	/^void (*FixConvOpExecuteToDstRT)(FixConvOpDesc* p, float *dst, float fault_tolerance);$/;"	v
FixConvOpFree	c_api.cc	/^void FixConvOpFree(FixConvOpDesc* p) {$/;"	f	signature:(FixConvOpDesc* p)
FixConvOpFree	c_api_rt.cc	/^void FixConvOpFree(FixConvOpDesc* p) {$/;"	f	signature:(FixConvOpDesc* p)
FixConvOpFree	nn-fixpoint.h	/^  API_PREFIX void FixConvOpFree(FixConvOpDesc* p);$/;"	p	signature:(FixConvOpDesc* p)
FixConvOpFreeRT	c_api_rt.cc	/^void (*FixConvOpFreeRT)(FixConvOpDesc* p);$/;"	v
FixConvOpQuantizeData	c_api.cc	/^void FixConvOpQuantizeData(FixConvOpDesc* p, size_t batch_size, size_t channels, size_t height_in, size_t width_in, float *src, float sw_threshold) {$/;"	f	signature:(FixConvOpDesc* p, size_t batch_size, size_t channels, size_t height_in, size_t width_in, float *src, float sw_threshold)
FixConvOpQuantizeData	c_api_rt.cc	/^void FixConvOpQuantizeData(FixConvOpDesc* p, size_t batch_size, size_t channels, size_t height_in, size_t width_in, float *src, float sw_threshold) {$/;"	f	signature:(FixConvOpDesc* p, size_t batch_size, size_t channels, size_t height_in, size_t width_in, float *src, float sw_threshold)
FixConvOpQuantizeData	nn-fixpoint.h	/^  API_PREFIX void FixConvOpQuantizeData(FixConvOpDesc* p, size_t batch_size, size_t channels, size_t height_in, size_t width_in, float *src, float sw_threshold);$/;"	p	signature:(FixConvOpDesc* p, size_t batch_size, size_t channels, size_t height_in, size_t width_in, float *src, float sw_threshold)
FixConvOpQuantizeDataRT	c_api_rt.cc	/^void (*FixConvOpQuantizeDataRT)(FixConvOpDesc* p, size_t batch_size, size_t channels, size_t height_in, size_t width_in, float *src, float sw_threshold);$/;"	v
FixConvOpQuantizeKernel	c_api.cc	/^void FixConvOpQuantizeKernel(FixConvOpDesc* p, float threshold) {$/;"	f	signature:(FixConvOpDesc* p, float threshold)
FixConvOpQuantizeKernel	c_api_rt.cc	/^void FixConvOpQuantizeKernel(FixConvOpDesc* p, float threshold) {$/;"	f	signature:(FixConvOpDesc* p, float threshold)
FixConvOpQuantizeKernel	nn-fixpoint.h	/^  API_PREFIX void FixConvOpQuantizeKernel(FixConvOpDesc* p, float threshold);$/;"	p	signature:(FixConvOpDesc* p, float threshold)
FixConvOpQuantizeKernelRT	c_api_rt.cc	/^void (*FixConvOpQuantizeKernelRT)(FixConvOpDesc* p, float threshold);$/;"	v
FixConvOpSetupConvParameter	c_api.cc	/^void FixConvOpSetupConvParameter(FixConvOpDesc* p, size_t channel_out, size_t channel_in, size_t group, size_t kernel_h, size_t kernel_w, \\$/;"	f	signature:(FixConvOpDesc* p, size_t channel_out, size_t channel_in, size_t group, size_t kernel_h, size_t kernel_w, \ size_t stride_h, size_t stride_w, size_t dialation_h, size_t dialation_w, size_t pad_h, size_t pad_w, float *src, float *bias)
FixConvOpSetupConvParameter	c_api_rt.cc	/^void FixConvOpSetupConvParameter(FixConvOpDesc* p, size_t channel_out, size_t channel_in, size_t group, size_t kernel_h, size_t kernel_w, \\$/;"	f	signature:(FixConvOpDesc* p, size_t channel_out, size_t channel_in, size_t group, size_t kernel_h, size_t kernel_w, \ size_t stride_h, size_t stride_w, size_t dialation_h, size_t dialation_w, size_t pad_h, size_t pad_w, float *src, float *bias)
FixConvOpSetupConvParameter	nn-fixpoint.h	/^  API_PREFIX void FixConvOpSetupConvParameter(FixConvOpDesc* p, size_t channel_out, size_t channel_in, size_t group, size_t kernel_h, size_t kernel_w, \\$/;"	p	signature:(FixConvOpDesc* p, size_t channel_out, size_t channel_in, size_t group, size_t kernel_h, size_t kernel_w, \ size_t stride_h, size_t stride_w, size_t dilation_h, size_t dilation_w, size_t pad_h, size_t pad_w, float *src, float *bias)
FixConvOpSetupConvParameterRT	c_api_rt.cc	/^void (*FixConvOpSetupConvParameterRT)(FixConvOpDesc* p, size_t channel_out, size_t channel_in, size_t group, size_t kernel_h, size_t kernel_w, \\$/;"	v
FixConvOpSetupTargetBuffer	c_api.cc	/^void FixConvOpSetupTargetBuffer(FixConvOpDesc* p, float* dst) {$/;"	f	signature:(FixConvOpDesc* p, float* dst)
FixConvOpSetupTargetBuffer	c_api_rt.cc	/^void FixConvOpSetupTargetBuffer(FixConvOpDesc* p, float* dst) {$/;"	f	signature:(FixConvOpDesc* p, float* dst)
FixConvOpSetupTargetBuffer	nn-fixpoint.h	/^  API_PREFIX void FixConvOpSetupTargetBuffer(FixConvOpDesc* p, float* dst);$/;"	p	signature:(FixConvOpDesc* p, float* dst)
FixConvOpSetupTargetBufferRT	c_api_rt.cc	/^void (*FixConvOpSetupTargetBufferRT)(FixConvOpDesc* p, float* dst);$/;"	v
FixFCDataDescInit	c_api.cc	/^void FixFCDataDescInit(FixTensor *fix_tensor, size_t batch_size, size_t channel) {$/;"	f	signature:(FixTensor *fix_tensor, size_t batch_size, size_t channel)
FixFCDataDescInit	c_api_rt.cc	/^void FixFCDataDescInit(FixTensor *fix_tensor, size_t batch_size, size_t channel) {$/;"	f	signature:(FixTensor *fix_tensor, size_t batch_size, size_t channel)
FixFCDataDescInit	nn-fixpoint.h	/^  API_PREFIX void FixFCDataDescInit(FixTensor *fix_tensor, size_t batch_size, size_t channel);$/;"	p	signature:(FixTensor *fix_tensor, size_t batch_size, size_t channel)
FixFCDataDescInitRT	c_api_rt.cc	/^void (*FixFCDataDescInitRT)(FixTensor *fix_tensor, size_t batch_size, size_t channel);$/;"	v
FixFCDataInit	c_api.cc	/^void FixFCDataInit(FixTensor *fix_tensor, float *src, size_t batch_size, size_t channel, float threshold, LAYOUT layout) {$/;"	f	signature:(FixTensor *fix_tensor, float *src, size_t batch_size, size_t channel, float threshold, LAYOUT layout)
FixFCDataInit	c_api_rt.cc	/^void FixFCDataInit(FixTensor *fix_tensor, float *src, size_t batch_size, size_t channel, float threshold, LAYOUT layout) {$/;"	f	signature:(FixTensor *fix_tensor, float *src, size_t batch_size, size_t channel, float threshold, LAYOUT layout)
FixFCDataInit	nn-fixpoint.h	/^  API_PREFIX void FixFCDataInit(FixTensor *fix_tensor, float *src, size_t batch_size, size_t channel, float threshold, LAYOUT layout);$/;"	p	signature:(FixTensor *fix_tensor, float *src, size_t batch_size, size_t channel, float threshold, LAYOUT layout)
FixFCDataInitRT	c_api_rt.cc	/^void (*FixFCDataInitRT)(FixTensor *fix_tensor, float *src, size_t batch_size, size_t channel, float threshold, LAYOUT layout);$/;"	v
FixFCKernelDescInit	c_api.cc	/^void FixFCKernelDescInit(FixTensor *fix_tensor, size_t c_out, size_t c_in) {$/;"	f	signature:(FixTensor *fix_tensor, size_t c_out, size_t c_in)
FixFCKernelDescInit	c_api_rt.cc	/^void FixFCKernelDescInit(FixTensor *fix_tensor, size_t c_out, size_t c_in) {$/;"	f	signature:(FixTensor *fix_tensor, size_t c_out, size_t c_in)
FixFCKernelDescInit	nn-fixpoint.h	/^  API_PREFIX void FixFCKernelDescInit(FixTensor *fix_tensor, size_t c_out, size_t c_in);$/;"	p	signature:(FixTensor *fix_tensor, size_t c_out, size_t c_in)
FixFCKernelDescInitRT	c_api_rt.cc	/^void (*FixFCKernelDescInitRT)(FixTensor *fix_tensor, size_t c_out, size_t c_in);$/;"	v
FixFCKernelInit	c_api.cc	/^void FixFCKernelInit(FixTensor *fix_tensor, float *src, size_t c_out, size_t c_in, float threshold, LAYOUT layout) {$/;"	f	signature:(FixTensor *fix_tensor, float *src, size_t c_out, size_t c_in, float threshold, LAYOUT layout)
FixFCKernelInit	c_api_rt.cc	/^void FixFCKernelInit(FixTensor *fix_tensor, float *src, size_t c_out, size_t c_in, float threshold, LAYOUT layout) {$/;"	f	signature:(FixTensor *fix_tensor, float *src, size_t c_out, size_t c_in, float threshold, LAYOUT layout)
FixFCKernelInit	nn-fixpoint.h	/^  API_PREFIX void FixFCKernelInit(FixTensor *fix_tensor, float *src, size_t c_out, size_t c_in, float threshold, LAYOUT layout);$/;"	p	signature:(FixTensor *fix_tensor, float *src, size_t c_out, size_t c_in, float threshold, LAYOUT layout)
FixFCKernelInitRT	c_api_rt.cc	/^void (*FixFCKernelInitRT)(FixTensor *fix_tensor, float *src, size_t c_out, size_t c_in, float threshold, LAYOUT layout);$/;"	v
FixFCKernelLoadFromModel	c_api.cc	/^void FixFCKernelLoadFromModel(FixTensor *fix_tensor, int8_t *src, float *min, float* max, size_t c_out, size_t c_in, float threshold, LAYOUT layout) {$/;"	f	signature:(FixTensor *fix_tensor, int8_t *src, float *min, float* max, size_t c_out, size_t c_in, float threshold, LAYOUT layout)
FixFCKernelLoadFromModel	c_api_rt.cc	/^void FixFCKernelLoadFromModel(FixTensor *fix_tensor, int8_t *src, float *min, float* max, size_t c_out, size_t c_in, float threshold, LAYOUT layout) {$/;"	f	signature:(FixTensor *fix_tensor, int8_t *src, float *min, float* max, size_t c_out, size_t c_in, float threshold, LAYOUT layout)
FixFCKernelLoadFromModel	nn-fixpoint.h	/^  API_PREFIX void FixFCKernelLoadFromModel(FixTensor *fix_tensor, int8_t *src, float *min, float* max, size_t c_out, size_t c_in, float threshold, LAYOUT layout);$/;"	p	signature:(FixTensor *fix_tensor, int8_t *src, float *min, float* max, size_t c_out, size_t c_in, float threshold, LAYOUT layout)
FixFCKernelLoadFromModelRT	c_api_rt.cc	/^void (*FixFCKernelLoadFromModelRT)(FixTensor *fix_tensor, int8_t *src, float *min, float* max, size_t c_out, size_t c_in, float threshold, LAYOUT layout);$/;"	v
FixFCKernelSumDescInit	c_api.cc	/^void FixFCKernelSumDescInit(FPTensor *fp_tensor, size_t c_out) {$/;"	f	signature:(FPTensor *fp_tensor, size_t c_out)
FixFCKernelSumDescInit	c_api_rt.cc	/^void FixFCKernelSumDescInit(FPTensor *fp_tensor, size_t c_out) {$/;"	f	signature:(FPTensor *fp_tensor, size_t c_out)
FixFCKernelSumDescInit	nn-fixpoint.h	/^  API_PREFIX void FixFCKernelSumDescInit(FPTensor *fp_tensor, size_t c_out);$/;"	p	signature:(FPTensor *fp_tensor, size_t c_out)
FixFCKernelSumDescInitRT	c_api_rt.cc	/^void (*FixFCKernelSumDescInitRT)(FPTensor *fp_tensor, size_t c_out);$/;"	v
FixFCKernelSumInit	c_api.cc	/^void FixFCKernelSumInit(FPTensor *fp_tensor, float *src, size_t c_out, size_t c_in) {$/;"	f	signature:(FPTensor *fp_tensor, float *src, size_t c_out, size_t c_in)
FixFCKernelSumInit	c_api_rt.cc	/^void FixFCKernelSumInit(FPTensor *fp_tensor, float *src, size_t c_out, size_t c_in) {$/;"	f	signature:(FPTensor *fp_tensor, float *src, size_t c_out, size_t c_in)
FixFCKernelSumInit	nn-fixpoint.h	/^  API_PREFIX void FixFCKernelSumInit(FPTensor *fp_tensor, float *src, size_t c_out, size_t c_in);$/;"	p	signature:(FPTensor *fp_tensor, float *src, size_t c_out, size_t c_in)
FixFCKernelSumInitRT	c_api_rt.cc	/^void (*FixFCKernelSumInitRT)(FPTensor *fp_tensor, float *src, size_t c_out, size_t c_in);$/;"	v
FixFCOp	nn-fixpoint.h	/^typedef struct FixFCOp FixFCOp;$/;"	t	typeref:struct:FixFCOp
FixFCOpCreate	c_api.cc	/^FixFCOpDesc* FixFCOpCreate(LAYOUT layout) {$/;"	f	signature:(LAYOUT layout)
FixFCOpCreate	c_api_rt.cc	/^FixFCOpDesc* FixFCOpCreate(LAYOUT layout) {$/;"	f	signature:(LAYOUT layout)
FixFCOpCreate	nn-fixpoint.h	/^  API_PREFIX FixFCOpDesc* FixFCOpCreate(LAYOUT layout);$/;"	p	signature:(LAYOUT layout)
FixFCOpCreateRT	c_api_rt.cc	/^FixFCOpDesc* (*FixFCOpCreateRT)(LAYOUT layout);$/;"	v
FixFCOpDesc	nn-fixpoint.h	/^struct FixFCOpDesc {$/;"	s
FixFCOpDesc	nn-fixpoint.h	/^typedef struct FixFCOpDesc FixFCOpDesc;$/;"	t	typeref:struct:FixFCOpDesc
FixFCOpDesc::layout	nn-fixpoint.h	/^  LAYOUT layout;$/;"	m	struct:FixFCOpDesc	access:public
FixFCOpDesc::op	nn-fixpoint.h	/^  FixFCOp* op;$/;"	m	struct:FixFCOpDesc	access:public
FixFCOpExecute	c_api.cc	/^void FixFCOpExecute(FixFCOpDesc* p, float fault_tolerance) {$/;"	f	signature:(FixFCOpDesc* p, float fault_tolerance)
FixFCOpExecute	c_api_rt.cc	/^void FixFCOpExecute(FixFCOpDesc* p, float fault_tolerance) {$/;"	f	signature:(FixFCOpDesc* p, float fault_tolerance)
FixFCOpExecute	nn-fixpoint.h	/^  API_PREFIX void FixFCOpExecute(FixFCOpDesc* p, float fault_tolerance);$/;"	p	signature:(FixFCOpDesc* p, float fault_tolerance)
FixFCOpExecuteRT	c_api_rt.cc	/^void (*FixFCOpExecuteRT)(FixFCOpDesc* p, float fault_tolerance);$/;"	v
FixFCOpExecuteToDst	c_api.cc	/^void FixFCOpExecuteToDst(FixFCOpDesc* p, float* dst, float fault_tolerance) {$/;"	f	signature:(FixFCOpDesc* p, float* dst, float fault_tolerance)
FixFCOpExecuteToDst	c_api_rt.cc	/^void FixFCOpExecuteToDst(FixFCOpDesc* p, float* dst, float fault_tolerance) {$/;"	f	signature:(FixFCOpDesc* p, float* dst, float fault_tolerance)
FixFCOpExecuteToDst	nn-fixpoint.h	/^  API_PREFIX void FixFCOpExecuteToDst(FixFCOpDesc* p, float *dst, float fault_tolerance);$/;"	p	signature:(FixFCOpDesc* p, float *dst, float fault_tolerance)
FixFCOpExecuteToDstRT	c_api_rt.cc	/^void (*FixFCOpExecuteToDstRT)(FixFCOpDesc* p, float *dst, float fault_tolerance);$/;"	v
FixFCOpFree	c_api.cc	/^void FixFCOpFree(FixFCOpDesc* p) {$/;"	f	signature:(FixFCOpDesc* p)
FixFCOpFree	c_api_rt.cc	/^void FixFCOpFree(FixFCOpDesc* p) {$/;"	f	signature:(FixFCOpDesc* p)
FixFCOpFree	nn-fixpoint.h	/^  API_PREFIX void FixFCOpFree(FixFCOpDesc* p);$/;"	p	signature:(FixFCOpDesc* p)
FixFCOpFreeRT	c_api_rt.cc	/^void (*FixFCOpFreeRT)(FixFCOpDesc* p);$/;"	v
FixFCOpQuantizeData	c_api.cc	/^void FixFCOpQuantizeData(FixFCOpDesc* p, size_t batch_size, size_t channels, float *src, float sw_threshold) {$/;"	f	signature:(FixFCOpDesc* p, size_t batch_size, size_t channels, float *src, float sw_threshold)
FixFCOpQuantizeData	c_api_rt.cc	/^void FixFCOpQuantizeData(FixFCOpDesc* p, size_t batch_size, size_t channels, float *src, float sw_threshold) {$/;"	f	signature:(FixFCOpDesc* p, size_t batch_size, size_t channels, float *src, float sw_threshold)
FixFCOpQuantizeData	nn-fixpoint.h	/^  API_PREFIX void FixFCOpQuantizeData(FixFCOpDesc* p, size_t batch_size, size_t channels, float *src, float sw_threshold);$/;"	p	signature:(FixFCOpDesc* p, size_t batch_size, size_t channels, float *src, float sw_threshold)
FixFCOpQuantizeDataRT	c_api_rt.cc	/^void (*FixFCOpQuantizeDataRT)(FixFCOpDesc* p, size_t batch_size, size_t channels, float *src, float sw_threshold);$/;"	v
FixFCOpQuantizeKernel	c_api.cc	/^void FixFCOpQuantizeKernel(FixFCOpDesc* p, float threshold) {$/;"	f	signature:(FixFCOpDesc* p, float threshold)
FixFCOpQuantizeKernel	c_api_rt.cc	/^void FixFCOpQuantizeKernel(FixFCOpDesc* p, float threshold) {$/;"	f	signature:(FixFCOpDesc* p, float threshold)
FixFCOpQuantizeKernel	nn-fixpoint.h	/^  API_PREFIX void FixFCOpQuantizeKernel(FixFCOpDesc* p, float threshold);$/;"	p	signature:(FixFCOpDesc* p, float threshold)
FixFCOpQuantizeKernelRT	c_api_rt.cc	/^void (*FixFCOpQuantizeKernelRT)(FixFCOpDesc* p, float threshold);$/;"	v
FixFCOpSetupFCParameter	c_api.cc	/^void FixFCOpSetupFCParameter(FixFCOpDesc* p, size_t channel_out, size_t channel_in, float *src, float *bias, bool relu_fusion) {$/;"	f	signature:(FixFCOpDesc* p, size_t channel_out, size_t channel_in, float *src, float *bias, bool relu_fusion)
FixFCOpSetupFCParameter	c_api_rt.cc	/^void FixFCOpSetupFCParameter(FixFCOpDesc* p, size_t channel_out, size_t channel_in, float *src, float *bias, bool relu_fusion) {$/;"	f	signature:(FixFCOpDesc* p, size_t channel_out, size_t channel_in, float *src, float *bias, bool relu_fusion)
FixFCOpSetupFCParameter	nn-fixpoint.h	/^  API_PREFIX void FixFCOpSetupFCParameter(FixFCOpDesc* p, size_t channel_out, size_t channel_in, float *src, float *bias, bool relu_fusion);$/;"	p	signature:(FixFCOpDesc* p, size_t channel_out, size_t channel_in, float *src, float *bias, bool relu_fusion)
FixFCOpSetupFCParameterRT	c_api_rt.cc	/^void (*FixFCOpSetupFCParameterRT)(FixFCOpDesc* p, size_t channel_out, size_t channel_in, float *src, float *bias, bool relu_fusion);$/;"	v
FixFCOpSetupTargetBuffer	c_api.cc	/^void FixFCOpSetupTargetBuffer(FixFCOpDesc* p, float* dst) {$/;"	f	signature:(FixFCOpDesc* p, float* dst)
FixFCOpSetupTargetBuffer	c_api_rt.cc	/^void FixFCOpSetupTargetBuffer(FixFCOpDesc* p, float* dst) {$/;"	f	signature:(FixFCOpDesc* p, float* dst)
FixFCOpSetupTargetBuffer	nn-fixpoint.h	/^  API_PREFIX void FixFCOpSetupTargetBuffer(FixFCOpDesc* p, float* dst);$/;"	p	signature:(FixFCOpDesc* p, float* dst)
FixFCOpSetupTargetBufferRT	c_api_rt.cc	/^void (*FixFCOpSetupTargetBufferRT)(FixFCOpDesc* p, float* dst);$/;"	v
FixFuseConvOpSetupConvParameter	c_api.cc	/^void FixFuseConvOpSetupConvParameter(FixConvOpDesc* p, size_t channel_out, size_t channel_in, size_t group, size_t kernel_h, size_t kernel_w,$/;"	f	signature:(FixConvOpDesc* p, size_t channel_out, size_t channel_in, size_t group, size_t kernel_h, size_t kernel_w, size_t stride_h, size_t stride_w, size_t dialation_h, size_t dialation_w, size_t pad_h, size_t pad_w, float *src, float *bias, bool conv_relu_fusion, bool conv_bn_fusion, bool conv_bn_relu_fusion, bool conv_relu_bn_fusion, float *global_mean, float *global_variance, float epison, float *scale, float *shift)
FixFuseConvOpSetupConvParameter	c_api_rt.cc	/^void FixFuseConvOpSetupConvParameter(FixConvOpDesc* p, size_t channel_out, size_t channel_in, size_t group, size_t kernel_h, size_t kernel_w,$/;"	f	signature:(FixConvOpDesc* p, size_t channel_out, size_t channel_in, size_t group, size_t kernel_h, size_t kernel_w, size_t stride_h, size_t stride_w, size_t dialation_h, size_t dialation_w, size_t pad_h, size_t pad_w, float *src, float *bias, bool conv_relu_fusion, bool conv_bn_fusion, bool conv_bn_relu_fusion, bool conv_relu_bn_fusion, float *global_mean, float *global_variance, float epison, float *scale, float *shift)
FixFuseConvOpSetupConvParameter	nn-fixpoint.h	/^  API_PREFIX void FixFuseConvOpSetupConvParameter(FixConvOpDesc* p, size_t channel_out, size_t channel_in, size_t group, size_t kernel_h, size_t kernel_w,$/;"	p	signature:(FixConvOpDesc* p, size_t channel_out, size_t channel_in, size_t group, size_t kernel_h, size_t kernel_w, size_t stride_h, size_t stride_w, size_t dialation_h, size_t dialation_w, size_t pad_h, size_t pad_w, float *src, float *bias, bool conv_relu_fusion, bool conv_bn_fusion, bool conv_bn_relu_fusion, bool conv_relu_bn_fusion, float *global_mean, float *global_variance, float epison, float *scale, float *shift)
FixFuseConvOpSetupConvParameterRT	c_api_rt.cc	/^void (*FixFuseConvOpSetupConvParameterRT)(FixConvOpDesc* p, size_t channel_out, size_t channel_in, size_t group, size_t kernel_h, size_t kernel_w,$/;"	v
FixPointConvolution	convolution-x64.h	/^  FixPointConvolution() : convkernel_(), enable_internal_layout_(true), transformed_kernel_(NULL), transformed_data_(NULL), mul_variance_coeff_(NULL) {$/;"	f	struct:FixPointConvolution	access:public	signature:()
FixPointConvolution	convolution-x64.h	/^struct FixPointConvolution {$/;"	s
FixPointConvolution::FixPointConvolution	convolution-x64.h	/^  FixPointConvolution() : convkernel_(), enable_internal_layout_(true), transformed_kernel_(NULL), transformed_data_(NULL), mul_variance_coeff_(NULL) {$/;"	f	struct:FixPointConvolution	access:public	signature:()
FixPointConvolution::GetKernelRowSum	convolution-x64.h	/^  Tensor<DType>* GetKernelRowSum() {$/;"	f	struct:FixPointConvolution	access:public	signature:()
FixPointConvolution::GetQuantizedDataTensor	convolution-x64.h	/^  std::vector<QuantizedTensor<DType, uint8_t>*> GetQuantizedDataTensor() {$/;"	f	struct:FixPointConvolution	access:public	signature:()
FixPointConvolution::GetQuantizedKernelTensor	convolution-x64.h	/^  std::vector<QuantizedTensor<DType, int8_t>*>& GetQuantizedKernelTensor() {$/;"	f	struct:FixPointConvolution	access:public	signature:()
FixPointConvolution::PrepareData	convolution-x64.h	/^  void PrepareData(size_t batch_size, size_t channels, size_t height_in, size_t width_in, DType *src, float sw_threshold = 255.0f, bool transpose = false) {$/;"	f	struct:FixPointConvolution	access:public	signature:(size_t batch_size, size_t channels, size_t height_in, size_t width_in, DType *src, float sw_threshold = 255.0f, bool transpose = false)
FixPointConvolution::PrepareKernel	convolution-x64.h	/^  void PrepareKernel(float sw_threshold = 127.0f) {$/;"	f	struct:FixPointConvolution	access:public	signature:(float sw_threshold = 127.0f)
FixPointConvolution::Run	convolution-x64.h	/^  void Run(float fault_tolerance = 0.5) {$/;"	f	struct:FixPointConvolution	access:public	signature:(float fault_tolerance = 0.5)
FixPointConvolution::SetupConvParameter	convolution-x64.h	/^  void SetupConvParameter(size_t channel_out, size_t channel_in, size_t group, size_t kernel_h, size_t kernel_w,$/;"	f	struct:FixPointConvolution	access:public	signature:(size_t channel_out, size_t channel_in, size_t group, size_t kernel_h, size_t kernel_w, size_t stride_h, size_t stride_w, size_t dilation_h, size_t dilation_w, size_t pad_h, size_t pad_w, DType *src, DType *bias, bool conv_relu_fusion = false, bool conv_bn_fusion = false, bool conv_bn_relu_fusion = false, bool conv_relu_bn_fusion = false, DType *global_mean = NULL, DType *global_variance = NULL, DType epison = 0.0f, DType *scale = NULL, DType *shift = NULL)
FixPointConvolution::SetupTargetParameter	convolution-x64.h	/^  void SetupTargetParameter(DType *dst) {$/;"	f	struct:FixPointConvolution	access:public	signature:(DType *dst)
FixPointConvolution::batch_size_	convolution-x64.h	/^  size_t batch_size_;$/;"	m	struct:FixPointConvolution	access:public
FixPointConvolution::bias_	convolution-x64.h	/^  DType *bias_;$/;"	m	struct:FixPointConvolution	access:public
FixPointConvolution::channel_in_	convolution-x64.h	/^  size_t channel_in_;$/;"	m	struct:FixPointConvolution	access:public
FixPointConvolution::channel_in_per_group_	convolution-x64.h	/^  size_t channel_in_per_group_;$/;"	m	struct:FixPointConvolution	access:public
FixPointConvolution::channel_out_	convolution-x64.h	/^  size_t channel_out_;$/;"	m	struct:FixPointConvolution	access:public
FixPointConvolution::channel_out_per_group_	convolution-x64.h	/^  size_t channel_out_per_group_;$/;"	m	struct:FixPointConvolution	access:public
FixPointConvolution::conv_bn_fusion_	convolution-x64.h	/^  bool conv_bn_fusion_;$/;"	m	struct:FixPointConvolution	access:public
FixPointConvolution::conv_bn_relu_fusion_	convolution-x64.h	/^  bool conv_bn_relu_fusion_;$/;"	m	struct:FixPointConvolution	access:public
FixPointConvolution::conv_relu_bn_fusion_	convolution-x64.h	/^  bool conv_relu_bn_fusion_;$/;"	m	struct:FixPointConvolution	access:public
FixPointConvolution::conv_relu_fusion_	convolution-x64.h	/^  bool conv_relu_fusion_;$/;"	m	struct:FixPointConvolution	access:public
FixPointConvolution::convdata_	convolution-x64.h	/^  struct ConvData<DType, uint8_t, data_shuffle_rows, shuffle_cols> convdata_;$/;"	m	struct:FixPointConvolution	typeref:struct:FixPointConvolution::ConvData	access:public
FixPointConvolution::convkernel_	convolution-x64.h	/^  struct ConvKernel<DType, int8_t, weight_shuffle_rows, shuffle_cols> convkernel_;$/;"	m	struct:FixPointConvolution	typeref:struct:FixPointConvolution::ConvKernel	access:public
FixPointConvolution::data_channels_	convolution-x64.h	/^  size_t data_channels_;$/;"	m	struct:FixPointConvolution	access:public
FixPointConvolution::datasrc_	convolution-x64.h	/^  DType *datasrc_;$/;"	m	struct:FixPointConvolution	access:public
FixPointConvolution::dilation_h_	convolution-x64.h	/^  size_t dilation_h_;$/;"	m	struct:FixPointConvolution	access:public
FixPointConvolution::dilation_w_	convolution-x64.h	/^  size_t dilation_w_;$/;"	m	struct:FixPointConvolution	access:public
FixPointConvolution::dst_	convolution-x64.h	/^  DType *dst_;$/;"	m	struct:FixPointConvolution	access:public
FixPointConvolution::enable_internal_layout_	convolution-x64.h	/^  bool enable_internal_layout_;$/;"	m	struct:FixPointConvolution	access:public
FixPointConvolution::epison_	convolution-x64.h	/^  DType epison_;$/;"	m	struct:FixPointConvolution	access:public
FixPointConvolution::global_mean_	convolution-x64.h	/^  DType *global_mean_;$/;"	m	struct:FixPointConvolution	access:public
FixPointConvolution::global_variance_	convolution-x64.h	/^  DType *global_variance_;$/;"	m	struct:FixPointConvolution	access:public
FixPointConvolution::group_	convolution-x64.h	/^  size_t group_;$/;"	m	struct:FixPointConvolution	access:public
FixPointConvolution::height_in_	convolution-x64.h	/^  size_t height_in_ ;$/;"	m	struct:FixPointConvolution	access:public
FixPointConvolution::internal_layout_	convolution-x64.h	/^  LAYOUT internal_layout_;$/;"	m	struct:FixPointConvolution	access:public
FixPointConvolution::kernel_h_	convolution-x64.h	/^  size_t kernel_h_;$/;"	m	struct:FixPointConvolution	access:public
FixPointConvolution::kernel_w_	convolution-x64.h	/^  size_t kernel_w_;$/;"	m	struct:FixPointConvolution	access:public
FixPointConvolution::kernelsrc_	convolution-x64.h	/^  DType *kernelsrc_;$/;"	m	struct:FixPointConvolution	access:public
FixPointConvolution::layout_	convolution-x64.h	/^  LAYOUT layout_;$/;"	m	struct:FixPointConvolution	access:public
FixPointConvolution::mul_variance_coeff_	convolution-x64.h	/^  Tensor<DType> *mul_variance_coeff_;$/;"	m	struct:FixPointConvolution	access:public
FixPointConvolution::pad_h_	convolution-x64.h	/^  size_t pad_h_;$/;"	m	struct:FixPointConvolution	access:public
FixPointConvolution::pad_w_	convolution-x64.h	/^  size_t pad_w_;$/;"	m	struct:FixPointConvolution	access:public
FixPointConvolution::scale_	convolution-x64.h	/^  DType *scale_;$/;"	m	struct:FixPointConvolution	access:public
FixPointConvolution::shift_	convolution-x64.h	/^  DType *shift_;$/;"	m	struct:FixPointConvolution	access:public
FixPointConvolution::stride_h_	convolution-x64.h	/^  size_t stride_h_;$/;"	m	struct:FixPointConvolution	access:public
FixPointConvolution::stride_w_	convolution-x64.h	/^  size_t stride_w_;$/;"	m	struct:FixPointConvolution	access:public
FixPointConvolution::transformed_data_	convolution-x64.h	/^  DType *transformed_data_;$/;"	m	struct:FixPointConvolution	access:public
FixPointConvolution::transformed_kernel_	convolution-x64.h	/^  DType *transformed_kernel_;$/;"	m	struct:FixPointConvolution	access:public
FixPointConvolution::width_in_	convolution-x64.h	/^  size_t width_in_;$/;"	m	struct:FixPointConvolution	access:public
FixPointConvolution::~FixPointConvolution	convolution-x64.h	/^  ~FixPointConvolution() {$/;"	f	struct:FixPointConvolution	access:public	signature:()
FixPointFC	fc-x64.h	/^  FixPointFC() : fcdata_(), fckernel_() {$/;"	f	struct:FixPointFC	access:public	signature:()
FixPointFC	fc-x64.h	/^struct FixPointFC {$/;"	s
FixPointFC::FixPointFC	fc-x64.h	/^  FixPointFC() : fcdata_(), fckernel_() {$/;"	f	struct:FixPointFC	access:public	signature:()
FixPointFC::PrepareData	fc-x64.h	/^  void PrepareData(size_t batch_size, size_t channels, DType *src, float sw_threshold = 255.0f) {$/;"	f	struct:FixPointFC	access:public	signature:(size_t batch_size, size_t channels, DType *src, float sw_threshold = 255.0f)
FixPointFC::PrepareKernel	fc-x64.h	/^  void PrepareKernel(float sw_threshold = 127.0f) {$/;"	f	struct:FixPointFC	access:public	signature:(float sw_threshold = 127.0f)
FixPointFC::Run	fc-x64.h	/^  void Run(float fault_tolerance = 0.5) {$/;"	f	struct:FixPointFC	access:public	signature:(float fault_tolerance = 0.5)
FixPointFC::SetupFCParameter	fc-x64.h	/^  void SetupFCParameter(size_t channel_out, size_t channel_in, DType *src, DType *bias, bool relu_fusion = false) {$/;"	f	struct:FixPointFC	access:public	signature:(size_t channel_out, size_t channel_in, DType *src, DType *bias, bool relu_fusion = false)
FixPointFC::SetupTargetParameter	fc-x64.h	/^  void SetupTargetParameter(DType *dst) {$/;"	f	struct:FixPointFC	access:public	signature:(DType *dst)
FixPointFC::batch_size_	fc-x64.h	/^  size_t batch_size_;$/;"	m	struct:FixPointFC	access:public
FixPointFC::bias_	fc-x64.h	/^  DType *bias_;$/;"	m	struct:FixPointFC	access:public
FixPointFC::channel_in_	fc-x64.h	/^  size_t channel_in_;$/;"	m	struct:FixPointFC	access:public
FixPointFC::channel_out_	fc-x64.h	/^  size_t channel_out_;$/;"	m	struct:FixPointFC	access:public
FixPointFC::data_channels_	fc-x64.h	/^  size_t data_channels_;$/;"	m	struct:FixPointFC	access:public
FixPointFC::datasrc_	fc-x64.h	/^  DType *datasrc_;$/;"	m	struct:FixPointFC	access:public
FixPointFC::dst_	fc-x64.h	/^  DType *dst_;$/;"	m	struct:FixPointFC	access:public
FixPointFC::fcdata_	fc-x64.h	/^  struct FCData<DType, uint8_t, data_shuffle_rows, shuffle_cols, layout> fcdata_;$/;"	m	struct:FixPointFC	typeref:struct:FixPointFC::FCData	access:public
FixPointFC::fckernel_	fc-x64.h	/^  struct FCKernel<DType, int8_t, weight_shuffle_rows, shuffle_cols, layout> fckernel_;$/;"	m	struct:FixPointFC	typeref:struct:FixPointFC::FCKernel	access:public
FixPointFC::kernelsrc_	fc-x64.h	/^  DType *kernelsrc_;$/;"	m	struct:FixPointFC	access:public
FixPointFC::layout_	fc-x64.h	/^  LAYOUT layout_;$/;"	m	struct:FixPointFC	access:public
FixPointFC::relu_fusion_	fc-x64.h	/^  bool relu_fusion_;$/;"	m	struct:FixPointFC	access:public
FixTensor	nn-fixpoint.h	/^typedef struct FixTensorDesc FixTensor;$/;"	t	typeref:struct:FixTensorDesc
FixTensorDesc	nn-fixpoint.h	/^struct FixTensorDesc {$/;"	s
FixTensorDesc::data	nn-fixpoint.h	/^  void* data;$/;"	m	struct:FixTensorDesc	access:public
FixTensorDesc::dim	nn-fixpoint.h	/^  size_t dim;$/;"	m	struct:FixTensorDesc	access:public
FixTensorDesc::max	nn-fixpoint.h	/^  void* max;$/;"	m	struct:FixTensorDesc	access:public
FixTensorDesc::min	nn-fixpoint.h	/^  void* min;$/;"	m	struct:FixTensorDesc	access:public
FixTensorDesc::ori_shape	nn-fixpoint.h	/^  size_t ori_shape[4];$/;"	m	struct:FixTensorDesc	access:public
FixTensorDesc::ratio	nn-fixpoint.h	/^  void* ratio;$/;"	m	struct:FixTensorDesc	access:public
FixTensorDesc::shape	nn-fixpoint.h	/^  size_t shape[4];$/;"	m	struct:FixTensorDesc	access:public
FixTensorDesc::workspace_size	nn-fixpoint.h	/^  size_t workspace_size;$/;"	m	struct:FixTensorDesc	access:public
FixTensorDesc::workspace_size_per_meta_info	nn-fixpoint.h	/^  size_t workspace_size_per_meta_info;;$/;"	m	struct:FixTensorDesc	access:public
Free	base_convolution.h	/^  virtual void Free() = 0;$/;"	p	struct:BaseConvolutionAlgo	access:public	signature:()
FreeMemory	c_api.cc	/^void FreeMemory(void *p) {$/;"	f	signature:(void *p)
FreeMemory	c_api_rt.cc	/^void FreeMemory(void *p) {$/;"	f	signature:(void *p)
FreeMemory	convolution-x64.h	/^  void FreeMemory() {$/;"	f	struct:ConvData	access:public	signature:()
FreeMemory	fc-x64.h	/^  void FreeMemory() {$/;"	f	struct:FCData	access:public	signature:()
FreeMemory	nn-fixpoint.h	/^  API_PREFIX void FreeMemory(void *p);$/;"	p	signature:(void *p)
FreeMemoryRT	c_api_rt.cc	/^void (*FreeMemoryRT)(void *p);$/;"	v
GEMM_SHUFFLE_KERNEL_K	arch/config.h	19;"	d
GEMM_SHUFFLE_KERNEL_K	arch/config.h	29;"	d
GEMM_SHUFFLE_KERNEL_K	arch/config.h	9;"	d
GEMM_SHUFFLE_KERNEL_M	arch/config.h	17;"	d
GEMM_SHUFFLE_KERNEL_M	arch/config.h	27;"	d
GEMM_SHUFFLE_KERNEL_M	arch/config.h	7;"	d
GEMM_SHUFFLE_KERNEL_N	arch/config.h	18;"	d
GEMM_SHUFFLE_KERNEL_N	arch/config.h	28;"	d
GEMM_SHUFFLE_KERNEL_N	arch/config.h	8;"	d
GenericFindMinMaxValue	ops/find_extreme.h	/^void GenericFindMinMaxValue(const DType *p, size_t length, DType &min, DType &max) {$/;"	f	signature:(const DType *p, size_t length, DType &min, DType &max)
GetAlignmentLength	common.h	/^INLINE_SPECIFIER size_t GetAlignmentLength(size_t n, size_t alignment = 1) {$/;"	f	signature:(size_t n, size_t alignment = 1)
GetBlockNum	common.h	/^size_t GetBlockNum(size_t buffer_size, size_t tile_size, float ratio = 0.5) {$/;"	f	signature:(size_t buffer_size, size_t tile_size, float ratio = 0.5)
GetBlockSize	common.h	/^size_t GetBlockSize(size_t x, size_t y) {$/;"	f	signature:(size_t x, size_t y)
GetBlocksInfo	common.h	/^INLINE_SPECIFIER void GetBlocksInfo(size_t m, size_t k, size_t &m_in_l1, size_t &m_in_l2, size_t &m_in_l3) {$/;"	f	signature:(size_t m, size_t k, size_t &m_in_l1, size_t &m_in_l2, size_t &m_in_l3)
GetConvOutSize	base_convolution.h	/^  inline size_t GetConvOutSize(size_t in, size_t kernel, size_t stride, size_t pad, size_t dilation) {$/;"	f	struct:BaseConvolutionAlgo	access:public	signature:(size_t in, size_t kernel, size_t stride, size_t pad, size_t dilation)
GetConvOutSize	common.h	/^INLINE_SPECIFIER size_t GetConvOutSize(size_t in, size_t kernel, size_t stride, size_t pad, size_t dilation) {$/;"	f	signature:(size_t in, size_t kernel, size_t stride, size_t pad, size_t dilation)
GetConvOutSize	tests/test_conv.cpp	/^static size_t GetConvOutSize(size_t in, size_t kernel, size_t stride, size_t pad, size_t dilation) {$/;"	f	file:	signature:(size_t in, size_t kernel, size_t stride, size_t pad, size_t dilation)
GetFixpointDataShape	convolution-x64.h	/^  void GetFixpointDataShape(size_t kernel_h, size_t kernel_w) {$/;"	f	struct:ConvData	access:public	signature:(size_t kernel_h, size_t kernel_w)
GetFixpointKernelShape	convolution-x64.h	/^  void GetFixpointKernelShape() {$/;"	f	struct:ConvKernel	access:public	signature:()
GetGitCommit	c_api.cc	/^const char* GetGitCommit() {$/;"	f	signature:()
GetGitCommit	c_api_rt.cc	/^const char* GetGitCommit() {$/;"	f	signature:()
GetGitCommit	nn-fixpoint.h	/^  API_PREFIX const char* GetGitCommit();$/;"	p	signature:()
GetGitCommitRT	c_api_rt.cc	/^const char* (*GetGitCommitRT)();$/;"	v
GetKernelRowSum	convolution-x64.h	/^  Tensor<DType>* GetKernelRowSum() {$/;"	f	struct:FixPointConvolution	access:public	signature:()
GetPadSizeForFixPointGemm	fc-x64.h	/^  void GetPadSizeForFixPointGemm() {$/;"	f	struct:FCData	access:public	signature:()
GetPadSizeForFixPointGemm	fc-x64.h	/^  void GetPadSizeForFixPointGemm() {$/;"	f	struct:FCKernel	access:public	signature:()
GetQuantizedDataTensor	convolution-x64.h	/^  std::vector<QuantizedTensor<DType, uint8_t>*> GetQuantizedDataTensor() {$/;"	f	struct:FixPointConvolution	access:public	signature:()
GetQuantizedKernelTensor	convolution-x64.h	/^  std::vector<QuantizedTensor<DType, int8_t>*>& GetQuantizedKernelTensor() {$/;"	f	struct:FixPointConvolution	access:public	signature:()
GetSocketNum	common.h	/^INLINE_SPECIFIER size_t GetSocketNum() {$/;"	f	signature:()
GetThreadsNum	common.h	/^size_t GetThreadsNum() {$/;"	f	signature:()
GetThreadsNumWrapper	common.h	/^size_t GetThreadsNumWrapper() {$/;"	f	signature:()
HADDSUM16TOSum32	ops/kernel/shuffle_avx2_sse42_igemm_4xnx8-x64.h	/^static INLINE_SPECIFIER SIMDSITYPE INLINE_ATTRIBUTE HADDSUM16TOSum32(SIMDSITYPE &localsum1, SIMDSITYPE &localsum2) {$/;"	f	namespace:kernel::igemm4xn	signature:(SIMDSITYPE &localsum1, SIMDSITYPE &localsum2)
HADD_EPI32	arch/isa/misc.h	42;"	d
HADD_EPI32	arch/isa/misc.h	44;"	d
HaddPairReduce	ops/kernel/shuffle_avx2_sse42_igemm_4xnx8-x64.h	/^static INLINE_SPECIFIER void INLINE_ATTRIBUTE HaddPairReduce(SIMDSITYPE &c1, SIMDSITYPE &c2, SIMDSITYPE &sum,$/;"	f	namespace:kernel::igemm4xn	signature:(SIMDSITYPE &c1, SIMDSITYPE &c2, SIMDSITYPE &sum, SIMDSITYPE &threshold, SIMDSITYPE &ones)
IGEMM4X1XK_X64	ops/kernel/shuffle_avx2_igemm4x1x32.h	2;"	d
IGEMM4XN_X64	ops/kernel/shuffle_avx2_sse42_igemm_4xnx8-x64.h	2;"	d
IGEMM_X64	ops/shuffle/shuffle_igemm.h	2;"	d
INIT	arch/isa/misc.h	20;"	d
INIT	arch/isa/misc.h	32;"	d
INIT	arch/isa/misc.h	8;"	d
INLINE_ATTRIBUTE	base.h	27;"	d
INLINE_ATTRIBUTE	base.h	31;"	d
INLINE_ATTRIBUTE	base.h	34;"	d
INLINE_ATTRIBUTE	base.h	37;"	d
INLINE_SPECIFIER	base.h	28;"	d
INLINE_SPECIFIER	base.h	32;"	d
INLINE_SPECIFIER	base.h	35;"	d
INLINE_SPECIFIER	base.h	38;"	d
Init	convolution-x64.h	/^  void Init(float sw_threshold = 127.0f) {$/;"	f	struct:ConvKernel	access:public	signature:(float sw_threshold = 127.0f)
Init	convolution-x64.h	/^  void Init(size_t kernel_h, size_t kernel_w, size_t stride_h, size_t stride_w, size_t dilation_h, size_t dilation_w, size_t pad_h, size_t pad_w, float sw_threshold = 255.0f, bool transposed = false) {$/;"	f	struct:ConvData	access:public	signature:(size_t kernel_h, size_t kernel_w, size_t stride_h, size_t stride_w, size_t dilation_h, size_t dilation_w, size_t pad_h, size_t pad_w, float sw_threshold = 255.0f, bool transposed = false)
Init	fc-x64.h	/^  void Init(float sw_threshold = 127.0f) {$/;"	f	struct:FCKernel	access:public	signature:(float sw_threshold = 127.0f)
Init	fc-x64.h	/^  void Init(float sw_threshold = 255.0f) {$/;"	f	struct:FCData	access:public	signature:(float sw_threshold = 255.0f)
InitWeight	base_convolution.h	/^  virtual void InitWeight(const float *weight) = 0;$/;"	p	struct:BaseConvolutionAlgo	access:public	signature:(const float *weight)
InternalMixPrecisionGEMM	c_api.cc	/^void InternalMixPrecisionGEMM(LAYOUT layout, int8_t* pa, uint8_t* pb, float* pc, size_t m, size_t n, size_t k,$/;"	f	signature:(LAYOUT layout, int8_t* pa, uint8_t* pb, float* pc, size_t m, size_t n, size_t k, float* ratio_a, float* ratio_b, float* kernel_sum, float* min_b, float* bias, size_t batch_size, size_t channel_per_group, size_t height_out, size_t width_out, float fault_tolerance, size_t pad_m, size_t pad_n)
InternalMixPrecisionGEMM	c_api_rt.cc	/^void InternalMixPrecisionGEMM(LAYOUT layout, int8_t* pa, uint8_t* pb, float* pc, size_t m, size_t n, size_t k,$/;"	f	signature:(LAYOUT layout, int8_t* pa, uint8_t* pb, float* pc, size_t m, size_t n, size_t k, float* ratio_a, float* ratio_b, float* kernel_sum, float* min_b, float* bias, size_t batch_size, size_t channel_per_group, size_t height_out, size_t width_out, float fault_tolerance, size_t pad_m, size_t pad_n)
InternalMixPrecisionGEMM	nn-fixpoint.h	/^  API_PREFIX void InternalMixPrecisionGEMM(LAYOUT layout,\\$/;"	p	signature:(LAYOUT layout,\ int8_t* pa, uint8_t* pb, float* pc, size_t m, size_t n, size_t k, \ float* ratio_a, float* ratio_b, float* kernel_sum, float* min_b, float* bias, \ size_t batch_size, size_t channel_per_group, size_t height_out, size_t width_out, \ float fault_tolerance, size_t pad_m, size_t pad_n)
InternalMixPrecisionGEMMRT	c_api_rt.cc	/^void (*InternalMixPrecisionGEMMRT)(LAYOUT layout, int8_t* pa, uint8_t* pb, float* pc, size_t m, size_t n, size_t k,$/;"	v
InternalMixPrecisionGemm	ops/shuffle/shuffle_igemm.h	/^void InternalMixPrecisionGemm(ORDER order,$/;"	f	namespace:shuffle	signature:(ORDER order, enum TRANSPOSE transA, enum TRANSPOSE transB, int m, int n, int k, int8_t *a, int lda, uint8_t *b, int ldb, int *c, int ldc, float fault_tolerance, GEMM_KERNEL kernel)
KENREL_COMMON_H	ops/kernel-common.h	2;"	d
Kernel4x1x32	ops/kernel/shuffle_avx2_igemm4x1x32.h	/^static INLINE_SPECIFIER void INLINE_ATTRIBUTE Kernel4x1x32(int8_t* &pa, uint8_t* &pb,$/;"	f	namespace:kernel::igemm4x1	signature:(int8_t* &pa, uint8_t* &pb, SIMDSITYPE &c1, SIMDSITYPE &c2, SIMDSITYPE &c3, SIMDSITYPE &c4)
KernelReduce	ops/kernel/shuffle_avx2_igemm4x1x32.h	/^static INLINE_SPECIFIER void INLINE_ATTRIBUTE KernelReduce(int8_t* &pa, uint8_t* &pb,$/;"	f	namespace:kernel::igemm4x1	signature:(int8_t* &pa, uint8_t* &pb, SIMDSITYPE &c1, SIMDSITYPE &c2, SIMDSITYPE &c3, SIMDSITYPE &c4, SIMDSITYPE &sum1, SIMDSITYPE &sum2, SIMDSITYPE &sum3, SIMDSITYPE &sum4, kernel_function kernel, reduce_function reduce)
KernelReduce	ops/kernel/shuffle_avx2_sse42_igemm_4xnx8-x64.h	/^static INLINE_SPECIFIER void INLINE_ATTRIBUTE KernelReduce(int8_t* &pa, uint8_t* &pb,$/;"	f	namespace:kernel::igemm4xn	signature:(int8_t* &pa, uint8_t* &pb, SIMDSITYPE &c11, SIMDSITYPE &c12, SIMDSITYPE &c21, SIMDSITYPE &c22, SIMDSITYPE &c31, SIMDSITYPE &c32, SIMDSITYPE &c41, SIMDSITYPE &c42, SIMDSITYPE &sum1, SIMDSITYPE &sum2, SIMDSITYPE &sum3, SIMDSITYPE &sum4, SIMDSITYPE &threshold, SIMDSITYPE &ones, kernel_function kernel, reduce_function reduce)
KernelReduce	ops/kernel/shuffle_avx512_igemm_4x4x64.h	/^static INLINE_SPECIFIER void INLINE_ATTRIBUTE KernelReduce(int8_t* &pa, uint8_t* &pb,$/;"	f	namespace:kernel::avx512_igemm4x4x64	signature:(int8_t* &pa, uint8_t* &pb, SIMDSITYPE &c00, SIMDSITYPE &c01, SIMDSITYPE &c02, SIMDSITYPE &c03, SIMDSITYPE &c10, SIMDSITYPE &c11, SIMDSITYPE &c12, SIMDSITYPE &c13, SIMDSITYPE &c20, SIMDSITYPE &c21, SIMDSITYPE &c22, SIMDSITYPE &c23, SIMDSITYPE &c30, SIMDSITYPE &c31, SIMDSITYPE &c32, SIMDSITYPE &c33, SIMDSITYPE &sum00, SIMDSITYPE &sum01, SIMDSITYPE &sum10, SIMDSITYPE &sum11, SIMDSITYPE &sum20, SIMDSITYPE &sum21, SIMDSITYPE &sum30, SIMDSITYPE &sum31, kernel_function kernel, reduce_function reduce)
KernelReduce	ops/kernel/shuffle_sse42_igemm2x2x16.h	/^static INLINE_SPECIFIER void INLINE_ATTRIBUTE KernelReduce(int8_t* &pa, uint8_t* &pb,$/;"	f	namespace:kernel::sse42_igemm2x2x16	signature:(int8_t* &pa, uint8_t* &pb, SIMDSITYPE &c11, SIMDSITYPE &c12, SIMDSITYPE &c21, SIMDSITYPE &c22, SIMDSITYPE &sum, SIMDSITYPE &threshold, SIMDSITYPE &ones, kernel_function kernel, reduce_function reduce)
LAYOUT	nn-fixpoint.h	/^typedef enum LAYOUT {NCHW=0, NHWC=1} LAYOUT;$/;"	g
LAYOUT	nn-fixpoint.h	/^typedef enum LAYOUT {NCHW=0, NHWC=1} LAYOUT;$/;"	t	typeref:enum:LAYOUT
LOAD256_PS	arch/isa/load.h	27;"	d
LOADU128_PS	arch/isa/load.h	35;"	d
LOADU256_PS	arch/isa/load.h	29;"	d
LOADU512_PS	arch/isa/load.h	23;"	d
LOADU_PS	arch/isa/load.h	24;"	d
LOADU_PS	arch/isa/load.h	30;"	d
LOADU_PS	arch/isa/load.h	36;"	d
LOADU_PS_HALF	arch/isa/load.h	31;"	d
LOADU_SI128	arch/isa/load.h	18;"	d
LOAD_PS	arch/isa/load.h	28;"	d
LOAD_SI	arch/isa/load.h	10;"	d
LOAD_SI	arch/isa/load.h	15;"	d
LOAD_SI	arch/isa/load.h	7;"	d
LOAD_SI128	arch/isa/load.h	14;"	d
LOAD_SI256	arch/isa/load.h	9;"	d
LOAD_SI512	arch/isa/load.h	6;"	d
LayoutTransform	c_api.cc	/^void LayoutTransform(LAYOUT dst_layout, LAYOUT src_layout, float *dst, float *src, size_t batch_size, size_t channel_size, size_t spatial_size) {$/;"	f	signature:(LAYOUT dst_layout, LAYOUT src_layout, float *dst, float *src, size_t batch_size, size_t channel_size, size_t spatial_size)
LayoutTransform	c_api_rt.cc	/^void LayoutTransform(LAYOUT dst_layout, LAYOUT src_layout, float *dst, float *src, size_t batch_size, size_t channel_size, size_t spatial_size) {$/;"	f	signature:(LAYOUT dst_layout, LAYOUT src_layout, float *dst, float *src, size_t batch_size, size_t channel_size, size_t spatial_size)
LayoutTransform	nn-fixpoint.h	/^  API_PREFIX void LayoutTransform(LAYOUT dst_layout, LAYOUT src_layout, float *dst, float *src, size_t batch_size, size_t channel_size, size_t spatial_size);$/;"	p	signature:(LAYOUT dst_layout, LAYOUT src_layout, float *dst, float *src, size_t batch_size, size_t channel_size, size_t spatial_size)
LayoutTransformRT	c_api_rt.cc	/^void (*LayoutTransformRT)(LAYOUT dst_layout, LAYOUT src_layout, float *dst, float *src, size_t batch_size, size_t channel_size, size_t spatial_size);$/;"	v
MADD_EPI16	arch/isa/mul.h	23;"	d
MADD_EPI16	arch/isa/mul.h	26;"	d
MADD_EPI16	arch/isa/mul.h	29;"	d
MADD_EPI8	arch/isa/mul.h	22;"	d
MADD_EPI8	arch/isa/mul.h	25;"	d
MADD_EPI8	arch/isa/mul.h	28;"	d
MAKE	Makefile	/^MAKE := make$/;"	m
MAKEFILE	Makefile	/^MAKEFILE := Makefile.base$/;"	m
MASK_BLEND_EPI64	arch/isa/alu.h	62;"	d
MASK_REDUCEADD_EPI32	arch/isa/alu.h	96;"	d
MAX_EPI16	arch/isa/alu.h	26;"	d
MAX_EPI16	arch/isa/alu.h	36;"	d
MAX_EPI16	arch/isa/alu.h	48;"	d
MAX_PS	arch/isa/alu.h	11;"	d
MAX_PS	arch/isa/alu.h	16;"	d
MAX_PS	arch/isa/alu.h	6;"	d
MIN_EPI16	arch/isa/alu.h	27;"	d
MIN_EPI16	arch/isa/alu.h	37;"	d
MIN_EPI16	arch/isa/alu.h	49;"	d
MIN_PS	arch/isa/alu.h	12;"	d
MIN_PS	arch/isa/alu.h	17;"	d
MIN_PS	arch/isa/alu.h	7;"	d
MODEL_H	model.h	2;"	d
MUL_PS	arch/isa/mul.h	11;"	d
MUL_PS	arch/isa/mul.h	16;"	d
MUL_PS	arch/isa/mul.h	8;"	d
MUL_PS_HALF	arch/isa/mul.h	13;"	d
MixPrecisionGemm	ops/mixprecison_gemm.h	/^void MixPrecisionGemm(ORDER order,$/;"	f	signature:(ORDER order, enum TRANSPOSE transA, enum TRANSPOSE transB, int m, int n, int k, int8_t *a, int lda, uint8_t *b, int ldb, int *c, int ldc, float fault_tolerance)
MixPrecisionGemm	ops/ops.h	/^void MixPrecisionGemm(ORDER order,$/;"	p	signature:(ORDER order, enum TRANSPOSE transA, enum TRANSPOSE transB, int m, int n, int k, int8_t *a, int lda, uint8_t *b, int ldb, int *c, int ldc, float fault_tolerance)
NCHW	nn-fixpoint.h	/^typedef enum LAYOUT {NCHW=0, NHWC=1} LAYOUT;$/;"	e	enum:LAYOUT
NCHWFMABlockResult	ops/kernel/shuffle_avx2_sse42_igemm_4xnx8-x64.h	/^static INLINE_SPECIFIER void INLINE_ATTRIBUTE NCHWFMABlockResult(SIMDSITYPE &sum1, SIMDSITYPE &sum2, SIMDSITYPE &sum3, SIMDSITYPE &sum4,$/;"	f	namespace:kernel::igemm4xn	signature:(SIMDSITYPE &sum1, SIMDSITYPE &sum2, SIMDSITYPE &sum3, SIMDSITYPE &sum4, float* result[], size_t length, size_t valid_lanes, size_t i_index, size_t j_index, float* ratio_a, float* ratio_b, float* min_b, float* kernel_sum, float* bias, bool conv_relu_fusion, bool conv_bn_fusion, bool conv_bn_relu_fusion, bool conv_relu_bn_fusion, float *global_mean, float *mul_variance_coeff, float *scale, float *shift)
NCHWGenrateBlockTargetAddr	ops/kernel-common.h	/^static INLINE_SPECIFIER void INLINE_ATTRIBUTE NCHWGenrateBlockTargetAddr(DType *result[], DType *pc, size_t valid_m, size_t valid_n, size_t i_index, size_t j_index, \\$/;"	f	signature:(DType *result[], DType *pc, size_t valid_m, size_t valid_n, size_t i_index, size_t j_index, \ size_t cur_group, size_t feature_map_size_per_image, size_t feature_map_size_per_group, \ size_t feature_map_size_per_channel)
NCHWGenrateTargetAddr	ops/kernel-common.h	/^static INLINE_SPECIFIER void INLINE_ATTRIBUTE NCHWGenrateTargetAddr(DType *result[], DType *pc, size_t valid_m, size_t valid_n, size_t i_index, size_t j_index, \\$/;"	f	signature:(DType *result[], DType *pc, size_t valid_m, size_t valid_n, size_t i_index, size_t j_index, \ size_t cur_group, size_t feature_map_size_per_image, size_t feature_map_size_per_group, \ size_t feature_map_size_per_channel)
NCHWRTGenrateTargetAddr	ops/kernel/shuffle_avx2_igemm4x1x32.h	/^static INLINE_SPECIFIER int INLINE_ATTRIBUTE NCHWRTGenrateTargetAddr(DType *result[], DType *pc, size_t valid_m, size_t valid_n, size_t i_index, size_t j_index, \\$/;"	f	namespace:kernel::igemm4x1	signature:(DType *result[], DType *pc, size_t valid_m, size_t valid_n, size_t i_index, size_t j_index, \ size_t cur_group, size_t feature_map_size_per_image, size_t feature_map_size_per_group, \ size_t feature_map_size_per_channel)
NCHWRTGenrateTargetAddr	ops/kernel/shuffle_avx2_sse42_igemm_4xnx8-x64.h	/^static INLINE_SPECIFIER bool INLINE_ATTRIBUTE NCHWRTGenrateTargetAddr(DType *result[], DType *pc, size_t valid_m, size_t valid_n, size_t i_index, size_t j_index, \\$/;"	f	namespace:kernel::igemm4xn	signature:(DType *result[], DType *pc, size_t valid_m, size_t valid_n, size_t i_index, size_t j_index, \ size_t cur_group, size_t feature_map_size_per_image, size_t feature_map_size_per_group, \ size_t feature_map_size_per_channel)
NCHWRTGenrateTargetAddr	ops/kernel/shuffle_avx512_igemm_4x4x64.h	/^static INLINE_SPECIFIER bool INLINE_ATTRIBUTE NCHWRTGenrateTargetAddr(DType *result[], DType *pc, size_t valid_m, size_t valid_n, size_t i_index, size_t j_index, \\$/;"	f	namespace:kernel::avx512_igemm4x4x64	signature:(DType *result[], DType *pc, size_t valid_m, size_t valid_n, size_t i_index, size_t j_index, \ size_t cur_group, size_t feature_map_size_per_image, size_t feature_map_size_per_group, \ size_t feature_map_size_per_channel)
NCHWRTGenrateTargetAddr	ops/kernel/shuffle_sse42_igemm2x2x16.h	/^static INLINE_SPECIFIER bool INLINE_ATTRIBUTE NCHWRTGenrateTargetAddr(DType *result[], DType *pc, size_t valid_m, size_t valid_n, size_t i_index, size_t j_index, \\$/;"	f	namespace:kernel::sse42_igemm2x2x16	signature:(DType *result[], DType *pc, size_t valid_m, size_t valid_n, size_t i_index, size_t j_index, \ size_t cur_group, size_t feature_map_size_per_image, size_t feature_map_size_per_group, \ size_t feature_map_size_per_channel)
NCHWRTGenrateTargetAddr	ops/shuffle/shuffle_igemm.h	/^static INLINE_SPECIFIER int INLINE_ATTRIBUTE NCHWRTGenrateTargetAddr(DType *result[], DType *pc, size_t valid_m, size_t valid_n, size_t i_index, size_t j_index, \\$/;"	f	namespace:shuffle	signature:(DType *result[], DType *pc, size_t valid_m, size_t valid_n, size_t i_index, size_t j_index, \ size_t cur_group, size_t feature_map_size_per_image, size_t feature_map_size_per_group, \ size_t feature_map_size_per_channel)
NHWC	nn-fixpoint.h	/^typedef enum LAYOUT {NCHW=0, NHWC=1} LAYOUT;$/;"	e	enum:LAYOUT
NHWCFMABlockResult	ops/kernel/shuffle_avx2_sse42_igemm_4xnx8-x64.h	/^static INLINE_SPECIFIER void INLINE_ATTRIBUTE NHWCFMABlockResult(SIMDSITYPE &sum1, SIMDSITYPE &sum2, SIMDSITYPE &sum3, SIMDSITYPE &sum4,$/;"	f	namespace:kernel::igemm4xn	signature:(SIMDSITYPE &sum1, SIMDSITYPE &sum2, SIMDSITYPE &sum3, SIMDSITYPE &sum4, float* result[], size_t length, size_t valid_lanes, size_t i_index, size_t j_index, float* ratio_a, float* ratio_b, float *min_b, float *kernel_sum, float *bias, bool conv_relu_fusion, bool conv_bn_fusion, bool conv_bn_relu_fusion, bool conv_relu_bn_fusion, float *global_mean, float *mul_variance_coeff, float *scale, float *shift)
NHWCGenrateBlockTargetAddr	ops/kernel-common.h	/^static INLINE_SPECIFIER void INLINE_ATTRIBUTE NHWCGenrateBlockTargetAddr(DType *result[], DType *pc, size_t valid_m, size_t valid_n, size_t i_index, size_t j_index, \\$/;"	f	signature:(DType *result[], DType *pc, size_t valid_m, size_t valid_n, size_t i_index, size_t j_index, \ size_t cur_group, size_t channel_per_group, size_t total_channels)
NHWCGenrateTargetAddr	ops/kernel-common.h	/^static INLINE_SPECIFIER void INLINE_ATTRIBUTE NHWCGenrateTargetAddr(DType *result[], DType *pc, size_t valid_m, size_t valid_n, size_t i_index, size_t j_index, \\$/;"	f	signature:(DType *result[], DType *pc, size_t valid_m, size_t valid_n, size_t i_index, size_t j_index, \ size_t cur_group, size_t channel_per_group, size_t total_channels)
NHWCRTGenrateTargetAddr	ops/kernel/shuffle_avx2_igemm4x1x32.h	/^static INLINE_SPECIFIER bool INLINE_ATTRIBUTE NHWCRTGenrateTargetAddr(DType *result[], DType *pc, size_t valid_m, size_t valid_n, size_t i_index, size_t j_index, \\$/;"	f	namespace:kernel::igemm4x1	signature:(DType *result[], DType *pc, size_t valid_m, size_t valid_n, size_t i_index, size_t j_index, \ size_t cur_group, size_t channel_per_group, size_t total_channels)
NHWCRTGenrateTargetAddr	ops/kernel/shuffle_avx2_sse42_igemm_4xnx8-x64.h	/^static INLINE_SPECIFIER bool INLINE_ATTRIBUTE NHWCRTGenrateTargetAddr(DType *result[], DType *pc, size_t valid_m, size_t valid_n, size_t i_index, size_t j_index, \\$/;"	f	namespace:kernel::igemm4xn	signature:(DType *result[], DType *pc, size_t valid_m, size_t valid_n, size_t i_index, size_t j_index, \ size_t cur_group, size_t channel_per_group, size_t total_channels)
NHWCRTGenrateTargetAddr	ops/kernel/shuffle_avx512_igemm_4x4x64.h	/^static INLINE_SPECIFIER bool INLINE_ATTRIBUTE NHWCRTGenrateTargetAddr(DType *result[], DType *pc, size_t valid_m, size_t valid_n, size_t i_index, size_t j_index, \\$/;"	f	namespace:kernel::avx512_igemm4x4x64	signature:(DType *result[], DType *pc, size_t valid_m, size_t valid_n, size_t i_index, size_t j_index, \ size_t cur_group, size_t channel_per_group, size_t total_channels)
NHWCRTGenrateTargetAddr	ops/kernel/shuffle_sse42_igemm2x2x16.h	/^static INLINE_SPECIFIER bool INLINE_ATTRIBUTE NHWCRTGenrateTargetAddr(DType *result[], DType *pc, size_t valid_m, size_t valid_n, size_t i_index, size_t j_index, \\$/;"	f	namespace:kernel::sse42_igemm2x2x16	signature:(DType *result[], DType *pc, size_t valid_m, size_t valid_n, size_t i_index, size_t j_index, \ size_t cur_group, size_t channel_per_group, size_t total_channels)
NHWCRTGenrateTargetAddr	ops/shuffle/shuffle_igemm.h	/^static INLINE_SPECIFIER bool INLINE_ATTRIBUTE NHWCRTGenrateTargetAddr(DType *result[], DType *pc, size_t valid_m, size_t valid_n, size_t i_index, size_t j_index, \\$/;"	f	namespace:shuffle	signature:(DType *result[], DType *pc, size_t valid_m, size_t valid_n, size_t i_index, size_t j_index, \ size_t cur_group, size_t channel_per_group, size_t total_channels)
NNFixPointGemmSelect	ops/shuffle/shuffle_igemm.h	/^static INLINE_SPECIFIER void INLINE_ATTRIBUTE NNFixPointGemmSelect(int8_t* &pa, uint8_t* &pb, size_t k, float fault_tolerance, float* result[], size_t length, size_t valid_lanes,$/;"	f	namespace:shuffle	signature:(int8_t* &pa, uint8_t* &pb, size_t k, float fault_tolerance, float* result[], size_t length, size_t valid_lanes, size_t i_index, size_t j_index, float* ratio_a, float* ratio_b, float *min_b, float *kernel_sum, float *bias, bool conv_relu_fusion, bool conv_bn_fusion, bool conv_bn_relu_fusion, bool conv_relu_bn_fusion, float *global_mean, float *mul_variance_coeff, float *scale, float *shift, bool is_block)
NN_FIXPOINT	nn-fixpoint.h	2;"	d
NOROLL_ATTRIBUTE	base.h	44;"	d
NOROLL_ATTRIBUTE	base.h	47;"	d
NOROLL_ATTRIBUTE	base.h	50;"	d
NoTrans	ops/ops.h	/^typedef enum TRANSPOSE {NoTrans=111, Trans=112} TRANSPOSE;$/;"	e	enum:TRANSPOSE
OMPFindMinMaxValue	ops/find_extreme.h	/^void OMPFindMinMaxValue(DType *p, size_t length, DType &min_value, DType &max_value) {$/;"	f	signature:(DType *p, size_t length, DType &min_value, DType &max_value)
OMPFindMinMaxValue	ops/ops.h	/^void OMPFindMinMaxValue(DType *p, size_t length, DType &min_value, DType &max_value, float threshold);$/;"	p	signature:(DType *p, size_t length, DType &min_value, DType &max_value, float threshold)
OPERAND_WIDTH	arch/isa/dtype.h	30;"	d
OPERAND_WIDTH	arch/isa/dtype.h	33;"	d
OPERAND_WIDTH	arch/isa/dtype.h	36;"	d
OPS_FIND_EXTREME_H	ops/find_extreme.h	2;"	d
OPS_GROUP_H	ops/group.h	2;"	d
OPS_IM2COL_COMMON_H	ops/im2col_common.h	2;"	d
OPS_LAYOUT_H	ops/layout.h	2;"	d
OPS_MIXPRECISION_GEMM_H	ops/mixprecison_gemm.h	2;"	d
OPS_OPS_H	ops/ops.h	2;"	d
OPS_QUANTIZE_H	ops/quantize.h	2;"	d
OPS_SHUFFLE_IM2COL_H	ops/shuffle/shuffle_im2col.h	2;"	d
OPS_SHUFFLE_KERNEL_AVX512_IGEMM_4X4X64_H	ops/kernel/shuffle_avx512_igemm_4x4x64.h	2;"	d
OPS_SHUFFLE_KERNEL_SSE42_IGEMM2X2X16_H	ops/kernel/shuffle_sse42_igemm2x2x16.h	2;"	d
ORDER	ops/ops.h	/^typedef enum ORDER {RowMajor=101, ColMajor=102} ORDER;$/;"	g
ORDER	ops/ops.h	/^typedef enum ORDER {RowMajor=101, ColMajor=102} ORDER;$/;"	t	typeref:enum:ORDER
PAD_SHUFFLE_H	ops/shuffle/pad_shuffle.h	2;"	d
PERMUTEX_EPI32	arch/isa/shuffle.h	11;"	d
PERMUTEX_EPI64	arch/isa/shuffle.h	12;"	d
PERMUTEX_PS	arch/isa/shuffle.h	24;"	d
PERMUTE_EPI32	arch/isa/shuffle.h	14;"	d
PERMUTE_EPI64	arch/isa/shuffle.h	16;"	d
PERMUTE_PS	arch/isa/shuffle.h	23;"	d
PERMUTE_PS	arch/isa/shuffle.h	26;"	d
PERMUTE_PS128	arch/isa/shuffle.h	27;"	d
PERMUTE_SI128	arch/isa/shuffle.h	15;"	d
PRELU	ops/kernel-common.h	/^static INLINE_SPECIFIER void INLINE_ATTRIBUTE PRELU(SIMDPSTYPE &result, const SIMDPSTYPE &threshold) {$/;"	f	signature:(SIMDPSTYPE &result, const SIMDPSTYPE &threshold)
PSTOEPI32	arch/isa/alu.h	71;"	d
PSTOEPI32	arch/isa/alu.h	78;"	d
PSTOEPI32	arch/isa/alu.h	84;"	d
PSTOEPI32_HALF	arch/isa/alu.h	79;"	d
PS_OPERAND_WIDTH	arch/isa/dtype.h	31;"	d
PS_OPERAND_WIDTH	arch/isa/dtype.h	34;"	d
PS_OPERAND_WIDTH	arch/isa/dtype.h	37;"	d
PadQuantize	ops/ops.h	/^void PadQuantize(int8_t *dst, size_t length, size_t pad_length, SrcType *src, SrcType &min, SrcType &max, SrcType &ratio, float threshold);$/;"	p	signature:(int8_t *dst, size_t length, size_t pad_length, SrcType *src, SrcType &min, SrcType &max, SrcType &ratio, float threshold)
PadQuantize	ops/ops.h	/^void PadQuantize(uint8_t *dst, size_t length, size_t pad_length, SrcType *src, SrcType &min, SrcType &max, SrcType &ratio, float threshold);$/;"	p	signature:(uint8_t *dst, size_t length, size_t pad_length, SrcType *src, SrcType &min, SrcType &max, SrcType &ratio, float threshold)
PadQuantize	ops/quantize.h	/^void PadQuantize(int8_t *dst, size_t length, size_t pad_length, SrcType *src, SrcType &min, SrcType &max, SrcType &ratio, float threshold) {$/;"	f	signature:(int8_t *dst, size_t length, size_t pad_length, SrcType *src, SrcType &min, SrcType &max, SrcType &ratio, float threshold)
PadQuantize	ops/quantize.h	/^void PadQuantize(uint8_t *dst, size_t length, size_t pad_length, SrcType *src, SrcType &min, SrcType &max, SrcType &ratio, float threshold) {$/;"	f	signature:(uint8_t *dst, size_t length, size_t pad_length, SrcType *src, SrcType &min, SrcType &max, SrcType &ratio, float threshold)
PadQuantize	ops/quantize.h	/^void PadQuantize<float>(uint8_t *dst, size_t length, size_t pad_length, float *src, float &min, float &max, float &ratio, float threshold) {$/;"	f	signature:(uint8_t *dst, size_t length, size_t pad_length, float *src, float &min, float &max, float &ratio, float threshold)
PadQuantize2D	ops/quantize.h	/^void PadQuantize2D(int8_t *dst, size_t m, size_t n, size_t pad_m, size_t pad_n, DType *src, DType *min, DType *max, DType *ratio, float sw_threshold) {$/;"	f	signature:(int8_t *dst, size_t m, size_t n, size_t pad_m, size_t pad_n, DType *src, DType *min, DType *max, DType *ratio, float sw_threshold)
PadQuantize2D	ops/quantize.h	/^void PadQuantize2D(uint8_t *dst, size_t m, size_t n, size_t pad_m, size_t pad_n, DType *src, DType *min, DType *max, DType *ratio, float sw_threshold) {$/;"	f	signature:(uint8_t *dst, size_t m, size_t n, size_t pad_m, size_t pad_n, DType *src, DType *min, DType *max, DType *ratio, float sw_threshold)
PadQuantizeIm2colWrapper	ops/ops.h	/^void PadQuantizeIm2colWrapper(DType* data,$/;"	p	signature:(DType* data, size_t batch_size, size_t channels_per_group, size_t groups, size_t height, size_t width, size_t kernel_h, size_t kernel_w, size_t pad_h, size_t pad_w, size_t stride_h, size_t stride_w, size_t dilation_h, size_t dilation_w, uint8_t *data_col[], DType *min[], DType *max[], DType *ratio[], DType *workspace, float sw_threshold = 255.0f, bool transpose = false)
PadQuantizeShuffle	ops/ops.h	/^void PadQuantizeShuffle(int8_t *dst, size_t m, size_t n, DType *src, DType &min, DType &max, DType &ratio, float sw_threshold);$/;"	p	namespace:shuffle	signature:(int8_t *dst, size_t m, size_t n, DType *src, DType &min, DType &max, DType &ratio, float sw_threshold)
PadQuantizeShuffle	ops/shuffle/pad_shuffle.h	/^void PadQuantizeShuffle(int8_t *dst, size_t m, size_t n, DType *src, DType &min, DType &max, DType &ratio, float sw_threshold) {$/;"	f	namespace:shuffle	signature:(int8_t *dst, size_t m, size_t n, DType *src, DType &min, DType &max, DType &ratio, float sw_threshold)
PadQuantizeShuffle2D	ops/ops.h	/^void PadQuantizeShuffle2D(int8_t *dst, size_t m, size_t n, size_t pad_m, size_t pad_n, DType *src, DType *min, DType *max, DType *ratio, float sw_threshold);$/;"	p	namespace:shuffle	signature:(int8_t *dst, size_t m, size_t n, size_t pad_m, size_t pad_n, DType *src, DType *min, DType *max, DType *ratio, float sw_threshold)
PadQuantizeShuffle2D	ops/ops.h	/^void PadQuantizeShuffle2D(uint8_t *dst, size_t m, size_t n, size_t pad_m, size_t pad_n, DType *src, DType *min, DType *max, DType *ratio, float sw_threshold);$/;"	p	namespace:shuffle	signature:(uint8_t *dst, size_t m, size_t n, size_t pad_m, size_t pad_n, DType *src, DType *min, DType *max, DType *ratio, float sw_threshold)
PadQuantizeShuffle2D	ops/shuffle/pad_shuffle.h	/^void PadQuantizeShuffle2D(int8_t *dst, size_t m, size_t n, size_t pad_m, size_t pad_n, DType *src, DType *min, DType *max, DType *ratio, float sw_threshold) {$/;"	f	namespace:shuffle	signature:(int8_t *dst, size_t m, size_t n, size_t pad_m, size_t pad_n, DType *src, DType *min, DType *max, DType *ratio, float sw_threshold)
PadQuantizeShuffle2D	ops/shuffle/pad_shuffle.h	/^void PadQuantizeShuffle2D(uint8_t *dst, size_t m, size_t n, size_t pad_m, size_t pad_n, DType *src, DType *min, DType *max, DType *ratio, float sw_threshold) {$/;"	f	namespace:shuffle	signature:(uint8_t *dst, size_t m, size_t n, size_t pad_m, size_t pad_n, DType *src, DType *min, DType *max, DType *ratio, float sw_threshold)
PadQuantizeShuffleIm2colRef	ops/shuffle/shuffle_im2col.h	/^void PadQuantizeShuffleIm2colRef(DType* data,$/;"	f	namespace:shuffle	signature:(DType* data, size_t batch_size, size_t channels, size_t height, size_t width, size_t kernel_h, size_t kernel_w, size_t pad_h, size_t pad_w, size_t stride_h, size_t stride_w, size_t dilation_h, size_t dilation_w, uint8_t* data_col, DType* min, DType* max, DType* ratio, float sw_threshold = 255.0f)
PadQuantizeShuffleIm2colWrapper	ops/ops.h	/^void PadQuantizeShuffleIm2colWrapper(DType* data,$/;"	p	namespace:shuffle	signature:(DType* data, size_t batch_size, size_t channels_per_group, size_t groups, size_t height, size_t width, size_t kernel_h, size_t kernel_w, size_t pad_h, size_t pad_w, size_t stride_h, size_t stride_w, size_t dilation_h, size_t dilation_w, uint8_t *data_col[], DType *min[], DType *max[], DType *ratio[], DType *workspace, float sw_threshold = 255.0f, bool transpose = false)
PadQuantizeShuffleIm2colWrapper	ops/shuffle/shuffle_im2col.h	/^void PadQuantizeShuffleIm2colWrapper(DType* data,$/;"	f	namespace:shuffle	signature:(DType* data, size_t batch_size, size_t channels_per_group, size_t groups, size_t height, size_t width, size_t kernel_h, size_t kernel_w, size_t pad_h, size_t pad_w, size_t stride_h, size_t stride_w, size_t dilation_h, size_t dilation_w, uint8_t *data_col[], DType *min[], DType *max[], DType *ratio[], DType *workspace, float sw_threshold, bool transpose)
PadQuantizeShuffleNCHWIm2col	ops/shuffle/shuffle_im2col.h	/^void PadQuantizeShuffleNCHWIm2col(DType* data,$/;"	f	namespace:shuffle	signature:(DType* data, size_t batch_size, size_t channels_per_group, size_t groups, size_t height, size_t width, size_t kernel_h, size_t kernel_w, size_t pad_h, size_t pad_w, size_t stride_h, size_t stride_w, size_t dilation_h, size_t dilation_w, uint8_t *data_col[], DType *min[], DType *max[], DType *ratio[], float sw_threshold)
PadQuantizeShuffleNCHWIm2col	ops/shuffle/shuffle_im2col.h	/^void PadQuantizeShuffleNCHWIm2col(DType* data,$/;"	f	namespace:shuffle	signature:(DType* data, size_t batch_size, size_t channels_per_group, size_t groups, size_t height, size_t width, size_t pad_h, size_t pad_w, size_t stride_h, size_t stride_w, size_t dilation_h, size_t dilation_w, uint8_t *data_col[], DType *min[], DType *max[], DType *ratio[], float sw_threshold)
PadQuantizeShuffleNHWCIm2col	ops/shuffle/shuffle_im2col.h	/^void PadQuantizeShuffleNHWCIm2col(DType* data,$/;"	f	namespace:shuffle	signature:(DType* data, size_t batch_size, size_t channels_per_group, size_t groups, size_t height, size_t width, size_t kernel_h, size_t kernel_w, size_t pad_h, size_t pad_w, size_t stride_h, size_t stride_w, size_t dilation_h, size_t dilation_w, uint8_t* data_col[], DType *min[], DType *max[], DType *ratio[], DType *workspace, float sw_threshold, findextreme_function findextreme, quantizekernel_function quantizekernel)
PadShuffle2D	ops/ops.h	/^void PadShuffle2D(DType *dst, size_t m, size_t n, DType *src);$/;"	p	namespace:shuffle	signature:(DType *dst, size_t m, size_t n, DType *src)
PadShuffle2D	ops/shuffle/pad_shuffle.h	/^void PadShuffle2D(DType *dst, size_t m, size_t n, DType *src) {$/;"	f	namespace:shuffle	signature:(DType *dst, size_t m, size_t n, DType *src)
ParallelPadQuantize	ops/ops.h	/^void ParallelPadQuantize(int8_t *dst, size_t length, size_t pad_length, SrcType *src, SrcType &min, SrcType &max, SrcType &ratio, float threshold);$/;"	p	signature:(int8_t *dst, size_t length, size_t pad_length, SrcType *src, SrcType &min, SrcType &max, SrcType &ratio, float threshold)
ParallelPadQuantize	ops/ops.h	/^void ParallelPadQuantize(uint8_t *dst, size_t length, size_t pad_length, SrcType *src, SrcType &min, SrcType &max, SrcType &ratio, float threshold);$/;"	p	signature:(uint8_t *dst, size_t length, size_t pad_length, SrcType *src, SrcType &min, SrcType &max, SrcType &ratio, float threshold)
ParallelPadQuantize	ops/quantize.h	/^void ParallelPadQuantize(int8_t *dst, size_t length, size_t pad_length, SrcType *src, SrcType &min, SrcType &max, SrcType &ratio, float threshold) {$/;"	f	signature:(int8_t *dst, size_t length, size_t pad_length, SrcType *src, SrcType &min, SrcType &max, SrcType &ratio, float threshold)
ParallelPadQuantize	ops/quantize.h	/^void ParallelPadQuantize(uint8_t *dst, size_t length, size_t pad_length, SrcType *src, SrcType &min, SrcType &max, SrcType &ratio, float threshold) {$/;"	f	signature:(uint8_t *dst, size_t length, size_t pad_length, SrcType *src, SrcType &min, SrcType &max, SrcType &ratio, float threshold)
PostHaddReduce	ops/kernel/shuffle_avx2_sse42_igemm_4xnx8-x64.h	/^static INLINE_SPECIFIER void INLINE_ATTRIBUTE PostHaddReduce($/;"	f	namespace:kernel::igemm4xn	signature:( SIMDSITYPE &c11, SIMDSITYPE &c12, SIMDSITYPE &c21, SIMDSITYPE &c22, SIMDSITYPE &c31, SIMDSITYPE &c32, SIMDSITYPE &c41, SIMDSITYPE &c42, SIMDSITYPE &sum1, SIMDSITYPE &sum2, SIMDSITYPE &sum3, SIMDSITYPE &sum4)
PostReduce	ops/kernel/shuffle_avx2_igemm4x1x32.h	/^static INLINE_SPECIFIER void INLINE_ATTRIBUTE PostReduce(SIMDSITYPE &sum1, SIMDSITYPE &sum2, SIMDSITYPE &sum3, SIMDSITYPE &sum4, SIMDSITYPEHALF &accumulator) {$/;"	f	namespace:kernel::igemm4x1	signature:(SIMDSITYPE &sum1, SIMDSITYPE &sum2, SIMDSITYPE &sum3, SIMDSITYPE &sum4, SIMDSITYPEHALF &accumulator)
PostReduce	ops/kernel/shuffle_avx512_igemm_4x4x64.h	/^static INLINE_SPECIFIER void INLINE_ATTRIBUTE PostReduce(SIMDSITYPE &accumulator,$/;"	f	namespace:kernel::avx512_igemm4x4x64	signature:(SIMDSITYPE &accumulator, SIMDSITYPE &sum00, SIMDSITYPE &sum01, SIMDSITYPE &sum10, SIMDSITYPE &sum11, SIMDSITYPE &sum20, SIMDSITYPE &sum21, SIMDSITYPE &sum30, SIMDSITYPE &sum31)
PrepareData	convolution-x64.h	/^  void PrepareData(size_t batch_size, size_t channels, size_t height_in, size_t width_in, DType *src, float sw_threshold = 255.0f, bool transpose = false) {$/;"	f	struct:FixPointConvolution	access:public	signature:(size_t batch_size, size_t channels, size_t height_in, size_t width_in, DType *src, float sw_threshold = 255.0f, bool transpose = false)
PrepareData	fc-x64.h	/^  void PrepareData(size_t batch_size, size_t channels, DType *src, float sw_threshold = 255.0f) {$/;"	f	struct:FixPointFC	access:public	signature:(size_t batch_size, size_t channels, DType *src, float sw_threshold = 255.0f)
PrepareKernel	convolution-x64.h	/^  void PrepareKernel(float sw_threshold = 127.0f) {$/;"	f	struct:FixPointConvolution	access:public	signature:(float sw_threshold = 127.0f)
PrepareKernel	fc-x64.h	/^  void PrepareKernel(float sw_threshold = 127.0f) {$/;"	f	struct:FixPointFC	access:public	signature:(float sw_threshold = 127.0f)
QUANTIZE_KERNEL_FUNC	ops/shuffle/shuffle_im2col.h	501;"	d
Quantize2D	ops/ops.h	/^void Quantize2D(int8_t *dst, size_t m, size_t n, size_t pad_m, size_t pad_n, SrcType *src, SrcType *min, SrcType *max, SrcType *ratio);$/;"	p	signature:(int8_t *dst, size_t m, size_t n, size_t pad_m, size_t pad_n, SrcType *src, SrcType *min, SrcType *max, SrcType *ratio)
Quantize2D	ops/ops.h	/^void Quantize2D(uint8_t *dst, size_t m, size_t n, size_t pad_m, size_t pad_n, SrcType *src, SrcType *min, SrcType *max, SrcType *ratio);$/;"	p	signature:(uint8_t *dst, size_t m, size_t n, size_t pad_m, size_t pad_n, SrcType *src, SrcType *min, SrcType *max, SrcType *ratio)
QuantizeIm2col	ops/quantize.h	/^void QuantizeIm2col(DType* data,$/;"	f	signature:(DType* data, size_t channels, size_t height, size_t width, size_t kernel_h, size_t kernel_w, size_t pad_h, size_t pad_w, size_t stride_h, size_t stride_w, size_t dilation_h, size_t dilation_w, uint8_t *data_col, DType *min, DType *max, DType *ratio, float sw_threshold = 255.0f)
QuantizeIm2colRef	ops/quantize.h	/^void QuantizeIm2colRef(DType* data,$/;"	f	signature:(DType* data, size_t batch_size, size_t channels, size_t height, size_t width, size_t kernel_h, size_t kernel_w, size_t pad_h, size_t pad_w, size_t stride_h, size_t stride_w, size_t dilation_h, size_t dilation_w, uint8_t* data_col, DType* min, DType* max, DType* ratio, float sw_threshold)
QuantizeKernel	convolution-x64.h	/^  void QuantizeKernel(float sw_threshold) {$/;"	f	struct:ConvKernel	access:public	signature:(float sw_threshold)
QuantizeKernel	fc-x64.h	/^  void QuantizeKernel(float sw_threshold) {$/;"	f	struct:FCKernel	access:public	signature:(float sw_threshold)
QuantizedTensor	tensor.h	/^  QuantizedTensor(Shape quantized_shape, Shape meta_shape, Shape ori_shape) : Tensor<DstType>(quantized_shape),$/;"	f	struct:QuantizedTensor	access:public	signature:(Shape quantized_shape, Shape meta_shape, Shape ori_shape)
QuantizedTensor	tensor.h	/^  QuantizedTensor(Shape quantized_shape, Shape meta_shape, Shape ori_shape, size_t alignment) : Tensor<DstType>(quantized_shape, alignment),$/;"	f	struct:QuantizedTensor	access:public	signature:(Shape quantized_shape, Shape meta_shape, Shape ori_shape, size_t alignment)
QuantizedTensor	tensor.h	/^  QuantizedTensor(Shape quantized_shape, Shape meta_shape, size_t alignment) : Tensor<DstType>(quantized_shape, alignment),$/;"	f	struct:QuantizedTensor	access:public	signature:(Shape quantized_shape, Shape meta_shape, size_t alignment)
QuantizedTensor	tensor.h	/^struct QuantizedTensor : public Tensor<DstType> {$/;"	s	inherits:Tensor
QuantizedTensor::QuantizedTensor	tensor.h	/^  QuantizedTensor(Shape quantized_shape, Shape meta_shape, Shape ori_shape) : Tensor<DstType>(quantized_shape),$/;"	f	struct:QuantizedTensor	access:public	signature:(Shape quantized_shape, Shape meta_shape, Shape ori_shape)
QuantizedTensor::QuantizedTensor	tensor.h	/^  QuantizedTensor(Shape quantized_shape, Shape meta_shape, Shape ori_shape, size_t alignment) : Tensor<DstType>(quantized_shape, alignment),$/;"	f	struct:QuantizedTensor	access:public	signature:(Shape quantized_shape, Shape meta_shape, Shape ori_shape, size_t alignment)
QuantizedTensor::QuantizedTensor	tensor.h	/^  QuantizedTensor(Shape quantized_shape, Shape meta_shape, size_t alignment) : Tensor<DstType>(quantized_shape, alignment),$/;"	f	struct:QuantizedTensor	access:public	signature:(Shape quantized_shape, Shape meta_shape, size_t alignment)
QuantizedTensor::Size	tensor.h	/^  size_t Size() {$/;"	f	struct:QuantizedTensor	access:public	signature:()
QuantizedTensor::max_	tensor.h	/^  Tensor<SrcType> max_;$/;"	m	struct:QuantizedTensor	access:public
QuantizedTensor::min_	tensor.h	/^  Tensor<SrcType> min_;$/;"	m	struct:QuantizedTensor	access:public
QuantizedTensor::ori_shape_	tensor.h	/^  Shape ori_shape_;$/;"	m	struct:QuantizedTensor	access:public
QuantizedTensor::ratio_	tensor.h	/^  Tensor<SrcType> ratio_;$/;"	m	struct:QuantizedTensor	access:public
ROUND_PS	arch/isa/alu.h	89;"	d
ROUND_PS	arch/isa/alu.h	91;"	d
ReOrderResult	ops/kernel/shuffle_avx2_sse42_igemm_4xnx8-x64.h	/^static INLINE_SPECIFIER SIMDSITYPE INLINE_ATTRIBUTE ReOrderResult(SIMDSITYPE &result, SIMDSITYPE &index) {$/;"	f	namespace:kernel::igemm4xn	signature:(SIMDSITYPE &result, SIMDSITYPE &index)
Reduce	ops/kernel/shuffle_avx2_igemm4x1x32.h	/^static INLINE_SPECIFIER void INLINE_ATTRIBUTE Reduce(SIMDSITYPE &c1, SIMDSITYPE &c2, SIMDSITYPE &c3, SIMDSITYPE &c4, \\$/;"	f	namespace:kernel::igemm4x1	signature:(SIMDSITYPE &c1, SIMDSITYPE &c2, SIMDSITYPE &c3, SIMDSITYPE &c4, \ SIMDSITYPE &sum1, SIMDSITYPE &sum2, SIMDSITYPE &sum3, SIMDSITYPE &sum4)
Reduce	ops/kernel/shuffle_avx512_igemm_4x4x64.h	/^static INLINE_SPECIFIER void INLINE_ATTRIBUTE Reduce(SIMDSITYPE &c00, SIMDSITYPE &c01, SIMDSITYPE &c02, SIMDSITYPE &c03,$/;"	f	namespace:kernel::avx512_igemm4x4x64	signature:(SIMDSITYPE &c00, SIMDSITYPE &c01, SIMDSITYPE &c02, SIMDSITYPE &c03, SIMDSITYPE &c10, SIMDSITYPE &c11, SIMDSITYPE &c12, SIMDSITYPE &c13, SIMDSITYPE &c20, SIMDSITYPE &c21, SIMDSITYPE &c22, SIMDSITYPE &c23, SIMDSITYPE &c30, SIMDSITYPE &c31, SIMDSITYPE &c32, SIMDSITYPE &c33, SIMDSITYPE &sum00, SIMDSITYPE &sum01, SIMDSITYPE &sum10, SIMDSITYPE &sum11, SIMDSITYPE &sum20, SIMDSITYPE &sum21, SIMDSITYPE &sum30, SIMDSITYPE &sum31)
Reduce	ops/kernel/shuffle_sse42_igemm2x2x16.h	/^static INLINE_SPECIFIER void INLINE_ATTRIBUTE Reduce(SIMDSITYPE &c11, SIMDSITYPE &c12, SIMDSITYPE &c21, SIMDSITYPE &c22, SIMDSITYPE &accumulator) {$/;"	f	namespace:kernel::sse42_igemm2x2x16	signature:(SIMDSITYPE &c11, SIMDSITYPE &c12, SIMDSITYPE &c21, SIMDSITYPE &c22, SIMDSITYPE &accumulator)
ReduceWrapper	ops/kernel/shuffle_sse42_igemm2x2x16.h	/^static INLINE_SPECIFIER void INLINE_ATTRIBUTE ReduceWrapper(SIMDSITYPE &c11, SIMDSITYPE &c12, SIMDSITYPE &c21, SIMDSITYPE &c22, SIMDSITYPE &accumulator,$/;"	f	namespace:kernel::sse42_igemm2x2x16	signature:(SIMDSITYPE &c11, SIMDSITYPE &c12, SIMDSITYPE &c21, SIMDSITYPE &c22, SIMDSITYPE &accumulator, SIMDSITYPE &threshold, SIMDSITYPE &ones)
RowMajor	ops/ops.h	/^typedef enum ORDER {RowMajor=101, ColMajor=102} ORDER;$/;"	e	enum:ORDER
Run	convolution-x64.h	/^  void Run(float fault_tolerance = 0.5) {$/;"	f	struct:FixPointConvolution	access:public	signature:(float fault_tolerance = 0.5)
Run	fc-x64.h	/^  void Run(float fault_tolerance = 0.5) {$/;"	f	struct:FixPointFC	access:public	signature:(float fault_tolerance = 0.5)
SET1_EPI16	arch/isa/misc.h	10;"	d
SET1_EPI16	arch/isa/misc.h	21;"	d
SET1_EPI16	arch/isa/misc.h	33;"	d
SET1_EPI32	arch/isa/misc.h	11;"	d
SET1_EPI32	arch/isa/misc.h	22;"	d
SET1_EPI8	arch/isa/misc.h	9;"	d
SET1_PS	arch/isa/misc.h	12;"	d
SET1_PS	arch/isa/misc.h	27;"	d
SET1_PS	arch/isa/misc.h	34;"	d
SET1_PS_HALF	arch/isa/misc.h	28;"	d
SET_EPI32	arch/isa/misc.h	15;"	d
SET_EPI32	arch/isa/misc.h	23;"	d
SET_EPI32_HALF	arch/isa/misc.h	24;"	d
SET_EPI64	arch/isa/misc.h	16;"	d
SET_EPI8	arch/isa/misc.h	13;"	d
SET_EPI8	arch/isa/misc.h	14;"	d
SET_EPI8	arch/isa/misc.h	25;"	d
SET_EPI8	arch/isa/misc.h	35;"	d
SET_EPI8_HALF	arch/isa/misc.h	26;"	d
SHUFFLE_EPI32	arch/isa/shuffle.h	39;"	d
SHUFFLE_EPI8	arch/isa/shuffle.h	34;"	d
SHUFFLE_EPI8	arch/isa/shuffle.h	36;"	d
SHUFFLE_EPI8	arch/isa/shuffle.h	40;"	d
SHUFFLE_EPI8_HALF	arch/isa/shuffle.h	37;"	d
SHUFFLE_PS	arch/isa/shuffle.h	29;"	d
SIMDFindMinMaxSPValue	ops/find_extreme.h	/^void SIMDFindMinMaxSPValue(const float *p, size_t length, float &min, float &max) {$/;"	f	signature:(const float *p, size_t length, float &min, float &max)
SIMDPDTYPE	arch/isa/dtype.h	11;"	d
SIMDPDTYPE	arch/isa/dtype.h	20;"	d
SIMDPDTYPE	arch/isa/dtype.h	25;"	d
SIMDPDTYPEHALF	arch/isa/dtype.h	12;"	d
SIMDPDTYPEHALF	arch/isa/dtype.h	21;"	d
SIMDPDTYPEQUARTER	arch/isa/dtype.h	13;"	d
SIMDPSTYPE	arch/isa/dtype.h	18;"	d
SIMDPSTYPE	arch/isa/dtype.h	24;"	d
SIMDPSTYPE	arch/isa/dtype.h	8;"	d
SIMDPSTYPEHALF	arch/isa/dtype.h	19;"	d
SIMDPSTYPEHALF	arch/isa/dtype.h	9;"	d
SIMDPSTYPEQUARTER	arch/isa/dtype.h	10;"	d
SIMDSITYPE	arch/isa/dtype.h	16;"	d
SIMDSITYPE	arch/isa/dtype.h	23;"	d
SIMDSITYPE	arch/isa/dtype.h	5;"	d
SIMDSITYPEHALF	arch/isa/dtype.h	17;"	d
SIMDSITYPEHALF	arch/isa/dtype.h	6;"	d
SIMDSITYPEQUARTER	arch/isa/dtype.h	7;"	d
SRLI_EPI64	arch/isa/shuffle.h	68;"	d
SRLI_SI128	arch/isa/shuffle.h	70;"	d
SRLI_SI128_HALF	arch/isa/shuffle.h	67;"	d
SSE42Kernel16Quantize	ops/quantize.h	/^INLINE_SPECIFIER void INLINE_ATTRIBUTE SSE42Kernel16Quantize(uint8_t *dst, float *src, SIMDPSTYPE &scale, SIMDPSTYPE &bias) {$/;"	f	signature:(uint8_t *dst, float *src, SIMDPSTYPE &scale, SIMDPSTYPE &bias)
SSE42Kernel2x2x16	ops/kernel/shuffle_sse42_igemm2x2x16.h	/^static INLINE_SPECIFIER void INLINE_ATTRIBUTE SSE42Kernel2x2x16(int8_t* &pa, uint8_t* &pb,$/;"	f	namespace:kernel::sse42_igemm2x2x16	signature:(int8_t* &pa, uint8_t* &pb, SIMDSITYPE &c11, SIMDSITYPE &c12, SIMDSITYPE &c21, SIMDSITYPE &c22)
SSE42Kernel4x4x8	ops/kernel/shuffle_avx2_sse42_igemm_4xnx8-x64.h	/^static INLINE_SPECIFIER void INLINE_ATTRIBUTE SSE42Kernel4x4x8(int8_t* &pa, uint8_t* &pb,$/;"	f	namespace:kernel::igemm4xn	signature:(int8_t* &pa, uint8_t* &pb, SIMDSITYPE &c11, SIMDSITYPE &c12, SIMDSITYPE &c21, SIMDSITYPE &c22, SIMDSITYPE &c31, SIMDSITYPE &c32, SIMDSITYPE &c41, SIMDSITYPE &c42)
SSE42Kernel8Quantize	ops/quantize.h	/^INLINE_SPECIFIER void INLINE_ATTRIBUTE SSE42Kernel8Quantize(uint8_t *dst, float *src, SIMDPSTYPE &scale, SIMDPSTYPE &bias) {$/;"	f	signature:(uint8_t *dst, float *src, SIMDPSTYPE &scale, SIMDPSTYPE &bias)
SSE4_2	arch/config.h	/^typedef enum CPU_FEATURE {SSE4_2=0, AVX2_FMA=1, AVX_512=2} CPU_FEATURE;$/;"	e	enum:CPU_FEATURE
STORE128_PS	arch/isa/store.h	15;"	d
STORE256_PS	arch/isa/store.h	7;"	d
STORELO_EPI64	arch/isa/store.h	34;"	d
STORELO_EPI64_HALF	arch/isa/store.h	28;"	d
STOREU128_PS	arch/isa/store.h	13;"	d
STOREU256_PS	arch/isa/store.h	5;"	d
STOREU256_PS_HALF	arch/isa/store.h	9;"	d
STOREU_PS	arch/isa/store.h	14;"	d
STOREU_PS	arch/isa/store.h	6;"	d
STOREU_SI	arch/isa/store.h	27;"	d
STOREU_SI	arch/isa/store.h	33;"	d
STOREU_SI128	arch/isa/store.h	32;"	d
STOREU_SI256	arch/isa/store.h	26;"	d
STOREU_SI_QUARTER	arch/isa/store.h	21;"	d
STORE_PS	arch/isa/store.h	16;"	d
STORE_PS	arch/isa/store.h	8;"	d
STORE_PS_HALF	arch/isa/store.h	11;"	d
STORE_SI	arch/isa/store.h	25;"	d
STORE_SI	arch/isa/store.h	31;"	d
STORE_SI128	arch/isa/store.h	30;"	d
STORE_SI256	arch/isa/store.h	24;"	d
STREAMLOAD256_PS	arch/isa/load.h	32;"	d
STREAMLOAD_PS	arch/isa/load.h	33;"	d
STREAMLOAD_SI	arch/isa/load.h	12;"	d
STREAMLOAD_SI	arch/isa/load.h	17;"	d
STREAMLOAD_SI128	arch/isa/load.h	16;"	d
STREAMLOAD_SI256	arch/isa/load.h	11;"	d
STREAMSTORE_PS	arch/isa/store.h	10;"	d
SUB_EPI16	arch/isa/alu.h	29;"	d
SUB_EPI16	arch/isa/alu.h	39;"	d
SUB_EPI16	arch/isa/alu.h	51;"	d
SUB_EPI32	arch/isa/alu.h	25;"	d
SUB_EPI32	arch/isa/alu.h	35;"	d
SUB_EPI32	arch/isa/alu.h	47;"	d
SUB_PS	arch/isa/alu.h	14;"	d
SUB_PS	arch/isa/alu.h	19;"	d
SUB_PS	arch/isa/alu.h	9;"	d
ScalarBN	ops/kernel-common.h	/^static INLINE_SPECIFIER void INLINE_ATTRIBUTE ScalarBN(float &result, const float &global_mean, const float &mul_variance_coeff, const float &scale, const float &shift) {$/;"	f	signature:(float &result, const float &global_mean, const float &mul_variance_coeff, const float &scale, const float &shift)
SetData	tensor.h	/^  void SetData(DType *data) {$/;"	f	struct:Tensor	access:public	signature:(DType *data)
SetLayout	convolution-x64.h	/^  void SetLayout(LAYOUT layout) {$/;"	f	struct:ConvData	access:public	signature:(LAYOUT layout)
SetLayout	convolution-x64.h	/^  void SetLayout(LAYOUT layout) {$/;"	f	struct:ConvKernel	access:public	signature:(LAYOUT layout)
SetupConvParameter	convolution-x64.h	/^  void SetupConvParameter(size_t channel_out, size_t channel_in, size_t group, size_t kernel_h, size_t kernel_w,$/;"	f	struct:FixPointConvolution	access:public	signature:(size_t channel_out, size_t channel_in, size_t group, size_t kernel_h, size_t kernel_w, size_t stride_h, size_t stride_w, size_t dilation_h, size_t dilation_w, size_t pad_h, size_t pad_w, DType *src, DType *bias, bool conv_relu_fusion = false, bool conv_bn_fusion = false, bool conv_bn_relu_fusion = false, bool conv_relu_bn_fusion = false, DType *global_mean = NULL, DType *global_variance = NULL, DType epison = 0.0f, DType *scale = NULL, DType *shift = NULL)
SetupFCParameter	fc-x64.h	/^  void SetupFCParameter(size_t channel_out, size_t channel_in, DType *src, DType *bias, bool relu_fusion = false) {$/;"	f	struct:FixPointFC	access:public	signature:(size_t channel_out, size_t channel_in, DType *src, DType *bias, bool relu_fusion = false)
SetupParameter	convolution-x64.h	/^  void SetupParameter(size_t batch_size, size_t channels, size_t group, size_t height_in, size_t width_in, SrcType *src) {$/;"	f	struct:ConvData	access:public	signature:(size_t batch_size, size_t channels, size_t group, size_t height_in, size_t width_in, SrcType *src)
SetupParameter	convolution-x64.h	/^  void SetupParameter(size_t channel_out, size_t channel_in, size_t group, size_t kernel_h, size_t kernel_w, \\$/;"	f	struct:ConvKernel	access:public	signature:(size_t channel_out, size_t channel_in, size_t group, size_t kernel_h, size_t kernel_w, \ size_t stride_h, size_t stride_w, size_t pad_h, size_t pad_w, SrcType *src, SrcType *bias)
SetupParameter	fc-x64.h	/^  void SetupParameter(size_t batch_size, size_t channels, SrcType *src) {$/;"	f	struct:FCData	access:public	signature:(size_t batch_size, size_t channels, SrcType *src)
SetupParameter	fc-x64.h	/^  void SetupParameter(size_t channel_out, size_t channel_in, SrcType *src, SrcType *bias) {$/;"	f	struct:FCKernel	access:public	signature:(size_t channel_out, size_t channel_in, SrcType *src, SrcType *bias)
SetupTargetParameter	convolution-x64.h	/^  void SetupTargetParameter(DType *dst) {$/;"	f	struct:FixPointConvolution	access:public	signature:(DType *dst)
SetupTargetParameter	fc-x64.h	/^  void SetupTargetParameter(DType *dst) {$/;"	f	struct:FixPointFC	access:public	signature:(DType *dst)
Shape	tensor.h	/^  Shape() : dim_(0), shape_(0, 0) {$/;"	f	struct:Shape	access:public	signature:()
Shape	tensor.h	/^  Shape(Shape *p) : dim_(p->dim_) , shape_(p->shape_) {$/;"	f	struct:Shape	access:public	signature:(Shape *p)
Shape	tensor.h	/^  Shape(size_t dim) : dim_(dim), shape_(dim, 0) {$/;"	f	struct:Shape	access:public	signature:(size_t dim)
Shape	tensor.h	/^  Shape(size_t dim, size_t *shape) : dim_(dim), shape_(dim) {$/;"	f	struct:Shape	access:public	signature:(size_t dim, size_t *shape)
Shape	tensor.h	/^struct Shape {$/;"	s
Shape::Count	tensor.h	/^  size_t Count() {$/;"	f	struct:Shape	access:public	signature:()
Shape::Shape	tensor.h	/^  Shape() : dim_(0), shape_(0, 0) {$/;"	f	struct:Shape	access:public	signature:()
Shape::Shape	tensor.h	/^  Shape(Shape *p) : dim_(p->dim_) , shape_(p->shape_) {$/;"	f	struct:Shape	access:public	signature:(Shape *p)
Shape::Shape	tensor.h	/^  Shape(size_t dim) : dim_(dim), shape_(dim, 0) {$/;"	f	struct:Shape	access:public	signature:(size_t dim)
Shape::Shape	tensor.h	/^  Shape(size_t dim, size_t *shape) : dim_(dim), shape_(dim) {$/;"	f	struct:Shape	access:public	signature:(size_t dim, size_t *shape)
Shape::dim_	tensor.h	/^  size_t dim_;$/;"	m	struct:Shape	access:public
Shape::operator []	tensor.h	/^  size_t operator[] (size_t index) {$/;"	f	struct:Shape	access:public	signature:(size_t index)
Shape::shape_	tensor.h	/^  std::vector<size_t> shape_;$/;"	m	struct:Shape	access:public
ShuffleGEMM	ops/shuffle/shuffle_igemm.h	/^void ShuffleGEMM(int8_t* pa, uint8_t* pb, int* pc, size_t m, size_t n, size_t k,$/;"	f	namespace:shuffle	signature:(int8_t* pa, uint8_t* pb, int* pc, size_t m, size_t n, size_t k, float fault_tolerance, size_t pad_m, size_t pad_n, GEMM_KERNEL kernel)
Size	tensor.h	/^  size_t Size() {$/;"	f	struct:QuantizedTensor	access:public	signature:()
Size	tensor.h	/^  size_t Size() {$/;"	f	struct:Tensor	access:public	signature:()
StreamFMAResult	ops/kernel/shuffle_avx2_igemm4x1x32.h	/^static INLINE_SPECIFIER void INLINE_ATTRIBUTE StreamFMAResult(SIMDSITYPEHALF &accumulator, float* result[], size_t length, size_t valid_lanes, size_t i_index, size_t j_index,$/;"	f	namespace:kernel::igemm4x1	signature:(SIMDSITYPEHALF &accumulator, float* result[], size_t length, size_t valid_lanes, size_t i_index, size_t j_index, float* ratio_a, float* ratio_b, float *min_b, float *kernel_sum, float *bias, bool conv_relu_fusion, bool conv_bn_fusion, bool conv_bn_relu_fusion, bool conv_relu_bn_fusion, float *global_mean, float *mul_variance_coeff, float *scale, float *shift)
TENSOR_X64	tensor.h	2;"	d
TEST	tests/test_conv.cpp	/^TEST(CONVOLUTION, TEST_CONVOLUTION){$/;"	f	signature:(CONVOLUTION, TEST_CONVOLUTION)
TEST	tests/test_cpu_conv.cpp	/^TEST(CONVOLUTION, TEST_CONVOLUTION){$/;"	f	signature:(CONVOLUTION, TEST_CONVOLUTION)
TEST	tests/test_fc.cpp	/^TEST(FC, TEST_FC){$/;"	f	signature:(FC, TEST_FC)
TEST	tests/test_find_extreme.cpp	/^TEST(Find_Extreme, Find_Extreme_Float32) {$/;"	f	signature:(Find_Extreme, Find_Extreme_Float32)
TEST	tests/test_find_extreme.cpp	/^TEST(Find_Extreme, Find_Extreme_Float64) {$/;"	f	signature:(Find_Extreme, Find_Extreme_Float64)
TEST	tests/test_gemm.cpp	/^TEST(GEMM, ConstMixPrecisionGEMM){$/;"	f	signature:(GEMM, ConstMixPrecisionGEMM)
TEST	tests/test_gemm.cpp	/^TEST(GEMM, RandMixPrecisionGEMM){$/;"	f	signature:(GEMM, RandMixPrecisionGEMM)
TEST	tests/test_layout.cpp	/^TEST(LAYOUT, NCHW2NHWC){$/;"	f	signature:(LAYOUT, NCHW2NHWC)
TEST	tests/test_layout.cpp	/^TEST(LAYOUT, NHWC2NCHW){$/;"	f	signature:(LAYOUT, NHWC2NCHW)
TEST	tests/test_quantize.cpp	/^TEST(Im2Col, PADQuantizeShuffleNCHWIM2COL) {$/;"	f	signature:(Im2Col, PADQuantizeShuffleNCHWIM2COL)
TEST	tests/test_quantize.cpp	/^TEST(Im2Col, PADQuantizeShuffleNHWCIM2COL) {$/;"	f	signature:(Im2Col, PADQuantizeShuffleNHWCIM2COL)
TEST	tests/test_quantize.cpp	/^TEST(Quantize, PADQuantizeShuffle2DInt8) {$/;"	f	signature:(Quantize, PADQuantizeShuffle2DInt8)
TEST	tests/test_quantize.cpp	/^TEST(Quantize, PADQuantizeShuffle2DUInt8) {$/;"	f	signature:(Quantize, PADQuantizeShuffle2DUInt8)
TEST	tests/test_quantize.cpp	/^TEST(Quantize, QuantizeDouble2Int8) {$/;"	f	signature:(Quantize, QuantizeDouble2Int8)
TEST	tests/test_quantize.cpp	/^TEST(Quantize, QuantizeDouble2UInt8) {$/;"	f	signature:(Quantize, QuantizeDouble2UInt8)
TEST	tests/test_quantize.cpp	/^TEST(Quantize, QuantizeFloat2Int8) {$/;"	f	signature:(Quantize, QuantizeFloat2Int8)
TEST	tests/test_quantize.cpp	/^TEST(Quantize, QuantizeFloat2UInt8) {$/;"	f	signature:(Quantize, QuantizeFloat2UInt8)
TESTZ_SI	arch/isa/alu.h	44;"	d
TESTZ_SI	arch/isa/alu.h	56;"	d
TESTZ_SI128	arch/isa/alu.h	55;"	d
TESTZ_SI256	arch/isa/alu.h	43;"	d
TEST_GROUP	tests/test_conv.cpp	/^TEST_GROUP(CONVOLUTION) {$/;"	f	signature:(CONVOLUTION)
TEST_GROUP	tests/test_cpu_conv.cpp	/^TEST_GROUP(CONVOLUTION) {$/;"	f	signature:(CONVOLUTION)
TEST_GROUP	tests/test_fc.cpp	/^TEST_GROUP(FC) {$/;"	f	signature:(FC)
TEST_GROUP	tests/test_find_extreme.cpp	/^TEST_GROUP(Find_Extreme) {$/;"	f	signature:(Find_Extreme)
TEST_GROUP	tests/test_gemm.cpp	/^TEST_GROUP(GEMM) {$/;"	f	signature:(GEMM)
TEST_GROUP	tests/test_layout.cpp	/^TEST_GROUP(LAYOUT) {$/;"	f	signature:(LAYOUT)
TEST_GROUP	tests/test_quantize.cpp	/^TEST_GROUP(Im2Col) {$/;"	f	signature:(Im2Col)
TEST_GROUP	tests/test_quantize.cpp	/^TEST_GROUP(Quantize) {$/;"	f	signature:(Quantize)
TRANSPOSE	ops/ops.h	/^typedef enum TRANSPOSE {NoTrans=111, Trans=112} TRANSPOSE;$/;"	g
TRANSPOSE	ops/ops.h	/^typedef enum TRANSPOSE {NoTrans=111, Trans=112} TRANSPOSE;$/;"	t	typeref:enum:TRANSPOSE
Tensor	tensor.h	/^  Tensor(Shape s) : shape_(s), data_(NULL), data_owner_(false) {$/;"	f	struct:Tensor	access:public	signature:(Shape s)
Tensor	tensor.h	/^  Tensor(Shape s, DType *data) : shape_(s), data_(data), data_owner_(false){$/;"	f	struct:Tensor	access:public	signature:(Shape s, DType *data)
Tensor	tensor.h	/^  Tensor(Shape s, size_t alignment) : shape_(s), data_(NULL), data_owner_(true) {$/;"	f	struct:Tensor	access:public	signature:(Shape s, size_t alignment)
Tensor	tensor.h	/^struct Tensor {$/;"	s
Tensor::Allocate	tensor.h	/^  void Allocate(size_t alignment = 64) {$/;"	f	struct:Tensor	access:public	signature:(size_t alignment = 64)
Tensor::Count	tensor.h	/^  size_t Count() {$/;"	f	struct:Tensor	access:public	signature:()
Tensor::ExclusiveSize	tensor.h	/^  size_t ExclusiveSize() {$/;"	f	struct:Tensor	access:public	signature:()
Tensor::SetData	tensor.h	/^  void SetData(DType *data) {$/;"	f	struct:Tensor	access:public	signature:(DType *data)
Tensor::Size	tensor.h	/^  size_t Size() {$/;"	f	struct:Tensor	access:public	signature:()
Tensor::Tensor	tensor.h	/^  Tensor(Shape s) : shape_(s), data_(NULL), data_owner_(false) {$/;"	f	struct:Tensor	access:public	signature:(Shape s)
Tensor::Tensor	tensor.h	/^  Tensor(Shape s, DType *data) : shape_(s), data_(data), data_owner_(false){$/;"	f	struct:Tensor	access:public	signature:(Shape s, DType *data)
Tensor::Tensor	tensor.h	/^  Tensor(Shape s, size_t alignment) : shape_(s), data_(NULL), data_owner_(true) {$/;"	f	struct:Tensor	access:public	signature:(Shape s, size_t alignment)
Tensor::data_	tensor.h	/^  DType *data_;$/;"	m	struct:Tensor	access:public
Tensor::data_owner_	tensor.h	/^  bool data_owner_;$/;"	m	struct:Tensor	access:public
Tensor::operator []	tensor.h	/^  size_t operator[] (size_t index) {$/;"	f	struct:Tensor	access:public	signature:(size_t index)
Tensor::shape_	tensor.h	/^  Shape shape_;$/;"	m	struct:Tensor	access:public
Tensor::~Tensor	tensor.h	/^  ~Tensor() {$/;"	f	struct:Tensor	access:public	signature:()
TestConvolutionSaveResult	tests/test_conv.cpp	/^void TestConvolutionSaveResult(size_t data_batch, size_t data_channel, size_t data_height, size_t data_width, size_t group, size_t filter_num, size_t filter_height, size_t filter_width, size_t stride_h, size_t stride_w, size_t pad_h, size_t pad_w, size_t dilation_h, size_t dilation_w) {$/;"	f	signature:(size_t data_batch, size_t data_channel, size_t data_height, size_t data_width, size_t group, size_t filter_num, size_t filter_height, size_t filter_width, size_t stride_h, size_t stride_w, size_t pad_h, size_t pad_w, size_t dilation_h, size_t dilation_w)
TestFC	tests/test_fc.cpp	/^void TestFC(size_t data_batch, size_t data_channel, size_t filter_num) {$/;"	f	signature:(size_t data_batch, size_t data_channel, size_t filter_num)
Trans	ops/ops.h	/^typedef enum TRANSPOSE {NoTrans=111, Trans=112} TRANSPOSE;$/;"	e	enum:TRANSPOSE
TransformLayout	ops/layout.h	/^void TransformLayout(LAYOUT dst_layout, LAYOUT src_layout, DType *dst, DType *src, size_t batch_size, size_t channels, size_t hxw) {$/;"	f	signature:(LAYOUT dst_layout, LAYOUT src_layout, DType *dst, DType *src, size_t batch_size, size_t channels, size_t hxw)
TransformLayout	ops/ops.h	/^void TransformLayout(LAYOUT dst_layout, LAYOUT src_layout, DType *dst, DType *src, size_t batch_size, size_t channels, size_t hxw);$/;"	p	signature:(LAYOUT dst_layout, LAYOUT src_layout, DType *dst, DType *src, size_t batch_size, size_t channels, size_t hxw)
Transpose	c_api.cc	/^void Transpose(float *dst, float *src, size_t m, size_t n) {$/;"	f	signature:(float *dst, float *src, size_t m, size_t n)
Transpose	c_api_rt.cc	/^void Transpose(float *dst, float *src, size_t m, size_t n) {$/;"	f	signature:(float *dst, float *src, size_t m, size_t n)
Transpose	nn-fixpoint.h	/^  API_PREFIX void Transpose(float *dst, float *src, size_t m, size_t n);$/;"	p	signature:(float *dst, float *src, size_t m, size_t n)
Transpose	ops/layout.h	/^void Transpose(DType *dst, DType *src, size_t m, size_t n) {$/;"	f	signature:(DType *dst, DType *src, size_t m, size_t n)
Transpose	ops/ops.h	/^void Transpose(DType *dst, DType *src, size_t m, size_t n);$/;"	p	signature:(DType *dst, DType *src, size_t m, size_t n)
TransposeRT	c_api_rt.cc	/^void (*TransposeRT)(float *dst, float *src, size_t m, size_t n);$/;"	v
UNPACKHI_EPI16	arch/isa/shuffle.h	50;"	d
UNPACKHI_EPI32	arch/isa/shuffle.h	52;"	d
UNPACKHI_EPI64	arch/isa/shuffle.h	54;"	d
UNPACKHI_PD	arch/isa/shuffle.h	48;"	d
UNPACKHI_PD	arch/isa/shuffle.h	59;"	d
UNPACKHI_PS	arch/isa/shuffle.h	46;"	d
UNPACKHI_PS	arch/isa/shuffle.h	57;"	d
UNPACKLO_EPI16	arch/isa/shuffle.h	49;"	d
UNPACKLO_EPI32	arch/isa/shuffle.h	51;"	d
UNPACKLO_EPI32	arch/isa/shuffle.h	60;"	d
UNPACKLO_EPI64	arch/isa/shuffle.h	53;"	d
UNPACKLO_EPI64	arch/isa/shuffle.h	61;"	d
UNPACKLO_PD	arch/isa/shuffle.h	47;"	d
UNPACKLO_PD	arch/isa/shuffle.h	58;"	d
UNPACKLO_PS	arch/isa/shuffle.h	45;"	d
UNPACKLO_PS	arch/isa/shuffle.h	56;"	d
UNROLL_ATTRIBUTE	base.h	43;"	d
UNROLL_ATTRIBUTE	base.h	46;"	d
UNROLL_ATTRIBUTE	base.h	49;"	d
UNROLL_NUM	base.h	24;"	d
UNROLL_NUM	ops/shuffle/shuffle_igemm.h	7;"	d
UnGroupKernel	ops/group.h	/^void UnGroupKernel(DType* dst[], DType *src, size_t group, size_t channel_out, size_t channel_in, size_t hxw) {$/;"	f	signature:(DType* dst[], DType *src, size_t group, size_t channel_out, size_t channel_in, size_t hxw)
UnGroupKernel	ops/ops.h	/^void UnGroupKernel(DType* dst[], DType *src, size_t group, size_t channel_out, size_t channel_in, size_t hxw);$/;"	p	signature:(DType* dst[], DType *src, size_t group, size_t channel_out, size_t channel_in, size_t hxw)
ZEROS	arch/isa/misc.h	19;"	d
ZEROS	arch/isa/misc.h	31;"	d
ZEROS	arch/isa/misc.h	7;"	d
ZERO_PS	arch/isa/misc.h	17;"	d
ZERO_PS	arch/isa/misc.h	29;"	d
ZERO_PS	arch/isa/misc.h	36;"	d
aligned_free	alloc.h	/^void aligned_free(void* p) {$/;"	f	signature:(void* p)
aligned_malloc	alloc.h	/^void aligned_malloc(void** p, size_t alignment, size_t size) {$/;"	f	signature:(void** p, size_t alignment, size_t size)
avx512_igemm4x4x64	ops/kernel/shuffle_avx512_igemm_4x4x64.h	/^namespace avx512_igemm4x4x64 {$/;"	n	namespace:kernel
batch_size_	convolution-x64.h	/^  size_t batch_size_;$/;"	m	struct:ConvData	access:public
batch_size_	convolution-x64.h	/^  size_t batch_size_;$/;"	m	struct:FixPointConvolution	access:public
batch_size_	fc-x64.h	/^  size_t batch_size_;$/;"	m	struct:FCData	access:public
batch_size_	fc-x64.h	/^  size_t batch_size_;$/;"	m	struct:FixPointFC	access:public
bias_	convolution-x64.h	/^  DType *bias_;$/;"	m	struct:FixPointConvolution	access:public
bias_	convolution-x64.h	/^  SrcType *bias_;$/;"	m	struct:ConvKernel	access:public
bias_	fc-x64.h	/^  DType *bias_;$/;"	m	struct:FixPointFC	access:public
bias_	fc-x64.h	/^  SrcType *bias_;$/;"	m	struct:FCKernel	access:public
cache_coherency_line_size	arch/cpuid.h	/^  unsigned int cache_coherency_line_size;$/;"	m	struct:cache_info	access:public
cache_id	arch/cpuid.h	/^  int cache_id;$/;"	m	struct:cache_info	access:public
cache_info	arch/cpuid.h	/^struct cache_info {$/;"	s
cache_info::cache_coherency_line_size	arch/cpuid.h	/^  unsigned int cache_coherency_line_size;$/;"	m	struct:cache_info	access:public
cache_info::cache_id	arch/cpuid.h	/^  int cache_id;$/;"	m	struct:cache_info	access:public
cache_info::cache_level	arch/cpuid.h	/^  int cache_level;$/;"	m	struct:cache_info	access:public
cache_info::cache_physical_line_partitions	arch/cpuid.h	/^  unsigned int cache_physical_line_partitions;$/;"	m	struct:cache_info	access:public
cache_info::cache_sets	arch/cpuid.h	/^  unsigned int cache_sets;$/;"	m	struct:cache_info	access:public
cache_info::cache_total_size	arch/cpuid.h	/^  size_t cache_total_size;$/;"	m	struct:cache_info	access:public
cache_info::cache_type_string	arch/cpuid.h	/^  std::string cache_type_string;$/;"	m	struct:cache_info	access:public
cache_info::cache_ways_of_associativity	arch/cpuid.h	/^  unsigned int cache_ways_of_associativity;$/;"	m	struct:cache_info	access:public
cache_level	arch/cpuid.h	/^  int cache_level;$/;"	m	struct:cache_info	access:public
cache_physical_line_partitions	arch/cpuid.h	/^  unsigned int cache_physical_line_partitions;$/;"	m	struct:cache_info	access:public
cache_sets	arch/cpuid.h	/^  unsigned int cache_sets;$/;"	m	struct:cache_info	access:public
cache_total_size	arch/cpuid.h	/^  size_t cache_total_size;$/;"	m	struct:cache_info	access:public
cache_type_string	arch/cpuid.h	/^  std::string cache_type_string;$/;"	m	struct:cache_info	access:public
cache_ways_of_associativity	arch/cpuid.h	/^  unsigned int cache_ways_of_associativity;$/;"	m	struct:cache_info	access:public
channel_in_	convolution-x64.h	/^  size_t channel_in_;$/;"	m	struct:ConvKernel	access:public
channel_in_	convolution-x64.h	/^  size_t channel_in_;$/;"	m	struct:FixPointConvolution	access:public
channel_in_	fc-x64.h	/^  size_t channel_in_;$/;"	m	struct:FCKernel	access:public
channel_in_	fc-x64.h	/^  size_t channel_in_;$/;"	m	struct:FixPointFC	access:public
channel_in_per_group_	convolution-x64.h	/^  size_t channel_in_per_group_;$/;"	m	struct:ConvKernel	access:public
channel_in_per_group_	convolution-x64.h	/^  size_t channel_in_per_group_;$/;"	m	struct:FixPointConvolution	access:public
channel_out_	convolution-x64.h	/^  size_t channel_out_;$/;"	m	struct:ConvKernel	access:public
channel_out_	convolution-x64.h	/^  size_t channel_out_;$/;"	m	struct:FixPointConvolution	access:public
channel_out_	fc-x64.h	/^  size_t channel_out_;$/;"	m	struct:FCKernel	access:public
channel_out_	fc-x64.h	/^  size_t channel_out_;$/;"	m	struct:FixPointFC	access:public
channel_out_per_group_	convolution-x64.h	/^  size_t channel_out_per_group_;$/;"	m	struct:ConvKernel	access:public
channel_out_per_group_	convolution-x64.h	/^  size_t channel_out_per_group_;$/;"	m	struct:FixPointConvolution	access:public
channel_per_group_	convolution-x64.h	/^  size_t channel_per_group_;$/;"	m	struct:ConvData	access:public
channel_per_group_	fc-x64.h	/^  size_t channel_per_group_;$/;"	m	struct:FCData	access:public
channels_	convolution-x64.h	/^  size_t channels_;$/;"	m	struct:ConvData	access:public
channels_	fc-x64.h	/^  size_t channels_;$/;"	m	struct:FCData	access:public
conv_bn_fusion_	convolution-x64.h	/^  bool conv_bn_fusion_;$/;"	m	struct:FixPointConvolution	access:public
conv_bn_relu_fusion_	convolution-x64.h	/^  bool conv_bn_relu_fusion_;$/;"	m	struct:FixPointConvolution	access:public
conv_data_desc_	base_convolution.h	/^  const ConvolutionDataDesc &conv_data_desc_;$/;"	m	struct:BaseConvolutionAlgo	access:protected
conv_kernel_desc_	base_convolution.h	/^  const ConvolutionKernelDesc &conv_kernel_desc_;$/;"	m	struct:BaseConvolutionAlgo	access:protected
conv_relu_bn_fusion_	convolution-x64.h	/^  bool conv_relu_bn_fusion_;$/;"	m	struct:FixPointConvolution	access:public
conv_relu_fusion_	convolution-x64.h	/^  bool conv_relu_fusion_;$/;"	m	struct:FixPointConvolution	access:public
convdata_	convolution-x64.h	/^  struct ConvData<DType, uint8_t, data_shuffle_rows, shuffle_cols> convdata_;$/;"	m	struct:FixPointConvolution	typeref:struct:FixPointConvolution::ConvData	access:public
convkernel_	convolution-x64.h	/^  struct ConvKernel<DType, int8_t, weight_shuffle_rows, shuffle_cols> convkernel_;$/;"	m	struct:FixPointConvolution	typeref:struct:FixPointConvolution::ConvKernel	access:public
cpuid_caches	arch/cpuid.h	/^int cpuid_caches(int cache_id, struct cache_info& info) {$/;"	f	signature:(int cache_id, struct cache_info& info)
cpuid_support_feature	arch/cpuid.h	/^bool cpuid_support_feature(CPU_FEATURE f) {$/;"	f	signature:(CPU_FEATURE f)
data	nn-fixpoint.h	/^  void* data;$/;"	m	struct:FPTensorDesc	access:public
data	nn-fixpoint.h	/^  void* data;$/;"	m	struct:FixTensorDesc	access:public
data_	tensor.h	/^  DType *data_;$/;"	m	struct:Tensor	access:public
data_channels_	convolution-x64.h	/^  size_t data_channels_;$/;"	m	struct:FixPointConvolution	access:public
data_channels_	fc-x64.h	/^  size_t data_channels_;$/;"	m	struct:FixPointFC	access:public
data_owner_	tensor.h	/^  bool data_owner_;$/;"	m	struct:Tensor	access:public
datasrc_	convolution-x64.h	/^  DType *datasrc_;$/;"	m	struct:FixPointConvolution	access:public
datasrc_	fc-x64.h	/^  DType *datasrc_;$/;"	m	struct:FixPointFC	access:public
dilation_h_	convolution-x64.h	/^  size_t dilation_h_;$/;"	m	struct:FixPointConvolution	access:public
dilation_w_	convolution-x64.h	/^  size_t dilation_w_;$/;"	m	struct:FixPointConvolution	access:public
dim	nn-fixpoint.h	/^  size_t dim;$/;"	m	struct:FPTensorDesc	access:public
dim	nn-fixpoint.h	/^  size_t dim;$/;"	m	struct:FixTensorDesc	access:public
dim_	tensor.h	/^  size_t dim_;$/;"	m	struct:Shape	access:public
dst_	convolution-x64.h	/^  DType *dst_;$/;"	m	struct:FixPointConvolution	access:public
dst_	convolution-x64.h	/^  std::vector<QuantizedTensor<SrcType, DstType>*> dst_;$/;"	m	struct:ConvData	access:public
dst_	convolution-x64.h	/^  std::vector<QuantizedTensor<SrcType, DstType>*> dst_;$/;"	m	struct:ConvKernel	access:public
dst_	fc-x64.h	/^  DType *dst_;$/;"	m	struct:FixPointFC	access:public
dst_	fc-x64.h	/^  QuantizedTensor<SrcType, DstType>* dst_;$/;"	m	struct:FCData	access:public
dst_	fc-x64.h	/^  QuantizedTensor<SrcType, DstType>* dst_;$/;"	m	struct:FCKernel	access:public
enable_internal_layout_	convolution-x64.h	/^  bool enable_internal_layout_;$/;"	m	struct:FixPointConvolution	access:public
epison_	convolution-x64.h	/^  DType epison_;$/;"	m	struct:FixPointConvolution	access:public
fcdata_	fc-x64.h	/^  struct FCData<DType, uint8_t, data_shuffle_rows, shuffle_cols, layout> fcdata_;$/;"	m	struct:FixPointFC	typeref:struct:FixPointFC::FCData	access:public
fckernel_	fc-x64.h	/^  struct FCKernel<DType, int8_t, weight_shuffle_rows, shuffle_cols, layout> fckernel_;$/;"	m	struct:FixPointFC	typeref:struct:FixPointFC::FCKernel	access:public
free_shared_library	c_api_rt.cc	/^void __attribute__((destructor)) free_shared_library() {$/;"	f	signature:()
global_mean_	convolution-x64.h	/^  DType *global_mean_;$/;"	m	struct:FixPointConvolution	access:public
global_variance_	convolution-x64.h	/^  DType *global_variance_;$/;"	m	struct:FixPointConvolution	access:public
group_	convolution-x64.h	/^  size_t group_;$/;"	m	struct:ConvData	access:public
group_	convolution-x64.h	/^  size_t group_;$/;"	m	struct:ConvKernel	access:public
group_	convolution-x64.h	/^  size_t group_;$/;"	m	struct:FixPointConvolution	access:public
group_	fc-x64.h	/^  size_t group_;$/;"	m	struct:FCData	access:public
group_src_	convolution-x64.h	/^  std::vector<Tensor<SrcType>*> group_src_;$/;"	m	struct:ConvKernel	access:public
handler	c_api_rt.cc	/^void *handler = NULL;$/;"	v
handler_mutex	c_api_rt.cc	/^std::mutex handler_mutex;$/;"	v
height_in_	convolution-x64.h	/^  size_t height_in_ ;$/;"	m	struct:FixPointConvolution	access:public
height_in_	convolution-x64.h	/^  size_t height_in_;$/;"	m	struct:ConvData	access:public
height_out_	base_convolution.h	/^  size_t height_out_;$/;"	m	struct:BaseConvolutionAlgo	access:protected
height_out_	convolution-x64.h	/^  size_t height_out_;$/;"	m	struct:ConvData	access:public
igemm4x1	ops/kernel/shuffle_avx2_igemm4x1x32.h	/^namespace igemm4x1 {$/;"	n	namespace:kernel
igemm4xn	ops/kernel/shuffle_avx2_sse42_igemm_4xnx8-x64.h	/^namespace igemm4xn {$/;"	n	namespace:kernel
init_shared_library	c_api_rt.cc	/^void __attribute__((constructor)) init_shared_library() {$/;"	f	signature:()
internal_layout_	convolution-x64.h	/^  LAYOUT internal_layout_;$/;"	m	struct:FixPointConvolution	access:public
is_a_ge_zero_and_a_lt_b	common.h	/^static INLINE_SPECIFIER bool is_a_ge_zero_and_a_lt_b(int a, int b) {$/;"	f	signature:(int a, int b)
kernel	ops/kernel/shuffle_avx2_igemm4x1x32.h	/^namespace kernel {$/;"	n
kernel	ops/kernel/shuffle_avx2_sse42_igemm_4xnx8-x64.h	/^namespace kernel {$/;"	n
kernel	ops/kernel/shuffle_avx512_igemm_4x4x64.h	/^namespace kernel {$/;"	n
kernel	ops/kernel/shuffle_sse42_igemm2x2x16.h	/^namespace kernel {$/;"	n
kernel::avx512_igemm4x4x64	ops/kernel/shuffle_avx512_igemm_4x4x64.h	/^namespace avx512_igemm4x4x64 {$/;"	n	namespace:kernel
kernel::avx512_igemm4x4x64::AVX512Kernel4x4x64	ops/kernel/shuffle_avx512_igemm_4x4x64.h	/^static INLINE_SPECIFIER void INLINE_ATTRIBUTE AVX512Kernel4x4x64(int8_t* &pa, uint8_t* &pb,$/;"	f	namespace:kernel::avx512_igemm4x4x64	signature:(int8_t* &pa, uint8_t* &pb, SIMDSITYPE &c00, SIMDSITYPE &c01, SIMDSITYPE &c02, SIMDSITYPE &c03, SIMDSITYPE &c10, SIMDSITYPE &c11, SIMDSITYPE &c12, SIMDSITYPE &c13, SIMDSITYPE &c20, SIMDSITYPE &c21, SIMDSITYPE &c22, SIMDSITYPE &c23, SIMDSITYPE &c30, SIMDSITYPE &c31, SIMDSITYPE &c32, SIMDSITYPE &c33)
kernel::avx512_igemm4x4x64::ApplyKernel	ops/kernel/shuffle_avx512_igemm_4x4x64.h	/^static INLINE_SPECIFIER void INLINE_ATTRIBUTE ApplyKernel(int8_t* &pa, uint8_t* &pb, size_t k, float fault_tolerance, float* result[], size_t length, size_t valid_lanes,$/;"	f	namespace:kernel::avx512_igemm4x4x64	signature:(int8_t* &pa, uint8_t* &pb, size_t k, float fault_tolerance, float* result[], size_t length, size_t valid_lanes, size_t i_index, size_t j_index, float* ratio_a, float* ratio_b, float *min_b, float *kernel_sum, float *bias, bool conv_relu_fusion, bool conv_bn_fusion, bool conv_bn_relu_fusion, bool conv_relu_bn_fusion, float *global_mean, float *mul_variance_coeff, float *scale, float *shift, kernel_function kernel, reduce_function reduce, postprocess_function postprocess)
kernel::avx512_igemm4x4x64::ApplyKernel	ops/kernel/shuffle_avx512_igemm_4x4x64.h	/^static INLINE_SPECIFIER void INLINE_ATTRIBUTE ApplyKernel(int8_t* &pa, uint8_t* &pb, size_t k, float fault_tolerance, void* result[], size_t length, size_t valid_lanes,$/;"	f	namespace:kernel::avx512_igemm4x4x64	signature:(int8_t* &pa, uint8_t* &pb, size_t k, float fault_tolerance, void* result[], size_t length, size_t valid_lanes, kernel_function kernel, reduce_function reduce, postprocess_function postprocess)
kernel::avx512_igemm4x4x64::ApplyKernelWrapper	ops/kernel/shuffle_avx512_igemm_4x4x64.h	/^static INLINE_SPECIFIER void INLINE_ATTRIBUTE ApplyKernelWrapper(int8_t* &pa, uint8_t* &pb, size_t k, float fault_tolerance, float* result[], size_t length, size_t valid_lanes,$/;"	f	namespace:kernel::avx512_igemm4x4x64	signature:(int8_t* &pa, uint8_t* &pb, size_t k, float fault_tolerance, float* result[], size_t length, size_t valid_lanes, size_t i_index, size_t j_index, float* ratio_a, float* ratio_b, float *min_b, float *kernel_sum, float *bias, bool conv_relu_fusion, bool conv_bn_fusion, bool conv_bn_relu_fusion, bool conv_relu_bn_fusion, float *global_mean, float *mul_variance_coeff, float *scale, float *shift, bool is_block)
kernel::avx512_igemm4x4x64::ApplyKernelWrapper	ops/kernel/shuffle_avx512_igemm_4x4x64.h	/^static INLINE_SPECIFIER void INLINE_ATTRIBUTE ApplyKernelWrapper(int8_t* &pa, uint8_t* &pb, size_t k, float fault_tolerance, void* result[], size_t length, size_t valid_lanes) {$/;"	f	namespace:kernel::avx512_igemm4x4x64	signature:(int8_t* &pa, uint8_t* &pb, size_t k, float fault_tolerance, void* result[], size_t length, size_t valid_lanes)
kernel::avx512_igemm4x4x64::CommitResult	ops/kernel/shuffle_avx512_igemm_4x4x64.h	/^static INLINE_SPECIFIER void INLINE_ATTRIBUTE CommitResult(SIMDSITYPE &sum00, SIMDSITYPE &sum01,$/;"	f	namespace:kernel::avx512_igemm4x4x64	signature:(SIMDSITYPE &sum00, SIMDSITYPE &sum01, SIMDSITYPE &sum10, SIMDSITYPE &sum11, SIMDSITYPE &sum20, SIMDSITYPE &sum21, SIMDSITYPE &sum30, SIMDSITYPE &sum31, void* result[], size_t length, size_t valid_lanes)
kernel::avx512_igemm4x4x64::FMAResult	ops/kernel/shuffle_avx512_igemm_4x4x64.h	/^static INLINE_SPECIFIER void INLINE_ATTRIBUTE FMAResult(SIMDSITYPE &sum00, SIMDSITYPE &sum01,$/;"	f	namespace:kernel::avx512_igemm4x4x64	signature:(SIMDSITYPE &sum00, SIMDSITYPE &sum01, SIMDSITYPE &sum10, SIMDSITYPE &sum11, SIMDSITYPE &sum20, SIMDSITYPE &sum21, SIMDSITYPE &sum30, SIMDSITYPE &sum31, float* result[], size_t length, size_t valid_lanes, size_t i_index, size_t j_index, float* ratio_a, float* ratio_b, float *min_b, float *kernel_sum, float *bias, bool conv_relu_fusion, bool conv_bn_fusion, bool conv_bn_relu_fusion, bool conv_relu_bn_fusion, float *global_mean, float *mul_variance_coeff, float *scale, float *shift)
kernel::avx512_igemm4x4x64::KernelReduce	ops/kernel/shuffle_avx512_igemm_4x4x64.h	/^static INLINE_SPECIFIER void INLINE_ATTRIBUTE KernelReduce(int8_t* &pa, uint8_t* &pb,$/;"	f	namespace:kernel::avx512_igemm4x4x64	signature:(int8_t* &pa, uint8_t* &pb, SIMDSITYPE &c00, SIMDSITYPE &c01, SIMDSITYPE &c02, SIMDSITYPE &c03, SIMDSITYPE &c10, SIMDSITYPE &c11, SIMDSITYPE &c12, SIMDSITYPE &c13, SIMDSITYPE &c20, SIMDSITYPE &c21, SIMDSITYPE &c22, SIMDSITYPE &c23, SIMDSITYPE &c30, SIMDSITYPE &c31, SIMDSITYPE &c32, SIMDSITYPE &c33, SIMDSITYPE &sum00, SIMDSITYPE &sum01, SIMDSITYPE &sum10, SIMDSITYPE &sum11, SIMDSITYPE &sum20, SIMDSITYPE &sum21, SIMDSITYPE &sum30, SIMDSITYPE &sum31, kernel_function kernel, reduce_function reduce)
kernel::avx512_igemm4x4x64::NCHWRTGenrateTargetAddr	ops/kernel/shuffle_avx512_igemm_4x4x64.h	/^static INLINE_SPECIFIER bool INLINE_ATTRIBUTE NCHWRTGenrateTargetAddr(DType *result[], DType *pc, size_t valid_m, size_t valid_n, size_t i_index, size_t j_index, \\$/;"	f	namespace:kernel::avx512_igemm4x4x64	signature:(DType *result[], DType *pc, size_t valid_m, size_t valid_n, size_t i_index, size_t j_index, \ size_t cur_group, size_t feature_map_size_per_image, size_t feature_map_size_per_group, \ size_t feature_map_size_per_channel)
kernel::avx512_igemm4x4x64::NHWCRTGenrateTargetAddr	ops/kernel/shuffle_avx512_igemm_4x4x64.h	/^static INLINE_SPECIFIER bool INLINE_ATTRIBUTE NHWCRTGenrateTargetAddr(DType *result[], DType *pc, size_t valid_m, size_t valid_n, size_t i_index, size_t j_index, \\$/;"	f	namespace:kernel::avx512_igemm4x4x64	signature:(DType *result[], DType *pc, size_t valid_m, size_t valid_n, size_t i_index, size_t j_index, \ size_t cur_group, size_t channel_per_group, size_t total_channels)
kernel::avx512_igemm4x4x64::PostReduce	ops/kernel/shuffle_avx512_igemm_4x4x64.h	/^static INLINE_SPECIFIER void INLINE_ATTRIBUTE PostReduce(SIMDSITYPE &accumulator,$/;"	f	namespace:kernel::avx512_igemm4x4x64	signature:(SIMDSITYPE &accumulator, SIMDSITYPE &sum00, SIMDSITYPE &sum01, SIMDSITYPE &sum10, SIMDSITYPE &sum11, SIMDSITYPE &sum20, SIMDSITYPE &sum21, SIMDSITYPE &sum30, SIMDSITYPE &sum31)
kernel::avx512_igemm4x4x64::Reduce	ops/kernel/shuffle_avx512_igemm_4x4x64.h	/^static INLINE_SPECIFIER void INLINE_ATTRIBUTE Reduce(SIMDSITYPE &c00, SIMDSITYPE &c01, SIMDSITYPE &c02, SIMDSITYPE &c03,$/;"	f	namespace:kernel::avx512_igemm4x4x64	signature:(SIMDSITYPE &c00, SIMDSITYPE &c01, SIMDSITYPE &c02, SIMDSITYPE &c03, SIMDSITYPE &c10, SIMDSITYPE &c11, SIMDSITYPE &c12, SIMDSITYPE &c13, SIMDSITYPE &c20, SIMDSITYPE &c21, SIMDSITYPE &c22, SIMDSITYPE &c23, SIMDSITYPE &c30, SIMDSITYPE &c31, SIMDSITYPE &c32, SIMDSITYPE &c33, SIMDSITYPE &sum00, SIMDSITYPE &sum01, SIMDSITYPE &sum10, SIMDSITYPE &sum11, SIMDSITYPE &sum20, SIMDSITYPE &sum21, SIMDSITYPE &sum30, SIMDSITYPE &sum31)
kernel::igemm4x1	ops/kernel/shuffle_avx2_igemm4x1x32.h	/^namespace igemm4x1 {$/;"	n	namespace:kernel
kernel::igemm4x1::ApplyKernelWrapper	ops/kernel/shuffle_avx2_igemm4x1x32.h	/^static INLINE_SPECIFIER void INLINE_ATTRIBUTE ApplyKernelWrapper(int8_t* &pa, uint8_t* &pb, size_t k, float fault_tolerance, float* result[], size_t length, size_t valid_lanes,$/;"	f	namespace:kernel::igemm4x1	signature:(int8_t* &pa, uint8_t* &pb, size_t k, float fault_tolerance, float* result[], size_t length, size_t valid_lanes, size_t i_index, size_t j_index, float* ratio_a, float* ratio_b, float *min_b, float *kernel_sum, float *bias, bool conv_relu_fusion, bool conv_bn_fusion, bool conv_bn_relu_fusion, bool conv_relu_bn_fusion, float *global_mean, float *mul_variance_coeff, float *scale, float *shift, bool is_block)
kernel::igemm4x1::ApplyKernelWrapper	ops/kernel/shuffle_avx2_igemm4x1x32.h	/^static INLINE_SPECIFIER void INLINE_ATTRIBUTE ApplyKernelWrapper(int8_t* &pa, uint8_t* &pb, size_t k, float fault_tolerance, void* result[], size_t length, size_t valid_lanes) {$/;"	f	namespace:kernel::igemm4x1	signature:(int8_t* &pa, uint8_t* &pb, size_t k, float fault_tolerance, void* result[], size_t length, size_t valid_lanes)
kernel::igemm4x1::ApplyStreamKernel	ops/kernel/shuffle_avx2_igemm4x1x32.h	/^static INLINE_SPECIFIER void INLINE_ATTRIBUTE ApplyStreamKernel(int8_t* &pa, uint8_t* &pb, size_t k, float fault_tolerance, float* result[], size_t length, size_t valid_lanes,$/;"	f	namespace:kernel::igemm4x1	signature:(int8_t* &pa, uint8_t* &pb, size_t k, float fault_tolerance, float* result[], size_t length, size_t valid_lanes, size_t i_index, size_t j_index, float* ratio_a, float* ratio_b, float *min_b, float *kernel_sum, float *bias, bool conv_relu_fusion, bool conv_bn_fusion, bool conv_bn_relu_fusion, bool conv_relu_bn_fusion, float *global_mean, float *mul_variance_coeff, float *scale, float *shift, kernel_function kernel, sum_function sum, postprocess_function postprocess)
kernel::igemm4x1::ApplyStreamKernel	ops/kernel/shuffle_avx2_igemm4x1x32.h	/^static INLINE_SPECIFIER void INLINE_ATTRIBUTE ApplyStreamKernel(int8_t* &pa, uint8_t* &pb, size_t k, float fault_tolerance, void* result[], size_t length, size_t valid_lanes,$/;"	f	namespace:kernel::igemm4x1	signature:(int8_t* &pa, uint8_t* &pb, size_t k, float fault_tolerance, void* result[], size_t length, size_t valid_lanes, kernel_function kernel, sum_function sum, postprocess_function postprocess)
kernel::igemm4x1::CommitResult	ops/kernel/shuffle_avx2_igemm4x1x32.h	/^static INLINE_SPECIFIER void INLINE_ATTRIBUTE CommitResult(SIMDSITYPEHALF &accumulator, void* result[], size_t length, size_t valid_lanes) {$/;"	f	namespace:kernel::igemm4x1	signature:(SIMDSITYPEHALF &accumulator, void* result[], size_t length, size_t valid_lanes)
kernel::igemm4x1::Kernel4x1x32	ops/kernel/shuffle_avx2_igemm4x1x32.h	/^static INLINE_SPECIFIER void INLINE_ATTRIBUTE Kernel4x1x32(int8_t* &pa, uint8_t* &pb,$/;"	f	namespace:kernel::igemm4x1	signature:(int8_t* &pa, uint8_t* &pb, SIMDSITYPE &c1, SIMDSITYPE &c2, SIMDSITYPE &c3, SIMDSITYPE &c4)
kernel::igemm4x1::KernelReduce	ops/kernel/shuffle_avx2_igemm4x1x32.h	/^static INLINE_SPECIFIER void INLINE_ATTRIBUTE KernelReduce(int8_t* &pa, uint8_t* &pb,$/;"	f	namespace:kernel::igemm4x1	signature:(int8_t* &pa, uint8_t* &pb, SIMDSITYPE &c1, SIMDSITYPE &c2, SIMDSITYPE &c3, SIMDSITYPE &c4, SIMDSITYPE &sum1, SIMDSITYPE &sum2, SIMDSITYPE &sum3, SIMDSITYPE &sum4, kernel_function kernel, reduce_function reduce)
kernel::igemm4x1::NCHWRTGenrateTargetAddr	ops/kernel/shuffle_avx2_igemm4x1x32.h	/^static INLINE_SPECIFIER int INLINE_ATTRIBUTE NCHWRTGenrateTargetAddr(DType *result[], DType *pc, size_t valid_m, size_t valid_n, size_t i_index, size_t j_index, \\$/;"	f	namespace:kernel::igemm4x1	signature:(DType *result[], DType *pc, size_t valid_m, size_t valid_n, size_t i_index, size_t j_index, \ size_t cur_group, size_t feature_map_size_per_image, size_t feature_map_size_per_group, \ size_t feature_map_size_per_channel)
kernel::igemm4x1::NHWCRTGenrateTargetAddr	ops/kernel/shuffle_avx2_igemm4x1x32.h	/^static INLINE_SPECIFIER bool INLINE_ATTRIBUTE NHWCRTGenrateTargetAddr(DType *result[], DType *pc, size_t valid_m, size_t valid_n, size_t i_index, size_t j_index, \\$/;"	f	namespace:kernel::igemm4x1	signature:(DType *result[], DType *pc, size_t valid_m, size_t valid_n, size_t i_index, size_t j_index, \ size_t cur_group, size_t channel_per_group, size_t total_channels)
kernel::igemm4x1::PostReduce	ops/kernel/shuffle_avx2_igemm4x1x32.h	/^static INLINE_SPECIFIER void INLINE_ATTRIBUTE PostReduce(SIMDSITYPE &sum1, SIMDSITYPE &sum2, SIMDSITYPE &sum3, SIMDSITYPE &sum4, SIMDSITYPEHALF &accumulator) {$/;"	f	namespace:kernel::igemm4x1	signature:(SIMDSITYPE &sum1, SIMDSITYPE &sum2, SIMDSITYPE &sum3, SIMDSITYPE &sum4, SIMDSITYPEHALF &accumulator)
kernel::igemm4x1::Reduce	ops/kernel/shuffle_avx2_igemm4x1x32.h	/^static INLINE_SPECIFIER void INLINE_ATTRIBUTE Reduce(SIMDSITYPE &c1, SIMDSITYPE &c2, SIMDSITYPE &c3, SIMDSITYPE &c4, \\$/;"	f	namespace:kernel::igemm4x1	signature:(SIMDSITYPE &c1, SIMDSITYPE &c2, SIMDSITYPE &c3, SIMDSITYPE &c4, \ SIMDSITYPE &sum1, SIMDSITYPE &sum2, SIMDSITYPE &sum3, SIMDSITYPE &sum4)
kernel::igemm4x1::StreamFMAResult	ops/kernel/shuffle_avx2_igemm4x1x32.h	/^static INLINE_SPECIFIER void INLINE_ATTRIBUTE StreamFMAResult(SIMDSITYPEHALF &accumulator, float* result[], size_t length, size_t valid_lanes, size_t i_index, size_t j_index,$/;"	f	namespace:kernel::igemm4x1	signature:(SIMDSITYPEHALF &accumulator, float* result[], size_t length, size_t valid_lanes, size_t i_index, size_t j_index, float* ratio_a, float* ratio_b, float *min_b, float *kernel_sum, float *bias, bool conv_relu_fusion, bool conv_bn_fusion, bool conv_bn_relu_fusion, bool conv_relu_bn_fusion, float *global_mean, float *mul_variance_coeff, float *scale, float *shift)
kernel::igemm4xn	ops/kernel/shuffle_avx2_sse42_igemm_4xnx8-x64.h	/^namespace igemm4xn {$/;"	n	namespace:kernel
kernel::igemm4xn::AVX2Kernel4x8x8	ops/kernel/shuffle_avx2_sse42_igemm_4xnx8-x64.h	/^static INLINE_SPECIFIER void INLINE_ATTRIBUTE AVX2Kernel4x8x8(int8_t* &pa, uint8_t* &pb,$/;"	f	namespace:kernel::igemm4xn	signature:(int8_t* &pa, uint8_t* &pb, SIMDSITYPE &c11, SIMDSITYPE &c12, SIMDSITYPE &c21, SIMDSITYPE &c22, SIMDSITYPE &c31, SIMDSITYPE &c32, SIMDSITYPE &c41, SIMDSITYPE &c42)
kernel::igemm4xn::ApplyKernel	ops/kernel/shuffle_avx2_sse42_igemm_4xnx8-x64.h	/^static INLINE_SPECIFIER void INLINE_ATTRIBUTE ApplyKernel(int8_t* &pa, uint8_t* &pb, size_t k, float fault_tolerance, float* result[], size_t length, size_t valid_lanes,$/;"	f	namespace:kernel::igemm4xn	signature:(int8_t* &pa, uint8_t* &pb, size_t k, float fault_tolerance, float* result[], size_t length, size_t valid_lanes, size_t i_index, size_t j_index, float* ratio_a, float* ratio_b, float *min_b, float *kernel_sum, float *bias, bool conv_relu_fusion, bool conv_bn_fusion, bool conv_bn_relu_fusion, bool conv_relu_bn_fusion, float *global_mean, float *mul_variance_coeff, float *scale, float *shift, kernel_function kernel, sum_function sum, reduce_function reduce, postprocess_function postprocess)
kernel::igemm4xn::ApplyKernel	ops/kernel/shuffle_avx2_sse42_igemm_4xnx8-x64.h	/^static INLINE_SPECIFIER void INLINE_ATTRIBUTE ApplyKernel(int8_t* &pa, uint8_t* &pb, size_t k, float fault_tolerance, void* result[], size_t length, size_t valid_lanes,$/;"	f	namespace:kernel::igemm4xn	signature:(int8_t* &pa, uint8_t* &pb, size_t k, float fault_tolerance, void* result[], size_t length, size_t valid_lanes, kernel_function kernel, sum_function sum, reduce_function reduce, postprocess_function postprocess)
kernel::igemm4xn::ApplyKernelWrapper	ops/kernel/shuffle_avx2_sse42_igemm_4xnx8-x64.h	/^static INLINE_SPECIFIER void INLINE_ATTRIBUTE ApplyKernelWrapper(int8_t* &pa, uint8_t* &pb, size_t k, float fault_tolerance, float* result[], size_t length, size_t valid_lanes,$/;"	f	namespace:kernel::igemm4xn	signature:(int8_t* &pa, uint8_t* &pb, size_t k, float fault_tolerance, float* result[], size_t length, size_t valid_lanes, size_t i_index, size_t j_index, float* ratio_a, float* ratio_b, float *min_b, float *kernel_sum, float *bias, bool conv_relu_fusion, bool conv_bn_fusion, bool conv_bn_relu_fusion, bool conv_relu_bn_fusion, float *global_mean, float *mul_variance_coeff, float *scale, float *shift, bool is_block)
kernel::igemm4xn::ApplyKernelWrapper	ops/kernel/shuffle_avx2_sse42_igemm_4xnx8-x64.h	/^static INLINE_SPECIFIER void INLINE_ATTRIBUTE ApplyKernelWrapper(int8_t* &pa, uint8_t* &pb, size_t k, float fault_tolerance, void* result[], size_t length, size_t valid_lanes) {$/;"	f	namespace:kernel::igemm4xn	signature:(int8_t* &pa, uint8_t* &pb, size_t k, float fault_tolerance, void* result[], size_t length, size_t valid_lanes)
kernel::igemm4xn::CommitBlockResult	ops/kernel/shuffle_avx2_sse42_igemm_4xnx8-x64.h	/^static INLINE_SPECIFIER void INLINE_ATTRIBUTE CommitBlockResult(SIMDSITYPE &sum1, SIMDSITYPE &sum2, SIMDSITYPE &sum3, SIMDSITYPE &sum4, void* result[], size_t length, size_t valid_lanes) {$/;"	f	namespace:kernel::igemm4xn	signature:(SIMDSITYPE &sum1, SIMDSITYPE &sum2, SIMDSITYPE &sum3, SIMDSITYPE &sum4, void* result[], size_t length, size_t valid_lanes)
kernel::igemm4xn::CommitResult	ops/kernel/shuffle_avx2_sse42_igemm_4xnx8-x64.h	/^static INLINE_SPECIFIER void INLINE_ATTRIBUTE CommitResult(SIMDSITYPE &sum1, SIMDSITYPE &sum2, SIMDSITYPE &sum3, SIMDSITYPE &sum4, void* result[], size_t length, size_t valid_lanes) {$/;"	f	namespace:kernel::igemm4xn	signature:(SIMDSITYPE &sum1, SIMDSITYPE &sum2, SIMDSITYPE &sum3, SIMDSITYPE &sum4, void* result[], size_t length, size_t valid_lanes)
kernel::igemm4xn::FMAResult	ops/kernel/shuffle_avx2_sse42_igemm_4xnx8-x64.h	/^static INLINE_SPECIFIER void INLINE_ATTRIBUTE FMAResult(SIMDSITYPE &sum1, SIMDSITYPE &sum2, SIMDSITYPE &sum3, SIMDSITYPE &sum4,$/;"	f	namespace:kernel::igemm4xn	signature:(SIMDSITYPE &sum1, SIMDSITYPE &sum2, SIMDSITYPE &sum3, SIMDSITYPE &sum4, float* result[], size_t length, size_t valid_lanes, size_t i_index, size_t j_index, float* ratio_a, float* ratio_b, float *min_b, float *kernel_sum, float *bias, bool conv_relu_fusion, bool conv_bn_fusion, bool conv_bn_relu_fusion, bool conv_relu_bn_fusion, float *global_mean, float *mul_variance_coeff, float *scale, float *shift)
kernel::igemm4xn::HADDSUM16TOSum32	ops/kernel/shuffle_avx2_sse42_igemm_4xnx8-x64.h	/^static INLINE_SPECIFIER SIMDSITYPE INLINE_ATTRIBUTE HADDSUM16TOSum32(SIMDSITYPE &localsum1, SIMDSITYPE &localsum2) {$/;"	f	namespace:kernel::igemm4xn	signature:(SIMDSITYPE &localsum1, SIMDSITYPE &localsum2)
kernel::igemm4xn::HaddPairReduce	ops/kernel/shuffle_avx2_sse42_igemm_4xnx8-x64.h	/^static INLINE_SPECIFIER void INLINE_ATTRIBUTE HaddPairReduce(SIMDSITYPE &c1, SIMDSITYPE &c2, SIMDSITYPE &sum,$/;"	f	namespace:kernel::igemm4xn	signature:(SIMDSITYPE &c1, SIMDSITYPE &c2, SIMDSITYPE &sum, SIMDSITYPE &threshold, SIMDSITYPE &ones)
kernel::igemm4xn::KernelReduce	ops/kernel/shuffle_avx2_sse42_igemm_4xnx8-x64.h	/^static INLINE_SPECIFIER void INLINE_ATTRIBUTE KernelReduce(int8_t* &pa, uint8_t* &pb,$/;"	f	namespace:kernel::igemm4xn	signature:(int8_t* &pa, uint8_t* &pb, SIMDSITYPE &c11, SIMDSITYPE &c12, SIMDSITYPE &c21, SIMDSITYPE &c22, SIMDSITYPE &c31, SIMDSITYPE &c32, SIMDSITYPE &c41, SIMDSITYPE &c42, SIMDSITYPE &sum1, SIMDSITYPE &sum2, SIMDSITYPE &sum3, SIMDSITYPE &sum4, SIMDSITYPE &threshold, SIMDSITYPE &ones, kernel_function kernel, reduce_function reduce)
kernel::igemm4xn::NCHWFMABlockResult	ops/kernel/shuffle_avx2_sse42_igemm_4xnx8-x64.h	/^static INLINE_SPECIFIER void INLINE_ATTRIBUTE NCHWFMABlockResult(SIMDSITYPE &sum1, SIMDSITYPE &sum2, SIMDSITYPE &sum3, SIMDSITYPE &sum4,$/;"	f	namespace:kernel::igemm4xn	signature:(SIMDSITYPE &sum1, SIMDSITYPE &sum2, SIMDSITYPE &sum3, SIMDSITYPE &sum4, float* result[], size_t length, size_t valid_lanes, size_t i_index, size_t j_index, float* ratio_a, float* ratio_b, float* min_b, float* kernel_sum, float* bias, bool conv_relu_fusion, bool conv_bn_fusion, bool conv_bn_relu_fusion, bool conv_relu_bn_fusion, float *global_mean, float *mul_variance_coeff, float *scale, float *shift)
kernel::igemm4xn::NCHWRTGenrateTargetAddr	ops/kernel/shuffle_avx2_sse42_igemm_4xnx8-x64.h	/^static INLINE_SPECIFIER bool INLINE_ATTRIBUTE NCHWRTGenrateTargetAddr(DType *result[], DType *pc, size_t valid_m, size_t valid_n, size_t i_index, size_t j_index, \\$/;"	f	namespace:kernel::igemm4xn	signature:(DType *result[], DType *pc, size_t valid_m, size_t valid_n, size_t i_index, size_t j_index, \ size_t cur_group, size_t feature_map_size_per_image, size_t feature_map_size_per_group, \ size_t feature_map_size_per_channel)
kernel::igemm4xn::NHWCFMABlockResult	ops/kernel/shuffle_avx2_sse42_igemm_4xnx8-x64.h	/^static INLINE_SPECIFIER void INLINE_ATTRIBUTE NHWCFMABlockResult(SIMDSITYPE &sum1, SIMDSITYPE &sum2, SIMDSITYPE &sum3, SIMDSITYPE &sum4,$/;"	f	namespace:kernel::igemm4xn	signature:(SIMDSITYPE &sum1, SIMDSITYPE &sum2, SIMDSITYPE &sum3, SIMDSITYPE &sum4, float* result[], size_t length, size_t valid_lanes, size_t i_index, size_t j_index, float* ratio_a, float* ratio_b, float *min_b, float *kernel_sum, float *bias, bool conv_relu_fusion, bool conv_bn_fusion, bool conv_bn_relu_fusion, bool conv_relu_bn_fusion, float *global_mean, float *mul_variance_coeff, float *scale, float *shift)
kernel::igemm4xn::NHWCRTGenrateTargetAddr	ops/kernel/shuffle_avx2_sse42_igemm_4xnx8-x64.h	/^static INLINE_SPECIFIER bool INLINE_ATTRIBUTE NHWCRTGenrateTargetAddr(DType *result[], DType *pc, size_t valid_m, size_t valid_n, size_t i_index, size_t j_index, \\$/;"	f	namespace:kernel::igemm4xn	signature:(DType *result[], DType *pc, size_t valid_m, size_t valid_n, size_t i_index, size_t j_index, \ size_t cur_group, size_t channel_per_group, size_t total_channels)
kernel::igemm4xn::PostHaddReduce	ops/kernel/shuffle_avx2_sse42_igemm_4xnx8-x64.h	/^static INLINE_SPECIFIER void INLINE_ATTRIBUTE PostHaddReduce($/;"	f	namespace:kernel::igemm4xn	signature:( SIMDSITYPE &c11, SIMDSITYPE &c12, SIMDSITYPE &c21, SIMDSITYPE &c22, SIMDSITYPE &c31, SIMDSITYPE &c32, SIMDSITYPE &c41, SIMDSITYPE &c42, SIMDSITYPE &sum1, SIMDSITYPE &sum2, SIMDSITYPE &sum3, SIMDSITYPE &sum4)
kernel::igemm4xn::ReOrderResult	ops/kernel/shuffle_avx2_sse42_igemm_4xnx8-x64.h	/^static INLINE_SPECIFIER SIMDSITYPE INLINE_ATTRIBUTE ReOrderResult(SIMDSITYPE &result, SIMDSITYPE &index) {$/;"	f	namespace:kernel::igemm4xn	signature:(SIMDSITYPE &result, SIMDSITYPE &index)
kernel::igemm4xn::SSE42Kernel4x4x8	ops/kernel/shuffle_avx2_sse42_igemm_4xnx8-x64.h	/^static INLINE_SPECIFIER void INLINE_ATTRIBUTE SSE42Kernel4x4x8(int8_t* &pa, uint8_t* &pb,$/;"	f	namespace:kernel::igemm4xn	signature:(int8_t* &pa, uint8_t* &pb, SIMDSITYPE &c11, SIMDSITYPE &c12, SIMDSITYPE &c21, SIMDSITYPE &c22, SIMDSITYPE &c31, SIMDSITYPE &c32, SIMDSITYPE &c41, SIMDSITYPE &c42)
kernel::sse42_igemm2x2x16	ops/kernel/shuffle_sse42_igemm2x2x16.h	/^namespace sse42_igemm2x2x16 {$/;"	n	namespace:kernel
kernel::sse42_igemm2x2x16::ApplyKernel	ops/kernel/shuffle_sse42_igemm2x2x16.h	/^static INLINE_SPECIFIER void INLINE_ATTRIBUTE ApplyKernel(int8_t* &pa, uint8_t* &pb, size_t k, float fault_tolerance, float* result[], size_t length, size_t valid_lanes,$/;"	f	namespace:kernel::sse42_igemm2x2x16	signature:(int8_t* &pa, uint8_t* &pb, size_t k, float fault_tolerance, float* result[], size_t length, size_t valid_lanes, size_t i_index, size_t j_index, float* ratio_a, float* ratio_b, float *min_b, float *kernel_sum, float *bias, bool conv_relu_fusion, bool conv_bn_fusion, bool conv_bn_relu_fusion, bool conv_relu_bn_fusion, float *global_mean, float *mul_variance_coeff, float *scale, float *shift, kernel_function kernel, sum_function sum, reduce_function reduce, postprocess_function postprocess)
kernel::sse42_igemm2x2x16::ApplyKernel	ops/kernel/shuffle_sse42_igemm2x2x16.h	/^static INLINE_SPECIFIER void INLINE_ATTRIBUTE ApplyKernel(int8_t* &pa, uint8_t* &pb, size_t k, float fault_tolerance, void* result[], size_t length, size_t valid_lanes,$/;"	f	namespace:kernel::sse42_igemm2x2x16	signature:(int8_t* &pa, uint8_t* &pb, size_t k, float fault_tolerance, void* result[], size_t length, size_t valid_lanes, kernel_function kernel, sum_function sum, reduce_function reduce, postprocess_function postprocess)
kernel::sse42_igemm2x2x16::ApplyKernelWrapper	ops/kernel/shuffle_sse42_igemm2x2x16.h	/^static INLINE_SPECIFIER void INLINE_ATTRIBUTE ApplyKernelWrapper(int8_t* &pa, uint8_t* &pb, size_t k, float fault_tolerance, float* result[], size_t length, size_t valid_lanes,$/;"	f	namespace:kernel::sse42_igemm2x2x16	signature:(int8_t* &pa, uint8_t* &pb, size_t k, float fault_tolerance, float* result[], size_t length, size_t valid_lanes, size_t i_index, size_t j_index, float* ratio_a, float* ratio_b, float *min_b, float *kernel_sum, float *bias, bool conv_relu_fusion, bool conv_bn_fusion, bool conv_bn_relu_fusion, bool conv_relu_bn_fusion, float *global_mean, float *mul_variance_coeff, float *scale, float *shift, bool is_block)
kernel::sse42_igemm2x2x16::ApplyKernelWrapper	ops/kernel/shuffle_sse42_igemm2x2x16.h	/^static INLINE_SPECIFIER void INLINE_ATTRIBUTE ApplyKernelWrapper(int8_t* &pa, uint8_t* &pb, size_t k, float fault_tolerance, void* result[], size_t length, size_t valid_lanes) {$/;"	f	namespace:kernel::sse42_igemm2x2x16	signature:(int8_t* &pa, uint8_t* &pb, size_t k, float fault_tolerance, void* result[], size_t length, size_t valid_lanes)
kernel::sse42_igemm2x2x16::CommitBlockResult	ops/kernel/shuffle_sse42_igemm2x2x16.h	/^static INLINE_SPECIFIER void INLINE_ATTRIBUTE CommitBlockResult(SIMDSITYPE &sum, void* result[], size_t length, size_t valid_lanes) {$/;"	f	namespace:kernel::sse42_igemm2x2x16	signature:(SIMDSITYPE &sum, void* result[], size_t length, size_t valid_lanes)
kernel::sse42_igemm2x2x16::CommitResult	ops/kernel/shuffle_sse42_igemm2x2x16.h	/^static INLINE_SPECIFIER void INLINE_ATTRIBUTE CommitResult(SIMDSITYPE& sum, void* result[], size_t length, size_t valid_lanes) {$/;"	f	namespace:kernel::sse42_igemm2x2x16	signature:(SIMDSITYPE& sum, void* result[], size_t length, size_t valid_lanes)
kernel::sse42_igemm2x2x16::FMAResult	ops/kernel/shuffle_sse42_igemm2x2x16.h	/^static INLINE_SPECIFIER void INLINE_ATTRIBUTE FMAResult(SIMDSITYPE &sum, float* result[], size_t length, size_t valid_lanes, size_t i_index, size_t j_index,$/;"	f	namespace:kernel::sse42_igemm2x2x16	signature:(SIMDSITYPE &sum, float* result[], size_t length, size_t valid_lanes, size_t i_index, size_t j_index, float* ratio_a, float* ratio_b, float *min_b, float *kernel_sum, float *bias, bool conv_relu_fusion, bool conv_bn_fusion, bool conv_bn_relu_fusion, bool conv_relu_bn_fusion, float *global_mean, float *mul_variance_coeff, float *scale, float *shift)
kernel::sse42_igemm2x2x16::KernelReduce	ops/kernel/shuffle_sse42_igemm2x2x16.h	/^static INLINE_SPECIFIER void INLINE_ATTRIBUTE KernelReduce(int8_t* &pa, uint8_t* &pb,$/;"	f	namespace:kernel::sse42_igemm2x2x16	signature:(int8_t* &pa, uint8_t* &pb, SIMDSITYPE &c11, SIMDSITYPE &c12, SIMDSITYPE &c21, SIMDSITYPE &c22, SIMDSITYPE &sum, SIMDSITYPE &threshold, SIMDSITYPE &ones, kernel_function kernel, reduce_function reduce)
kernel::sse42_igemm2x2x16::NCHWRTGenrateTargetAddr	ops/kernel/shuffle_sse42_igemm2x2x16.h	/^static INLINE_SPECIFIER bool INLINE_ATTRIBUTE NCHWRTGenrateTargetAddr(DType *result[], DType *pc, size_t valid_m, size_t valid_n, size_t i_index, size_t j_index, \\$/;"	f	namespace:kernel::sse42_igemm2x2x16	signature:(DType *result[], DType *pc, size_t valid_m, size_t valid_n, size_t i_index, size_t j_index, \ size_t cur_group, size_t feature_map_size_per_image, size_t feature_map_size_per_group, \ size_t feature_map_size_per_channel)
kernel::sse42_igemm2x2x16::NHWCRTGenrateTargetAddr	ops/kernel/shuffle_sse42_igemm2x2x16.h	/^static INLINE_SPECIFIER bool INLINE_ATTRIBUTE NHWCRTGenrateTargetAddr(DType *result[], DType *pc, size_t valid_m, size_t valid_n, size_t i_index, size_t j_index, \\$/;"	f	namespace:kernel::sse42_igemm2x2x16	signature:(DType *result[], DType *pc, size_t valid_m, size_t valid_n, size_t i_index, size_t j_index, \ size_t cur_group, size_t channel_per_group, size_t total_channels)
kernel::sse42_igemm2x2x16::Reduce	ops/kernel/shuffle_sse42_igemm2x2x16.h	/^static INLINE_SPECIFIER void INLINE_ATTRIBUTE Reduce(SIMDSITYPE &c11, SIMDSITYPE &c12, SIMDSITYPE &c21, SIMDSITYPE &c22, SIMDSITYPE &accumulator) {$/;"	f	namespace:kernel::sse42_igemm2x2x16	signature:(SIMDSITYPE &c11, SIMDSITYPE &c12, SIMDSITYPE &c21, SIMDSITYPE &c22, SIMDSITYPE &accumulator)
kernel::sse42_igemm2x2x16::ReduceWrapper	ops/kernel/shuffle_sse42_igemm2x2x16.h	/^static INLINE_SPECIFIER void INLINE_ATTRIBUTE ReduceWrapper(SIMDSITYPE &c11, SIMDSITYPE &c12, SIMDSITYPE &c21, SIMDSITYPE &c22, SIMDSITYPE &accumulator,$/;"	f	namespace:kernel::sse42_igemm2x2x16	signature:(SIMDSITYPE &c11, SIMDSITYPE &c12, SIMDSITYPE &c21, SIMDSITYPE &c22, SIMDSITYPE &accumulator, SIMDSITYPE &threshold, SIMDSITYPE &ones)
kernel::sse42_igemm2x2x16::SSE42Kernel2x2x16	ops/kernel/shuffle_sse42_igemm2x2x16.h	/^static INLINE_SPECIFIER void INLINE_ATTRIBUTE SSE42Kernel2x2x16(int8_t* &pa, uint8_t* &pb,$/;"	f	namespace:kernel::sse42_igemm2x2x16	signature:(int8_t* &pa, uint8_t* &pb, SIMDSITYPE &c11, SIMDSITYPE &c12, SIMDSITYPE &c21, SIMDSITYPE &c22)
kernel_h_	convolution-x64.h	/^  size_t kernel_h_;$/;"	m	struct:ConvKernel	access:public
kernel_h_	convolution-x64.h	/^  size_t kernel_h_;$/;"	m	struct:FixPointConvolution	access:public
kernel_w_	convolution-x64.h	/^  size_t kernel_w_;$/;"	m	struct:ConvKernel	access:public
kernel_w_	convolution-x64.h	/^  size_t kernel_w_;$/;"	m	struct:FixPointConvolution	access:public
kernelsrc_	convolution-x64.h	/^  DType *kernelsrc_;$/;"	m	struct:FixPointConvolution	access:public
kernelsrc_	fc-x64.h	/^  DType *kernelsrc_;$/;"	m	struct:FixPointFC	access:public
layout	nn-fixpoint.h	/^  LAYOUT layout;$/;"	m	struct:FixConvOpDesc	access:public
layout	nn-fixpoint.h	/^  LAYOUT layout;$/;"	m	struct:FixFCOpDesc	access:public
layout_	convolution-x64.h	/^  LAYOUT layout_;$/;"	m	struct:ConvData	access:public
layout_	convolution-x64.h	/^  LAYOUT layout_;$/;"	m	struct:ConvKernel	access:public
layout_	convolution-x64.h	/^  LAYOUT layout_;$/;"	m	struct:FixPointConvolution	access:public
layout_	fc-x64.h	/^  LAYOUT layout_;$/;"	m	struct:FCData	access:public
layout_	fc-x64.h	/^  LAYOUT layout_;$/;"	m	struct:FixPointFC	access:public
m_	convolution-x64.h	/^  size_t m_;$/;"	m	struct:ConvData	access:public
m_	convolution-x64.h	/^  size_t m_;$/;"	m	struct:ConvKernel	access:public
m_	fc-x64.h	/^  size_t m_;$/;"	m	struct:FCData	access:public
m_	fc-x64.h	/^  size_t m_;$/;"	m	struct:FCKernel	access:public
main	tests/test_conv.cpp	/^int main(int argc, char** argv) {$/;"	f	signature:(int argc, char** argv)
main	tests/test_cpu_conv.cpp	/^int main(int argc, char** argv) {$/;"	f	signature:(int argc, char** argv)
main	tests/test_fc.cpp	/^int main(int argc, char** argv) {$/;"	f	signature:(int argc, char** argv)
main	tests/test_find_extreme.cpp	/^int main(int argc, char** argv) {$/;"	f	signature:(int argc, char** argv)
main	tests/test_gemm.cpp	/^int main(int argc, char** argv) {$/;"	f	signature:(int argc, char** argv)
main	tests/test_layout.cpp	/^int main(int argc, char** argv) {$/;"	f	signature:(int argc, char** argv)
main	tests/test_quantize.cpp	/^int main(int argc, char** argv) {$/;"	f	signature:(int argc, char** argv)
make_shape	tensor.h	/^Shape make_shape(size_t x) {$/;"	f	signature:(size_t x)
make_shape	tensor.h	/^Shape make_shape(size_t x, size_t y) {$/;"	f	signature:(size_t x, size_t y)
make_shape	tensor.h	/^Shape make_shape(size_t x, size_t y, size_t z) {$/;"	f	signature:(size_t x, size_t y, size_t z)
make_shape	tensor.h	/^Shape make_shape(size_t x, size_t y, size_t z, size_t w) {$/;"	f	signature:(size_t x, size_t y, size_t z, size_t w)
max	nn-fixpoint.h	/^  void* max;$/;"	m	struct:FixTensorDesc	access:public
max_	tensor.h	/^  Tensor<SrcType> max_;$/;"	m	struct:QuantizedTensor	access:public
min	nn-fixpoint.h	/^  void* min;$/;"	m	struct:FixTensorDesc	access:public
min_	tensor.h	/^  Tensor<SrcType> min_;$/;"	m	struct:QuantizedTensor	access:public
mul_variance_coeff_	convolution-x64.h	/^  Tensor<DType> *mul_variance_coeff_;$/;"	m	struct:FixPointConvolution	access:public
n_	convolution-x64.h	/^  size_t n_;$/;"	m	struct:ConvData	access:public
n_	convolution-x64.h	/^  size_t n_;$/;"	m	struct:ConvKernel	access:public
n_	fc-x64.h	/^  size_t n_;$/;"	m	struct:FCData	access:public
n_	fc-x64.h	/^  size_t n_;$/;"	m	struct:FCKernel	access:public
op	nn-fixpoint.h	/^  FixConvOp* op;$/;"	m	struct:FixConvOpDesc	access:public
op	nn-fixpoint.h	/^  FixFCOp* op;$/;"	m	struct:FixFCOpDesc	access:public
operator []	tensor.h	/^  size_t operator[] (size_t index) {$/;"	f	struct:Shape	access:public	signature:(size_t index)
operator []	tensor.h	/^  size_t operator[] (size_t index) {$/;"	f	struct:Tensor	access:public	signature:(size_t index)
ori_shape	nn-fixpoint.h	/^  size_t ori_shape[4];$/;"	m	struct:FixTensorDesc	access:public
ori_shape_	tensor.h	/^  Shape ori_shape_;$/;"	m	struct:QuantizedTensor	access:public
pad_h_	convolution-x64.h	/^  size_t pad_h_;$/;"	m	struct:ConvKernel	access:public
pad_h_	convolution-x64.h	/^  size_t pad_h_;$/;"	m	struct:FixPointConvolution	access:public
pad_m_	convolution-x64.h	/^  size_t pad_m_;$/;"	m	struct:ConvData	access:public
pad_m_	convolution-x64.h	/^  size_t pad_m_;$/;"	m	struct:ConvKernel	access:public
pad_m_	fc-x64.h	/^  size_t pad_m_;$/;"	m	struct:FCData	access:public
pad_m_	fc-x64.h	/^  size_t pad_m_;$/;"	m	struct:FCKernel	access:public
pad_n_	convolution-x64.h	/^  size_t pad_n_;$/;"	m	struct:ConvData	access:public
pad_n_	convolution-x64.h	/^  size_t pad_n_;$/;"	m	struct:ConvKernel	access:public
pad_n_	fc-x64.h	/^  size_t pad_n_;$/;"	m	struct:FCData	access:public
pad_n_	fc-x64.h	/^  size_t pad_n_;$/;"	m	struct:FCKernel	access:public
pad_w_	convolution-x64.h	/^  size_t pad_w_;$/;"	m	struct:ConvKernel	access:public
pad_w_	convolution-x64.h	/^  size_t pad_w_;$/;"	m	struct:FixPointConvolution	access:public
ratio	nn-fixpoint.h	/^  void* ratio;$/;"	m	struct:FixTensorDesc	access:public
ratio_	tensor.h	/^  Tensor<SrcType> ratio_;$/;"	m	struct:QuantizedTensor	access:public
relu_fusion_	fc-x64.h	/^  bool relu_fusion_;$/;"	m	struct:FixPointFC	access:public
scale_	convolution-x64.h	/^  DType *scale_;$/;"	m	struct:FixPointConvolution	access:public
shape	nn-fixpoint.h	/^  size_t shape[4];$/;"	m	struct:FPTensorDesc	access:public
shape	nn-fixpoint.h	/^  size_t shape[4];$/;"	m	struct:FixTensorDesc	access:public
shape_	tensor.h	/^  Shape shape_;$/;"	m	struct:Tensor	access:public
shape_	tensor.h	/^  std::vector<size_t> shape_;$/;"	m	struct:Shape	access:public
shift_	convolution-x64.h	/^  DType *shift_;$/;"	m	struct:FixPointConvolution	access:public
shuffle	ops/ops.h	/^namespace shuffle {$/;"	n
shuffle	ops/shuffle/pad_shuffle.h	/^namespace shuffle {$/;"	n
shuffle	ops/shuffle/shuffle_igemm.h	/^namespace shuffle {$/;"	n
shuffle	ops/shuffle/shuffle_im2col.h	/^namespace shuffle {$/;"	n
shuffle::ConvShuffleGEMM	ops/ops.h	/^void ConvShuffleGEMM(int8_t* pa, uint8_t* pb, float* pc, size_t m, size_t n, size_t k,$/;"	p	namespace:shuffle	signature:(int8_t* pa, uint8_t* pb, float* pc, size_t m, size_t n, size_t k, float* ratio_a, float* ratio_b, float* kernel_sum, float* min_b, float* bias, size_t batch_size, size_t groups, size_t channel_per_group, size_t cur_group, size_t height_out, size_t width_out, float fault_tolerance = 0.5, size_t pad_m = 0, size_t pad_n = 0, bool conv_relu_fusion = false, bool conv_bn_fusion = false, bool conv_bn_relu_fusion = false, bool conv_relu_bn_fusion = false, float *global_mean = NULL, float *mul_variance_coeff = NULL, float *scale = NULL, float *shift = NULL)
shuffle::ConvShuffleGEMM	ops/shuffle/shuffle_igemm.h	/^void ConvShuffleGEMM(int8_t* pa, uint8_t* pb, float* pc, size_t m, size_t n, size_t k,$/;"	f	namespace:shuffle	signature:(int8_t* pa, uint8_t* pb, float* pc, size_t m, size_t n, size_t k, float* ratio_a, float* ratio_b, float* kernel_sum, float* min_b, float* bias, size_t batch_size, size_t groups, size_t channel_per_group, size_t cur_group, size_t height_out, size_t width_out, float fault_tolerance, size_t pad_m, size_t pad_n, bool conv_relu_fusion, bool conv_bn_fusion, bool conv_bn_relu_fusion, bool conv_relu_bn_fusion, float *global_mean, float *mul_variance_coeff, float *scale, float *shift)
shuffle::InternalMixPrecisionGemm	ops/shuffle/shuffle_igemm.h	/^void InternalMixPrecisionGemm(ORDER order,$/;"	f	namespace:shuffle	signature:(ORDER order, enum TRANSPOSE transA, enum TRANSPOSE transB, int m, int n, int k, int8_t *a, int lda, uint8_t *b, int ldb, int *c, int ldc, float fault_tolerance, GEMM_KERNEL kernel)
shuffle::NCHWRTGenrateTargetAddr	ops/shuffle/shuffle_igemm.h	/^static INLINE_SPECIFIER int INLINE_ATTRIBUTE NCHWRTGenrateTargetAddr(DType *result[], DType *pc, size_t valid_m, size_t valid_n, size_t i_index, size_t j_index, \\$/;"	f	namespace:shuffle	signature:(DType *result[], DType *pc, size_t valid_m, size_t valid_n, size_t i_index, size_t j_index, \ size_t cur_group, size_t feature_map_size_per_image, size_t feature_map_size_per_group, \ size_t feature_map_size_per_channel)
shuffle::NHWCRTGenrateTargetAddr	ops/shuffle/shuffle_igemm.h	/^static INLINE_SPECIFIER bool INLINE_ATTRIBUTE NHWCRTGenrateTargetAddr(DType *result[], DType *pc, size_t valid_m, size_t valid_n, size_t i_index, size_t j_index, \\$/;"	f	namespace:shuffle	signature:(DType *result[], DType *pc, size_t valid_m, size_t valid_n, size_t i_index, size_t j_index, \ size_t cur_group, size_t channel_per_group, size_t total_channels)
shuffle::NNFixPointGemmSelect	ops/shuffle/shuffle_igemm.h	/^static INLINE_SPECIFIER void INLINE_ATTRIBUTE NNFixPointGemmSelect(int8_t* &pa, uint8_t* &pb, size_t k, float fault_tolerance, float* result[], size_t length, size_t valid_lanes,$/;"	f	namespace:shuffle	signature:(int8_t* &pa, uint8_t* &pb, size_t k, float fault_tolerance, float* result[], size_t length, size_t valid_lanes, size_t i_index, size_t j_index, float* ratio_a, float* ratio_b, float *min_b, float *kernel_sum, float *bias, bool conv_relu_fusion, bool conv_bn_fusion, bool conv_bn_relu_fusion, bool conv_relu_bn_fusion, float *global_mean, float *mul_variance_coeff, float *scale, float *shift, bool is_block)
shuffle::PadQuantizeShuffle	ops/ops.h	/^void PadQuantizeShuffle(int8_t *dst, size_t m, size_t n, DType *src, DType &min, DType &max, DType &ratio, float sw_threshold);$/;"	p	namespace:shuffle	signature:(int8_t *dst, size_t m, size_t n, DType *src, DType &min, DType &max, DType &ratio, float sw_threshold)
shuffle::PadQuantizeShuffle	ops/shuffle/pad_shuffle.h	/^void PadQuantizeShuffle(int8_t *dst, size_t m, size_t n, DType *src, DType &min, DType &max, DType &ratio, float sw_threshold) {$/;"	f	namespace:shuffle	signature:(int8_t *dst, size_t m, size_t n, DType *src, DType &min, DType &max, DType &ratio, float sw_threshold)
shuffle::PadQuantizeShuffle2D	ops/ops.h	/^void PadQuantizeShuffle2D(int8_t *dst, size_t m, size_t n, size_t pad_m, size_t pad_n, DType *src, DType *min, DType *max, DType *ratio, float sw_threshold);$/;"	p	namespace:shuffle	signature:(int8_t *dst, size_t m, size_t n, size_t pad_m, size_t pad_n, DType *src, DType *min, DType *max, DType *ratio, float sw_threshold)
shuffle::PadQuantizeShuffle2D	ops/ops.h	/^void PadQuantizeShuffle2D(uint8_t *dst, size_t m, size_t n, size_t pad_m, size_t pad_n, DType *src, DType *min, DType *max, DType *ratio, float sw_threshold);$/;"	p	namespace:shuffle	signature:(uint8_t *dst, size_t m, size_t n, size_t pad_m, size_t pad_n, DType *src, DType *min, DType *max, DType *ratio, float sw_threshold)
shuffle::PadQuantizeShuffle2D	ops/shuffle/pad_shuffle.h	/^void PadQuantizeShuffle2D(int8_t *dst, size_t m, size_t n, size_t pad_m, size_t pad_n, DType *src, DType *min, DType *max, DType *ratio, float sw_threshold) {$/;"	f	namespace:shuffle	signature:(int8_t *dst, size_t m, size_t n, size_t pad_m, size_t pad_n, DType *src, DType *min, DType *max, DType *ratio, float sw_threshold)
shuffle::PadQuantizeShuffle2D	ops/shuffle/pad_shuffle.h	/^void PadQuantizeShuffle2D(uint8_t *dst, size_t m, size_t n, size_t pad_m, size_t pad_n, DType *src, DType *min, DType *max, DType *ratio, float sw_threshold) {$/;"	f	namespace:shuffle	signature:(uint8_t *dst, size_t m, size_t n, size_t pad_m, size_t pad_n, DType *src, DType *min, DType *max, DType *ratio, float sw_threshold)
shuffle::PadQuantizeShuffleIm2colRef	ops/shuffle/shuffle_im2col.h	/^void PadQuantizeShuffleIm2colRef(DType* data,$/;"	f	namespace:shuffle	signature:(DType* data, size_t batch_size, size_t channels, size_t height, size_t width, size_t kernel_h, size_t kernel_w, size_t pad_h, size_t pad_w, size_t stride_h, size_t stride_w, size_t dilation_h, size_t dilation_w, uint8_t* data_col, DType* min, DType* max, DType* ratio, float sw_threshold = 255.0f)
shuffle::PadQuantizeShuffleIm2colWrapper	ops/ops.h	/^void PadQuantizeShuffleIm2colWrapper(DType* data,$/;"	p	namespace:shuffle	signature:(DType* data, size_t batch_size, size_t channels_per_group, size_t groups, size_t height, size_t width, size_t kernel_h, size_t kernel_w, size_t pad_h, size_t pad_w, size_t stride_h, size_t stride_w, size_t dilation_h, size_t dilation_w, uint8_t *data_col[], DType *min[], DType *max[], DType *ratio[], DType *workspace, float sw_threshold = 255.0f, bool transpose = false)
shuffle::PadQuantizeShuffleIm2colWrapper	ops/shuffle/shuffle_im2col.h	/^void PadQuantizeShuffleIm2colWrapper(DType* data,$/;"	f	namespace:shuffle	signature:(DType* data, size_t batch_size, size_t channels_per_group, size_t groups, size_t height, size_t width, size_t kernel_h, size_t kernel_w, size_t pad_h, size_t pad_w, size_t stride_h, size_t stride_w, size_t dilation_h, size_t dilation_w, uint8_t *data_col[], DType *min[], DType *max[], DType *ratio[], DType *workspace, float sw_threshold, bool transpose)
shuffle::PadQuantizeShuffleNCHWIm2col	ops/shuffle/shuffle_im2col.h	/^void PadQuantizeShuffleNCHWIm2col(DType* data,$/;"	f	namespace:shuffle	signature:(DType* data, size_t batch_size, size_t channels_per_group, size_t groups, size_t height, size_t width, size_t kernel_h, size_t kernel_w, size_t pad_h, size_t pad_w, size_t stride_h, size_t stride_w, size_t dilation_h, size_t dilation_w, uint8_t *data_col[], DType *min[], DType *max[], DType *ratio[], float sw_threshold)
shuffle::PadQuantizeShuffleNCHWIm2col	ops/shuffle/shuffle_im2col.h	/^void PadQuantizeShuffleNCHWIm2col(DType* data,$/;"	f	namespace:shuffle	signature:(DType* data, size_t batch_size, size_t channels_per_group, size_t groups, size_t height, size_t width, size_t pad_h, size_t pad_w, size_t stride_h, size_t stride_w, size_t dilation_h, size_t dilation_w, uint8_t *data_col[], DType *min[], DType *max[], DType *ratio[], float sw_threshold)
shuffle::PadQuantizeShuffleNHWCIm2col	ops/shuffle/shuffle_im2col.h	/^void PadQuantizeShuffleNHWCIm2col(DType* data,$/;"	f	namespace:shuffle	signature:(DType* data, size_t batch_size, size_t channels_per_group, size_t groups, size_t height, size_t width, size_t kernel_h, size_t kernel_w, size_t pad_h, size_t pad_w, size_t stride_h, size_t stride_w, size_t dilation_h, size_t dilation_w, uint8_t* data_col[], DType *min[], DType *max[], DType *ratio[], DType *workspace, float sw_threshold, findextreme_function findextreme, quantizekernel_function quantizekernel)
shuffle::PadShuffle2D	ops/ops.h	/^void PadShuffle2D(DType *dst, size_t m, size_t n, DType *src);$/;"	p	namespace:shuffle	signature:(DType *dst, size_t m, size_t n, DType *src)
shuffle::PadShuffle2D	ops/shuffle/pad_shuffle.h	/^void PadShuffle2D(DType *dst, size_t m, size_t n, DType *src) {$/;"	f	namespace:shuffle	signature:(DType *dst, size_t m, size_t n, DType *src)
shuffle::ShuffleGEMM	ops/shuffle/shuffle_igemm.h	/^void ShuffleGEMM(int8_t* pa, uint8_t* pb, int* pc, size_t m, size_t n, size_t k,$/;"	f	namespace:shuffle	signature:(int8_t* pa, uint8_t* pb, int* pc, size_t m, size_t n, size_t k, float fault_tolerance, size_t pad_m, size_t pad_n, GEMM_KERNEL kernel)
src_	convolution-x64.h	/^  SrcType *src_;$/;"	m	struct:ConvData	access:public
src_	convolution-x64.h	/^  SrcType *src_;$/;"	m	struct:ConvKernel	access:public
src_	fc-x64.h	/^  SrcType *src_;$/;"	m	struct:FCData	access:public
src_	fc-x64.h	/^  SrcType *src_;$/;"	m	struct:FCKernel	access:public
sse42_igemm2x2x16	ops/kernel/shuffle_sse42_igemm2x2x16.h	/^namespace sse42_igemm2x2x16 {$/;"	n	namespace:kernel
stride_h_	convolution-x64.h	/^  size_t stride_h_;$/;"	m	struct:ConvKernel	access:public
stride_h_	convolution-x64.h	/^  size_t stride_h_;$/;"	m	struct:FixPointConvolution	access:public
stride_w_	convolution-x64.h	/^  size_t stride_w_;$/;"	m	struct:ConvKernel	access:public
stride_w_	convolution-x64.h	/^  size_t stride_w_;$/;"	m	struct:FixPointConvolution	access:public
sumperrow_	convolution-x64.h	/^  Tensor<SrcType> *sumperrow_;$/;"	m	struct:ConvKernel	access:public
sumperrow_	fc-x64.h	/^  Tensor<SrcType> *sumperrow_;$/;"	m	struct:FCKernel	access:public
transformed_data_	convolution-x64.h	/^  DType *transformed_data_;$/;"	m	struct:FixPointConvolution	access:public
transformed_kernel_	convolution-x64.h	/^  DType *transformed_kernel_;$/;"	m	struct:FixPointConvolution	access:public
valid_m_	convolution-x64.h	/^  size_t valid_m_;$/;"	m	struct:ConvData	access:public
valid_m_	convolution-x64.h	/^  size_t valid_m_;$/;"	m	struct:ConvKernel	access:public
valid_m_	fc-x64.h	/^  size_t valid_m_;$/;"	m	struct:FCData	access:public
valid_m_	fc-x64.h	/^  size_t valid_m_;$/;"	m	struct:FCKernel	access:public
valid_n_	convolution-x64.h	/^  size_t valid_n_;$/;"	m	struct:ConvData	access:public
valid_n_	convolution-x64.h	/^  size_t valid_n_;$/;"	m	struct:ConvKernel	access:public
valid_n_	fc-x64.h	/^  size_t valid_n_;$/;"	m	struct:FCData	access:public
valid_n_	fc-x64.h	/^  size_t valid_n_;$/;"	m	struct:FCKernel	access:public
width_in_	convolution-x64.h	/^  size_t width_in_;$/;"	m	struct:ConvData	access:public
width_in_	convolution-x64.h	/^  size_t width_in_;$/;"	m	struct:FixPointConvolution	access:public
width_out_	base_convolution.h	/^  size_t width_out_;$/;"	m	struct:BaseConvolutionAlgo	access:protected
width_out_	convolution-x64.h	/^  size_t width_out_;$/;"	m	struct:ConvData	access:public
winograd_v0	tests/test_cpu_conv.cpp	/^void winograd_v0() {$/;"	f	signature:()
winograd_v1	tests/test_cpu_conv.cpp	/^void winograd_v1() {$/;"	f	signature:()
winograd_v2	tests/test_cpu_conv.cpp	/^void winograd_v2() {$/;"	f	signature:()
winograd_v3	tests/test_cpu_conv.cpp	/^void winograd_v3() {$/;"	f	signature:()
workspace_	convolution-x64.h	/^  Tensor<SrcType>* workspace_;$/;"	m	struct:ConvData	access:public
workspace_size	nn-fixpoint.h	/^  size_t workspace_size;$/;"	m	struct:FPTensorDesc	access:public
workspace_size	nn-fixpoint.h	/^  size_t workspace_size;$/;"	m	struct:FixTensorDesc	access:public
workspace_size_per_meta_info	nn-fixpoint.h	/^  size_t workspace_size_per_meta_info;;$/;"	m	struct:FixTensorDesc	access:public
~ConvData	convolution-x64.h	/^  ~ConvData() {$/;"	f	struct:ConvData	access:public	signature:()
~ConvKernel	convolution-x64.h	/^  ~ConvKernel() {$/;"	f	struct:ConvKernel	access:public	signature:()
~FCData	fc-x64.h	/^  ~FCData() {$/;"	f	struct:FCData	access:public	signature:()
~FCKernel	fc-x64.h	/^  ~FCKernel() {$/;"	f	struct:FCKernel	access:public	signature:()
~FixPointConvolution	convolution-x64.h	/^  ~FixPointConvolution() {$/;"	f	struct:FixPointConvolution	access:public	signature:()
~Tensor	tensor.h	/^  ~Tensor() {$/;"	f	struct:Tensor	access:public	signature:()
